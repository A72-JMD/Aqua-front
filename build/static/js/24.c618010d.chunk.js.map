{"version":3,"sources":["views/Tickets/EditTicket.js","components/LoaderButton/LoaderButton.js","Common/Api/apiHelper.js","components/DynamicForm/DynamicForm.js"],"names":["EditTicket","props","id","useParams","isLoading","setIsLoading","useState","ticketFields","setTicketFields","projectKey","projectName","priority","name","issuetype","statusId","statusName","summary","description","wasSuccess","setWasSuccess","formTitle","setFormTitle","jiraProject","setJiraProject","formModel","setForm","handleChange","e","changedFields","obj","c1TicketTypes","key","label","type","options","Task","value","onChange","fpTicketTypes","Improvement","Bug","Epic","jiraProjectField","C1","FP","VEN","basicFormFields","Lowest","Low","Medium","High","Highest","userDetails","userInfo","email","required","useEffect","async","console","log","ticketNo","result","path","myInit","headers","Authorization","concat","Auth","currentSession","getIdToken","getJwtToken","API","get","fields","project","alert","GetTicket","fetchData","populateForm","newForm","handleSubmit","res","body","post","postData","toggleWasSuccess","show","arguments","length","undefined","React","createElement","className","Suspense","fallback","Row","Col","xs","Card","CardHeader","CardBody","DynamicForm","title","model","onSubmit","CardFooter","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","dismissWasSuccess","LoaderButton","_ref","disabled","Object","assign","Spinner","size","children","apiGET","apiPath","authenticated","apiName","config","apiGateway","NAME","message","apiPOST","state","setState","doneBuildingModel","dependencies","visiblePage","setVisiblePage","maxPages","setMaxPages","minPage","setMinPage","file","useRef","validationRules","onLoad","stateTemp","event","preventDefault","formValues","map","m","keys","toString","performValidation","success","updateFieldValue","guid","newValue","index","findIndex","object","findFieldByKey","keyval","inputField","target","desiredValue","fieldObject","onRadioChange","onCheckboxChange","updateMultiFieldValue","selected","vals","push","filter","x","checked","onFileChange","current","files","fileName","attributes","fileExt","split","pop","fieldId","maxFileSize","presignedUrl","assessmentId","getPresignedUrl","fetch","method","then","response","json","nextPage","setPage","i","getInput","isChecked","keyName","Input","questionId","parent","renderSelect","fieldValue","defaultValue","renderInput","renderFileInput","fieldOrder","renderStatic","order","data-order","renderPagination","Pagination","listClassName","PaginationItem","PaginationLink","previous","prevPage","href","Array","page","active","next","renderTest","Fragment","sort","a","b","placeholder","questionRef","question_ref","c","validation","setValidationRules","setDependencyRules","FormGroup","row","md","Label","htmlFor","q_ref","check","renderRadio","selectedValues","includes","renderCheckbox","Form","noValidate","renderForm","pagination","paginatedModel","Set","category","cat","temp","cancelButton","cancelButtonText"],"mappings":"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","file":"static/js/24.c618010d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader\r\n} from \"reactstrap\";\r\nimport { Auth, API } from \"aws-amplify\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport DynamicForm from \"../../components/DynamicForm/DynamicForm\";\r\n\r\n/*\r\n\r\nTODO: Error handling - bad ticket number, no access to ticket etc..\r\nDynamically pull valid statuses for specific project from API\r\n*/\r\n\r\nfunction EditTicket(props) {\r\n  let { id } = useParams();\r\n  const [isLoading, setIsLoading] = useState(false); //eslint-disable-line\r\n  const [ticketFields, setTicketFields] = useState({\r\n    projectKey: \"\",\r\n    projectName: \"\",\r\n    priority: { id: \"\", name: \"\" },\r\n    issuetype: { id: \"\", name: \"\" },\r\n    statusId: \"\",\r\n    statusName: \"\",\r\n    summary: \"\",\r\n    description: \"\"\r\n  });\r\n  const [wasSuccess, setWasSuccess] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"\"); //eslint-disable-line\r\n  const [jiraProject, setJiraProject] = useState(\"\");\r\n  const [formModel, setForm] = useState([]);\r\n\r\n  // When a field changes, update state\r\n  const handleChange = (e, changedFields) => {\r\n    var obj = { ...ticketFields, ...changedFields };\r\n    setTicketFields({ ...obj });\r\n  };\r\n\r\n  // #FakeItTilYouMakeIt\r\n  var TicketPriorityValues = {\r\n    Lowest: \"Lowest\",\r\n    Low: \"Low\",\r\n    Medium: \"Medium\",\r\n    High: \"High\",\r\n    Highest: \"Highest\"\r\n  };\r\n\r\n  var c1TicketTypeValues = { Task: \"Task\" };\r\n  var fpTicketTypeValues = {\r\n    Task: \"Task\",\r\n    \"New Feature\": \"New Feature\",\r\n    Improvement: \"Improvement\",\r\n    Bug: \"Bug\",\r\n    Epic: \"Epic\"\r\n  };\r\n  var JiraProjectValues = {\r\n    C1: \"TestCustomerOne\",\r\n    FP: \"Fortian Portal\",\r\n    VEN: \"Vendor Assessment\"\r\n  };\r\n  var c1TicketTypes = {\r\n    key: \"ticketType\",\r\n    label: \"Ticket Type\",\r\n    type: \"select\",\r\n    options: c1TicketTypeValues,\r\n    value: ticketFields.issuetype.name,\r\n    onChange: handleChange\r\n  };\r\n  var fpTicketTypes = {\r\n    key: \"issueType\",\r\n    label: \"Ticket Type\",\r\n    type: \"select\",\r\n    options: fpTicketTypeValues,\r\n    value: ticketFields.issuetype.name,\r\n    onChange: handleChange\r\n  };\r\n  var jiraProjectField = {\r\n    key: \"project\",\r\n    label: \"Project\",\r\n    type: \"static\",\r\n    value: JiraProjectValues[jiraProject]\r\n  };\r\n\r\n  var basicFormFields = [\r\n    {\r\n      key: \"priorityName\",\r\n      label: \"Priority\",\r\n      type: \"select\",\r\n      options: TicketPriorityValues,\r\n      value: ticketFields.priority.name,\r\n      onChange: handleChange\r\n    },\r\n    {\r\n      key: \"reporter\",\r\n      label: \"Reporter\",\r\n      type: \"static\",\r\n      value: props.userDetails.userInfo.email\r\n    },\r\n    {\r\n      key: \"summary\",\r\n      label: \"Ticket Summary\",\r\n      props: { required: true },\r\n      value: ticketFields.summary,\r\n      onChange: handleChange\r\n    },\r\n    {\r\n      key: \"description\",\r\n      label: \"Ticket Description\",\r\n      type: \"textarea\",\r\n      props: { required: true },\r\n      value: ticketFields.description,\r\n      onChange: handleChange\r\n    }\r\n  ];\r\n\r\n  // const updateFormModel = tf => {};\r\n\r\n  // const newForm = [jiraProjectField, c1TicketTypes, ...basicFormFields];\r\n\r\n  const GetTicket = async ticketNo => {\r\n    console.log(\"Getting jira ticket: \" + ticketNo);\r\n    let result = \"\";\r\n    let apiName = \"Fiji-Dev\";\r\n    let path = \"/tickets/\" + ticketNo;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      }\r\n    };\r\n    try {\r\n      result = await API.get(apiName, path, myInit);\r\n      setTicketFields({ ...result.fields });\r\n      setJiraProject(result.fields.project.key);\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Build the form depending on what project the ticket was part of.\r\n  const populateForm = () => {\r\n    var newForm = [];\r\n    switch (jiraProject) {\r\n      case \"C1\":\r\n        newForm = [jiraProjectField, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n      case \"FP\":\r\n        fpTicketTypes.value = ticketFields.issuetype.name;\r\n\r\n        newForm = [jiraProjectField, fpTicketTypes, ...basicFormFields];\r\n        break;\r\n      case \"VEN\":\r\n        newForm = [jiraProjectField, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n      default:\r\n        newForm = [jiraProjectField, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n    }\r\n    setForm(newForm);\r\n  };\r\n\r\n  // TODO: error handling\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await GetTicket(id);\r\n    };\r\n    fetchData();\r\n    populateForm();\r\n    // console.log(\"newForm\");\r\n    // console.log(newForm);\r\n  }, [jiraProject]); //eslint-disable-line\r\n  // using formModel causes an infinite loop\r\n\r\n  const loading = () => (\r\n    <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\r\n  );\r\n\r\n  const postData = async body => {\r\n    console.log(\"posting\");\r\n    let result = \"\";\r\n    let apiName = \"Fiji-Dev\";\r\n    let path = `/tickets/${id}/update`;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`,\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n      },\r\n      body: { body }\r\n    };\r\n    try {\r\n      result = await API.post(apiName, path, myInit);\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleSubmit = async model => {\r\n    console.log(\"submitted\");\r\n    setIsLoading(true);\r\n\r\n    var res = await postData(ticketFields);\r\n    console.log(res);\r\n    if (res[\"result\"] === \"None\") {\r\n      toggleWasSuccess(true);\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const toggleWasSuccess = (show = false) => {\r\n    setWasSuccess(show);\r\n  };\r\n  const dismissWasSuccess = () => {\r\n    setWasSuccess(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\">\r\n      <React.Suspense fallback={loading()}>\r\n        <Row>\r\n          <Col xs=\"12\">\r\n            <Card>\r\n              <CardHeader>\r\n                Update ticket: <strong>{id}</strong>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Row>\r\n                  <DynamicForm\r\n                    className=\"form\"\r\n                    title={formTitle}\r\n                    model={formModel}\r\n                    onSubmit={model => {\r\n                      handleSubmit(model);\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </CardBody>\r\n              <CardFooter></CardFooter>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Modal\r\n          isOpen={wasSuccess}\r\n          toggle={toggleWasSuccess}\r\n          className=\"modal-success\"\r\n        >\r\n          <ModalHeader toggle={toggleWasSuccess}>Ticket updated</ModalHeader>\r\n          <ModalBody>Ticket {` ${id} `} was successfully updated.</ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"secondary\" onClick={dismissWasSuccess}>\r\n              Ok\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </React.Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditTicket;\r\n","import React from \"react\";\r\nimport { Button, Spinner } from \"reactstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Button\r\n      className={`LoaderButton ${className}`}\r\n      disabled={disabled || isLoading}\r\n      {...props}>\r\n      {isLoading && <Spinner size='sm' color='light' />}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n}\r\n","import { Auth, API } from \"aws-amplify\";\r\n\r\nimport config from \"../../config\";\r\n\r\nexport async function apiGET(apiPath, authenticated = true) {\r\n  try {\r\n    console.log(\"Test Getting\");\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = authenticated\r\n      ? {\r\n          headers: {\r\n            Authorization: `Bearer ${(await Auth.currentSession())\r\n              .getIdToken()\r\n              .getJwtToken()}`\r\n          }\r\n        }\r\n      : \"\";\r\n    var result = await API.get(apiName, path, myInit);\r\n    console.log(\"GET result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else if (e.message === \"Request failed with status code 400\") {\r\n      return null;\r\n    } else {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// GET\r\n/// POST\r\nexport async function apiPOST(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.post(apiName, path, myInit);\r\n    console.log(\"POST result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"POST ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// PUT\r\n\r\nexport async function apiPUT(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.put(apiName, path, myInit);\r\n    console.log(\"PUT result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"PUT ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink\r\n} from \"reactstrap\";\r\n\r\nimport LoaderButton from \"../../components/LoaderButton/LoaderButton\";\r\nimport { apiGET } from \"../../Common/Api/apiHelper\";\r\n\r\nexport default function DynamicForm(props) {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    doneBuildingModel: false,\r\n    dependencies: {},\r\n    formModel: {}\r\n  });\r\n  const [visiblePage, setVisiblePage] = useState(0);\r\n  const [maxPages, setMaxPages] = useState(0);\r\n\r\n  // const [validationSuccess, setValidationSuccess] = useState(false);\r\n  const [minPage, setMinPage] = useState(0); //eslint-disable-line\r\n\r\n  const file = useRef(null); // useRef will not trigger component rerender on change\r\n\r\n  var validationRules = [{}];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await onLoad();\r\n    };\r\n    fetchData();\r\n  }, []); //eslint-disable-line\r\n\r\n  // When the component loads, update state with any pre-filled values\r\n  const onLoad = () => {\r\n    // console.log(\"ON LOAD TRIGGERED\");\r\n    let model = props.model;\r\n    var stateTemp = { ...state };\r\n    console.log(\"JMD-\");\r\n\r\n    setVisiblePage(props.visiblePage ? props.visiblePage : 0);\r\n    setMaxPages(props.maxPages ? props.maxPages : 1);\r\n\r\n    stateTemp.formModel = model;\r\n\r\n    // console.log(\"DUMP: \", stateTemp.formModel);\r\n    stateTemp.doneBuildingModel = true;\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const performValidation = () => {\r\n    var success = true;\r\n    // console.log(\"validating...\");\r\n    try {\r\n      // console.log(\"validationRules\");\r\n      // console.log(validationRules);\r\n      // console.log(\"state\");\r\n      // console.log(state);\r\n      Object.keys(state.formModel).map(function(key) {\r\n        console.log(validationRules[key].required);\r\n\r\n        // TODO trigger validation message useful tot he specific field\r\n        if (validationRules[key].required && state.formModel[key].length <= 0) {\r\n          success = false;\r\n        }\r\n\r\n        if (state.formModel[key].length > 0) {\r\n          if (state.formModel[key].length < validationRules[key].length) {\r\n            success = false;\r\n          }\r\n        }\r\n      });\r\n\r\n      // validationRules.map((i, c) => {\r\n      //   console.log(i);\r\n      //   console.log(validationRules[i]);\r\n      //   if (validationRules[c][\"rules\"][\"required\"]) {\r\n      //     if (state[validationRules[c].field].length === 0) {\r\n      //       setValidationSuccess(false);\r\n      //     }\r\n      //   }\r\n      // });\r\n    } catch (e) {}\r\n    return success;\r\n  };\r\n\r\n  const setValidationRules = async model => {\r\n    // model.map((i, c) => {\r\n    //   console.log(Object.keys(model[c].validation));\r\n    //   console.log(Object.values(model[c].validation));\r\n    // });\r\n\r\n    model.map((i, c) => {\r\n      var key = model[c].key;\r\n      var x = {\r\n        //field: key,\r\n      };\r\n      validationRules[key] = {\r\n        ...model[c].validation\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    console.log(\"submitted\");\r\n    event.preventDefault();\r\n\r\n    let model = state.formModel;\r\n    let formValues = {};\r\n\r\n    model.map(m => {\r\n      if (m.options) {\r\n        formValues[m.key] = m.value || Object.keys(m.options)[0].toString();\r\n      } else {\r\n        formValues[m.key] = m.value || \"\";\r\n      }\r\n    });\r\n\r\n    if (performValidation()) {\r\n      setState({ ...state, isLoading: true });\r\n      if (props.onSubmit) props.onSubmit(formValues);\r\n      setState({ ...state, isLoading: false });\r\n      console.log(\"Validation Success\");\r\n    } else {\r\n      alert(\"Validation Failed\");\r\n    }\r\n  };\r\n\r\n  const updateMultiFieldValue = (guid, newValue, selected) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) {\r\n      var vals = [];\r\n      if (stateTemp.formModel[index][\"value\"] === \"\")\r\n        stateTemp.formModel[index][\"value\"] = vals;\r\n\r\n      vals = stateTemp.formModel[index][\"value\"];\r\n      if (selected) vals.push(newValue);\r\n      else vals = vals.filter(x => x !== newValue);\r\n\r\n      stateTemp.formModel[index][\"value\"] = vals;\r\n    } else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const updateFieldValue = (guid, newValue) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) stateTemp.formModel[index][\"value\"] = newValue;\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  function findFieldByKey(keyval) {\r\n    let index = state.formModel.findIndex(object => {\r\n      return object.key === keyval;\r\n    });\r\n\r\n    if (index > -1) return state.formModel[index];\r\n    else console.log(\"findFieldByKey() failed to find index\");\r\n    return null;\r\n  }\r\n\r\n  // Update local state, call parent onChange if any.\r\n  //TODO: CHANGE ALL TO USE ON CHANGE\r\n  const onChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onRadioChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onCheckboxChange = e => {\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    var wasChecked = e.target.checked;\r\n    updateMultiFieldValue(inputField, desiredValue, wasChecked);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const getPresignedUrl = async fileName => {\r\n    return apiGET(\r\n      `/files/presignedurl?fileName=${fileName}&assessment=${props.assessmentId}`\r\n    );\r\n  };\r\n\r\n  // Upload the file to S3\r\n  /// Validate the file input (file type, size etc...)\r\n  /// GET the presigned url\r\n  /// PUT the file using the presigned url\r\n  const onFileChange = async e => {\r\n    setState({ ...state, isLoading: true });\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n    // console.log(e.target.attributes[\"order\"].value);\r\n    file.current = e.target.files[0];\r\n    var fileName = e.target.attributes[\"order\"].value;\r\n    var fileExt = file.current.name.split(\".\").pop();\r\n    var fieldId = e.target.id;\r\n\r\n    // basic file validation to make sure it works.\r\n    var maxFileSize = 5000000;\r\n    // basic file size validation:\r\n    if (file.current && file.current.size > maxFileSize) {\r\n      alert(`Please pick a file smaller than ${maxFileSize / 1000000} MB.`);\r\n      return;\r\n    }\r\n\r\n    // Get a presigned url.\r\n    //console.log(\"Getting presigned url\");\r\n    var presignedUrl = await getPresignedUrl(`${fileName}.${fileExt}`);\r\n    //console.log(presignedUrl);\r\n\r\n    // upload the file.\r\n    try {\r\n      var fileTest = await fetch(presignedUrl[\"body\"], {\r\n        method: \"PUT\",\r\n        body: file.current,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n      }).then(response => response.json());\r\n\r\n      // console.log(\"fileTest\");\r\n      // console.log(fileTest);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n        //toggleApiError502(true);\r\n      } else {\r\n        console.log(e);\r\n        //props.onLogout();\r\n      }\r\n    }\r\n\r\n    var stateTemp = { ...state };\r\n\r\n    updateFieldValue(fieldId, file.current.name);\r\n    //stateTemp.formModel[fieldId] = file.current.name;\r\n\r\n    setState({ ...stateTemp });\r\n\r\n    if (props.onSubmit) props.onSubmit(stateTemp);\r\n    setState({ ...state, isLoading: false });\r\n  };\r\n\r\n  const setDependencyRules = model => {\r\n    var stateTemp = { ...state };\r\n\r\n    model.map((m, c) => {\r\n      if (m.dependencies.length > 0) {\r\n        stateTemp[\"dependencies\"][m.key] = m.dependencies;\r\n      }\r\n    });\r\n  };\r\n\r\n  /// TODO: Implement hide/show dependent questions.\r\n  const hideField = () => {};\r\n\r\n  const showField = () => {};\r\n\r\n  /// Pagination functions\r\n\r\n  // Go to the next page\r\n  // Make sure that the next page exists before setting it.\r\n  const nextPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n    // apparently ! for 'not' doesn't work in react ¯\\_(ツ)_/¯\r\n    if (visiblePage + 2 > maxPages) {\r\n      console.log(\r\n        `${visiblePage + 2} is greater than the max pages ${maxPages}`\r\n      );\r\n    } else {\r\n      setVisiblePage(visiblePage + 1);\r\n    }\r\n  };\r\n\r\n  // Go to the previous page.\r\n  // Make sure that the previous page exists before setting it.\r\n  const prevPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    if (visiblePage - 1 < minPage) {\r\n      console.log(`${visiblePage - 1} is less than the min pages ${minPage}`);\r\n    } else {\r\n      setVisiblePage(visiblePage - 1);\r\n    }\r\n  };\r\n\r\n  // Go to a specific page\r\n  // Make sure that the page exists before setting it.\r\n  const setPage = (e, i) => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    // console.log(\"setting the page\");\r\n    // console.log(`page: ${i}, min: ${minPage}, max:${maxPages}`);\r\n    if (i + 1 >= minPage && i + 1 <= maxPages) {\r\n      setVisiblePage(i);\r\n    } else {\r\n      console.log(`${i} is out of bounds.`);\r\n    }\r\n  };\r\n\r\n  /// Field render functions\r\n  const renderStatic = fieldValue => {\r\n    // console.log(\"Rendering Static\");\r\n    return <p className=\"form-control-static\">{fieldValue}</p>;\r\n  };\r\n\r\n  const renderCheckbox = (options, key, fieldValue = -1) => {\r\n    // console.log(\"Rendering Checkbox\");\r\n    var selectedValues = [];\r\n    var index = state.formModel.findIndex(object => {\r\n      return object.key === key;\r\n    });\r\n\r\n    if (index > -1) selectedValues = state.formModel[index][\"value\"];\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    return (\r\n      <span>\r\n        {Object.keys(options).map((keyName, i) => (\r\n          <FormGroup check className=\"checkbox\" key={`${i}checkboxformgroup`}>\r\n            <Input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id={`${key}_${keyName}`}\r\n              name={key}\r\n              value={keyName}\r\n              parent={key}\r\n              onChange={e => {\r\n                onCheckboxChange(e);\r\n              }}\r\n              checked={selectedValues.includes(keyName)}\r\n            />\r\n            <Label\r\n              check\r\n              className=\"form-check-label\"\r\n              htmlFor={`${key}_${keyName}`}\r\n            >\r\n              {options[keyName]}\r\n            </Label>\r\n          </FormGroup>\r\n        ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getInput = (isChecked, key, keyName) => {\r\n    if (isChecked === true)\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n          checked={true}\r\n        />\r\n      );\r\n    else\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n        />\r\n      );\r\n  };\r\n\r\n  const renderRadio = (options, key, q_ref, fieldValue = -1) => {\r\n    //console.log(\"Rendering Radio\");\r\n    // console.log(options);\r\n    // console.log(key);\r\n    //console.log(fieldValue);\r\n    return (\r\n      <span>\r\n        {Object.keys(options)\r\n          .sort((a, b) => a < b)\r\n          .map((keyName, i) => (\r\n            <FormGroup key={`${i}radioformgroup`} check className=\"radio\">\r\n              {getInput(keyName === fieldValue, key, keyName)}\r\n              <Label\r\n                check\r\n                className=\"form-check-label\"\r\n                htmlFor={`${key}_${keyName}`}\r\n              >\r\n                {options[keyName]}\r\n              </Label>\r\n            </FormGroup>\r\n          ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderSelect = (options, key, fieldValue) => {\r\n    // console.log(\"Rendering Select\");\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type=\"select\"\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        >\r\n          {Object.keys(options).map((keyName, i) => (\r\n            <option\r\n              key={`${i}selectOption`}\r\n              value={keyName}\r\n              selected={options[keyName] === fieldValue ? \"selected\" : \"\"}\r\n            >\r\n              {options[keyName]}\r\n            </option>\r\n          ))}\r\n        </Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderInput = (type, key, fieldValue) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFileInput = (type, key, fieldValue, fieldOrder) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    // console.log(\"fieldValueFile\");\r\n    // console.log(fieldValue);\r\n\r\n    var hasValue = fieldValue !== \"\";\r\n    return hasValue === true ? (\r\n      renderStatic(fieldValue)\r\n    ) : (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          onChange={e => {\r\n            onFileChange(e);\r\n          }}\r\n          order={fieldOrder}\r\n          data-order={fieldOrder}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Assuming for now there will always be at least one page.\r\n  const renderPagination = maxPages => {\r\n    return (\r\n      <Pagination listClassName=\"justify-content-center\">\r\n        <PaginationItem disabled={visiblePage === 0}>\r\n          <PaginationLink previous onClick={e => prevPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n        {[...Array(maxPages)].map((page, i) => (\r\n          <PaginationItem active={i === visiblePage} key={i}>\r\n            <PaginationLink onClick={e => setPage(e, i)} href=\"#\">\r\n              {i + 1}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem disabled={visiblePage + 1 === maxPages}>\r\n          <PaginationLink next onClick={e => nextPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  };\r\n\r\n  const renderTest = model => {\r\n    try {\r\n      return (\r\n        <>\r\n          {/* {model.map((mod, i) => {\r\n            return ( */}\r\n          {Object.keys(model[visiblePage]).map((keyName, i) => (\r\n            <>\r\n              <h3>{keyName}</h3>\r\n              <p></p>\r\n              {/* <p> {JSON.stringify(mod[keyName])}</p> */}\r\n              <div>\r\n                {model[visiblePage][keyName]\r\n                  .sort((a, b) => a.order > b.order)\r\n                  .map(m => {\r\n                    let key = m.key;\r\n                    let type = m.type || \"text\";\r\n                    let props = m.props || {};\r\n                    let placeholder = m.placeholder || \"\";\r\n                    let fieldValue = m.value || \"\";\r\n                    let options = m.options || {};\r\n                    let questionRef = m.question_ref;\r\n\r\n                    setValidationRules(model[visiblePage][keyName]);\r\n                    setDependencyRules(model[visiblePage][keyName]);\r\n\r\n                    return (\r\n                      <FormGroup row key={`${key}label`}>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor={key}>\r\n                            {m.order} - {m.label}\r\n                          </Label>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"9\">\r\n                          {(() => {\r\n                            switch (type) {\r\n                              case \"select\":\r\n                                return renderSelect(options, key, fieldValue);\r\n                              case \"radio\":\r\n                                return renderRadio(\r\n                                  options,\r\n                                  key,\r\n                                  questionRef,\r\n                                  fieldValue\r\n                                );\r\n                              case \"checkbox\":\r\n                                return renderCheckbox(options, key, fieldValue);\r\n                              case \"text\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"textarea\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"date\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"tel\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"file\":\r\n                                return renderFileInput(\r\n                                  type,\r\n                                  key,\r\n                                  fieldValue,\r\n                                  m.order\r\n                                );\r\n                              default:\r\n                                return \"renderStatic(fieldValue)\";\r\n                            }\r\n                          })()}\r\n                        </Col>\r\n                      </FormGroup>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </>\r\n          ))}\r\n          {/* );\r\n           })} */}\r\n          {renderPagination(maxPages)}\r\n        </>\r\n      );\r\n    } catch (e) {\r\n      return <div>{e.message}</div>;\r\n    }\r\n  };\r\n\r\n  const renderForm = () => {\r\n    // console.log(\"Form model\");\r\n    // console.log(props.model);\r\n    let model = state.formModel;\r\n\r\n    if (props.pagination === true) {\r\n      let categories = [...new Set(model.map(m => m.category))]; // Distinct list of the question categories\r\n      var paginatedModel = categories.map(cat => {\r\n        var temp = {};\r\n        temp[cat] = model.filter(i => {\r\n          return i.category === cat;\r\n        });\r\n        return temp;\r\n      });\r\n\r\n      // console.log(\"y\");\r\n      // console.log(paginatedModel);\r\n      return renderTest(paginatedModel);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col md=\"12\">\r\n      <Card>\r\n        <Form\r\n          className=\"needs-validation\"\r\n          noValidate\r\n          onSubmit={e => {\r\n            handleSubmit(e);\r\n          }}\r\n          method=\"post\"\r\n        >\r\n          {(() => {\r\n            if (props.title) {\r\n              return (\r\n                <CardHeader>\r\n                  <strong>{props.title}</strong>\r\n                </CardHeader>\r\n              );\r\n            } else {\r\n            }\r\n          })()}\r\n          <CardBody>\r\n            {state.doneBuildingModel === true && renderForm()}\r\n          </CardBody>\r\n          <CardFooter>\r\n            <div></div>\r\n            <LoaderButton\r\n              size=\"sm\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              isLoading={state.isLoading}\r\n              className=\"mx-1\"\r\n              //   onClick={e => {\r\n              //     handleSubmit(e);\r\n              //   }}\r\n            >\r\n              Save\r\n            </LoaderButton>\r\n\r\n            {(() => {\r\n              if (props.cancelButton) {\r\n                return (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    color=\"link\"\r\n                    type=\"reset\"\r\n                    className=\"mx-1\"\r\n                    onClick={props.cancelButton}\r\n                  >\r\n                    {props.cancelButtonText}\r\n                  </Button>\r\n                );\r\n              } else {\r\n              }\r\n            })()}\r\n\r\n            {/* {props.maxPages ? renderPagination(state.maxPages) : \"\"} */}\r\n          </CardFooter>\r\n        </Form>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n"],"sourceRoot":""}