{"version":3,"sources":["views/Test/formTest.js","components/LoaderButton/LoaderButton.js","Common/Api/apiHelper.js","components/DynamicForm/DynamicForm.js"],"names":["FormTest","props","formTitle","setFormTitle","useState","formModel","setForm","isLoading","setIsLoading","pageReady","setPageReady","maxPages","setMaxPages","mockFormModel","label","subtext","question_ref","key","type","validations","value","rulename","errormsg","dependencies","useEffect","onLoad","async","console","log","params","queryString","parse","location","search","jwt","getData","then","data","catch","error","apiGET","handleSubmit","model","result","apiPOST","body","postData","React","createElement","className","Row","DynamicForm","onSubmit","LoadingBlock","LoaderButton","_ref","disabled","Button","Object","assign","concat","Spinner","size","color","children","apiPath","authenticated","arguments","length","undefined","apiName","config","apiGateway","NAME","path","myInit","headers","Authorization","Auth","currentSession","getIdToken","getJwtToken","API","get","e","message","post","state","setState","doneBuildingModel","visiblePage","setVisiblePage","minPage","setMinPage","file","useRef","validationRules","fetchData","stateTemp","event","preventDefault","formValues","map","m","options","keys","toString","performValidation","success","required","alert","updateFieldValue","guid","newValue","index","findIndex","object","findFieldByKey","keyval","onChange","inputField","target","name","desiredValue","fieldObject","onRadioChange","onCheckboxChange","updateMultiFieldValue","selected","vals","push","filter","x","checked","onFileChange","current","files","fileName","attributes","fileExt","split","pop","fieldId","id","maxFileSize","presignedUrl","assessmentId","getPresignedUrl","fetch","method","response","json","nextPage","setPage","i","getInput","isChecked","keyName","Input","questionId","parent","renderSelect","fieldValue","defaultValue","renderInput","renderFileInput","fieldOrder","renderStatic","order","data-order","renderPagination","Pagination","listClassName","PaginationItem","PaginationLink","previous","onClick","prevPage","href","Array","page","active","next","renderTest","Fragment","sort","a","b","placeholder","questionRef","c","validation","setValidationRules","setDependencyRules","FormGroup","row","Col","md","Label","htmlFor","xs","q_ref","check","renderRadio","selectedValues","includes","renderCheckbox","Card","Form","noValidate","title","CardHeader","CardBody","renderForm","pagination","paginatedModel","Set","category","cat","temp","CardFooter","cancelButton","cancelButtonText"],"mappings":"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","file":"static/js/22.935c16bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport DynamicForm from \"../../components/DynamicForm/DynamicForm\";\r\nimport { Row } from \"reactstrap\";\r\nimport LoadingBlock from \"../../components/loadingBlock/loadingBlock\";\r\nimport { apiGET, apiPOST } from \"../../Common/Api/apiHelper\";\r\nimport queryString from \"query-string\";\r\n\r\nfunction FormTest(props) {\r\n  const [formTitle, setFormTitle] = useState(\"Vendor Assessment\"); //eslint-disable-line\r\n  const [formModel, setForm] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pageReady, setPageReady] = useState(false);\r\n  const [maxPages, setMaxPages] = useState(1);\r\n\r\n  const mock = [\r\n    {\r\n      category: \"Information Security Governance, Policy, Compliance\",\r\n      key: \"04c07082-2ab4-11ea-9476-ae3e727d6468\",\r\n      label: \"mock question required\",\r\n      order: 1,\r\n      tier: 1,\r\n      type: \"text\",\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        length: 10\r\n      }\r\n    },\r\n    {\r\n      category: \"Information Security Governance, Policy, Compliance\",\r\n      key: \"ae3e727d6468-2ab4-11ea-9476-04c07082\",\r\n      label: \"mock question two\",\r\n      order: 1,\r\n      tier: 1,\r\n      type: \"text\",\r\n      value: \"\",\r\n      validation: {\r\n        required: false,\r\n        length: 13\r\n      }\r\n    }\r\n  ];\r\n\r\n  const mockFormModel = [\r\n    {\r\n      label: \"Domain\",\r\n      subtext: \"Null\",\r\n      question_ref: \"ISABCM_77\",\r\n      key: \"domain\",\r\n      type: \"text\",\r\n      validations: [\r\n        {\r\n          value: true,\r\n          rulename: \"mandatory\",\r\n          errormsg: \"This question is required.\"\r\n        }\r\n      ],\r\n      dependencies: [],\r\n      value: \"\"\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    onLoad();\r\n  }, []); // eslint-disable-line\r\n\r\n  const onLoad = async () => {\r\n    setForm(mockFormModel);\r\n\r\n    console.log(\"props.match.params.id\");\r\n    let params = queryString.parse(props.location.search);\r\n    console.log(params);\r\n    console.log(params.jwt ? true : false);\r\n    console.log(props);\r\n\r\n    setPageReady(true);\r\n    await getData()\r\n      .then(data => {\r\n        setIsLoading(false);\r\n        setPageReady(true);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  // Pull out into a generic reusable function\r\n  const getData = async () => {\r\n    console.log(\"got here\");\r\n    return await apiGET(`/test_lambda`);\r\n  };\r\n\r\n  const postData = async body => {\r\n    setIsLoading(true);\r\n    var result = await apiPOST(`/test_lambda`, body);\r\n    setIsLoading(false);\r\n    return result;\r\n  };\r\n\r\n  const handleSubmit = async model => {\r\n    console.log(\"submittedHere\");\r\n    console.log(model);\r\n\r\n    postData(model);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\">\r\n      {pageReady ? (\r\n        <Row>\r\n          <DynamicForm\r\n            className=\"form\"\r\n            model={formModel}\r\n            onSubmit={model => {\r\n              handleSubmit(model);\r\n            }}\r\n          />\r\n        </Row>\r\n      ) : (\r\n        <LoadingBlock />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormTest;\r\n","import React from \"react\";\r\nimport { Button, Spinner } from \"reactstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Button\r\n      className={`LoaderButton ${className}`}\r\n      disabled={disabled || isLoading}\r\n      {...props}>\r\n      {isLoading && <Spinner size='sm' color='light' />}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n}\r\n","import { Auth, API } from \"aws-amplify\";\r\n\r\nimport config from \"../../config\";\r\n\r\nexport async function apiGET(apiPath, authenticated = true) {\r\n  try {\r\n    console.log(\"Test Getting\");\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = authenticated\r\n      ? {\r\n          headers: {\r\n            Authorization: `Bearer ${(await Auth.currentSession())\r\n              .getIdToken()\r\n              .getJwtToken()}`\r\n          }\r\n        }\r\n      : \"\";\r\n    var result = await API.get(apiName, path, myInit);\r\n    console.log(\"GET result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else if (e.message === \"Request failed with status code 400\") {\r\n      return null;\r\n    } else {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// GET\r\n/// POST\r\nexport async function apiPOST(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.post(apiName, path, myInit);\r\n    console.log(\"POST result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"POST ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// PUT\r\n\r\nexport async function apiPUT(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.put(apiName, path, myInit);\r\n    console.log(\"PUT result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"PUT ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink\r\n} from \"reactstrap\";\r\n\r\nimport LoaderButton from \"../../components/LoaderButton/LoaderButton\";\r\nimport { apiGET } from \"../../Common/Api/apiHelper\";\r\n\r\nexport default function DynamicForm(props) {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    doneBuildingModel: false,\r\n    dependencies: {},\r\n    formModel: {}\r\n  });\r\n  const [visiblePage, setVisiblePage] = useState(0);\r\n  const [maxPages, setMaxPages] = useState(0);\r\n\r\n  // const [validationSuccess, setValidationSuccess] = useState(false);\r\n  const [minPage, setMinPage] = useState(0); //eslint-disable-line\r\n\r\n  const file = useRef(null); // useRef will not trigger component rerender on change\r\n\r\n  var validationRules = [{}];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await onLoad();\r\n    };\r\n    fetchData();\r\n  }, []); //eslint-disable-line\r\n\r\n  // When the component loads, update state with any pre-filled values\r\n  const onLoad = () => {\r\n    // console.log(\"ON LOAD TRIGGERED\");\r\n    let model = props.model;\r\n    var stateTemp = { ...state };\r\n    console.log(\"JMD-\");\r\n\r\n    setVisiblePage(props.visiblePage ? props.visiblePage : 0);\r\n    setMaxPages(props.maxPages ? props.maxPages : 1);\r\n\r\n    stateTemp.formModel = model;\r\n\r\n    // console.log(\"DUMP: \", stateTemp.formModel);\r\n    stateTemp.doneBuildingModel = true;\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const performValidation = () => {\r\n    var success = true;\r\n    // console.log(\"validating...\");\r\n    try {\r\n      // console.log(\"validationRules\");\r\n      // console.log(validationRules);\r\n      // console.log(\"state\");\r\n      // console.log(state);\r\n      Object.keys(state.formModel).map(function(key) {\r\n        console.log(validationRules[key].required);\r\n\r\n        // TODO trigger validation message useful tot he specific field\r\n        if (validationRules[key].required && state.formModel[key].length <= 0) {\r\n          success = false;\r\n        }\r\n\r\n        if (state.formModel[key].length > 0) {\r\n          if (state.formModel[key].length < validationRules[key].length) {\r\n            success = false;\r\n          }\r\n        }\r\n      });\r\n\r\n      // validationRules.map((i, c) => {\r\n      //   console.log(i);\r\n      //   console.log(validationRules[i]);\r\n      //   if (validationRules[c][\"rules\"][\"required\"]) {\r\n      //     if (state[validationRules[c].field].length === 0) {\r\n      //       setValidationSuccess(false);\r\n      //     }\r\n      //   }\r\n      // });\r\n    } catch (e) {}\r\n    return success;\r\n  };\r\n\r\n  const setValidationRules = async model => {\r\n    // model.map((i, c) => {\r\n    //   console.log(Object.keys(model[c].validation));\r\n    //   console.log(Object.values(model[c].validation));\r\n    // });\r\n\r\n    model.map((i, c) => {\r\n      var key = model[c].key;\r\n      var x = {\r\n        //field: key,\r\n      };\r\n      validationRules[key] = {\r\n        ...model[c].validation\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    console.log(\"submitted\");\r\n    event.preventDefault();\r\n\r\n    let model = state.formModel;\r\n    let formValues = {};\r\n\r\n    model.map(m => {\r\n      if (m.options) {\r\n        formValues[m.key] = m.value || Object.keys(m.options)[0].toString();\r\n      } else {\r\n        formValues[m.key] = m.value || \"\";\r\n      }\r\n    });\r\n\r\n    if (performValidation()) {\r\n      setState({ ...state, isLoading: true });\r\n      if (props.onSubmit) props.onSubmit(formValues);\r\n      setState({ ...state, isLoading: false });\r\n      console.log(\"Validation Success\");\r\n    } else {\r\n      alert(\"Validation Failed\");\r\n    }\r\n  };\r\n\r\n  const updateMultiFieldValue = (guid, newValue, selected) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) {\r\n      var vals = [];\r\n      if (stateTemp.formModel[index][\"value\"] === \"\")\r\n        stateTemp.formModel[index][\"value\"] = vals;\r\n\r\n      vals = stateTemp.formModel[index][\"value\"];\r\n      if (selected) vals.push(newValue);\r\n      else vals = vals.filter(x => x !== newValue);\r\n\r\n      stateTemp.formModel[index][\"value\"] = vals;\r\n    } else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const updateFieldValue = (guid, newValue) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) stateTemp.formModel[index][\"value\"] = newValue;\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  function findFieldByKey(keyval) {\r\n    let index = state.formModel.findIndex(object => {\r\n      return object.key === keyval;\r\n    });\r\n\r\n    if (index > -1) return state.formModel[index];\r\n    else console.log(\"findFieldByKey() failed to find index\");\r\n    return null;\r\n  }\r\n\r\n  // Update local state, call parent onChange if any.\r\n  //TODO: CHANGE ALL TO USE ON CHANGE\r\n  const onChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onRadioChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onCheckboxChange = e => {\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    var wasChecked = e.target.checked;\r\n    updateMultiFieldValue(inputField, desiredValue, wasChecked);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const getPresignedUrl = async fileName => {\r\n    return apiGET(\r\n      `/files/presignedurl?fileName=${fileName}&assessment=${props.assessmentId}`\r\n    );\r\n  };\r\n\r\n  // Upload the file to S3\r\n  /// Validate the file input (file type, size etc...)\r\n  /// GET the presigned url\r\n  /// PUT the file using the presigned url\r\n  const onFileChange = async e => {\r\n    setState({ ...state, isLoading: true });\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n    // console.log(e.target.attributes[\"order\"].value);\r\n    file.current = e.target.files[0];\r\n    var fileName = e.target.attributes[\"order\"].value;\r\n    var fileExt = file.current.name.split(\".\").pop();\r\n    var fieldId = e.target.id;\r\n\r\n    // basic file validation to make sure it works.\r\n    var maxFileSize = 5000000;\r\n    // basic file size validation:\r\n    if (file.current && file.current.size > maxFileSize) {\r\n      alert(`Please pick a file smaller than ${maxFileSize / 1000000} MB.`);\r\n      return;\r\n    }\r\n\r\n    // Get a presigned url.\r\n    //console.log(\"Getting presigned url\");\r\n    var presignedUrl = await getPresignedUrl(`${fileName}.${fileExt}`);\r\n    //console.log(presignedUrl);\r\n\r\n    // upload the file.\r\n    try {\r\n      var fileTest = await fetch(presignedUrl[\"body\"], {\r\n        method: \"PUT\",\r\n        body: file.current,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n      }).then(response => response.json());\r\n\r\n      // console.log(\"fileTest\");\r\n      // console.log(fileTest);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n        //toggleApiError502(true);\r\n      } else {\r\n        console.log(e);\r\n        //props.onLogout();\r\n      }\r\n    }\r\n\r\n    var stateTemp = { ...state };\r\n\r\n    updateFieldValue(fieldId, file.current.name);\r\n    //stateTemp.formModel[fieldId] = file.current.name;\r\n\r\n    setState({ ...stateTemp });\r\n\r\n    if (props.onSubmit) props.onSubmit(stateTemp);\r\n    setState({ ...state, isLoading: false });\r\n  };\r\n\r\n  const setDependencyRules = model => {\r\n    var stateTemp = { ...state };\r\n\r\n    model.map((m, c) => {\r\n      if (m.dependencies.length > 0) {\r\n        stateTemp[\"dependencies\"][m.key] = m.dependencies;\r\n      }\r\n    });\r\n  };\r\n\r\n  /// TODO: Implement hide/show dependent questions.\r\n  const hideField = () => {};\r\n\r\n  const showField = () => {};\r\n\r\n  /// Pagination functions\r\n\r\n  // Go to the next page\r\n  // Make sure that the next page exists before setting it.\r\n  const nextPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n    // apparently ! for 'not' doesn't work in react ¯\\_(ツ)_/¯\r\n    if (visiblePage + 2 > maxPages) {\r\n      console.log(\r\n        `${visiblePage + 2} is greater than the max pages ${maxPages}`\r\n      );\r\n    } else {\r\n      setVisiblePage(visiblePage + 1);\r\n    }\r\n  };\r\n\r\n  // Go to the previous page.\r\n  // Make sure that the previous page exists before setting it.\r\n  const prevPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    if (visiblePage - 1 < minPage) {\r\n      console.log(`${visiblePage - 1} is less than the min pages ${minPage}`);\r\n    } else {\r\n      setVisiblePage(visiblePage - 1);\r\n    }\r\n  };\r\n\r\n  // Go to a specific page\r\n  // Make sure that the page exists before setting it.\r\n  const setPage = (e, i) => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    // console.log(\"setting the page\");\r\n    // console.log(`page: ${i}, min: ${minPage}, max:${maxPages}`);\r\n    if (i + 1 >= minPage && i + 1 <= maxPages) {\r\n      setVisiblePage(i);\r\n    } else {\r\n      console.log(`${i} is out of bounds.`);\r\n    }\r\n  };\r\n\r\n  /// Field render functions\r\n  const renderStatic = fieldValue => {\r\n    // console.log(\"Rendering Static\");\r\n    return <p className=\"form-control-static\">{fieldValue}</p>;\r\n  };\r\n\r\n  const renderCheckbox = (options, key, fieldValue = -1) => {\r\n    // console.log(\"Rendering Checkbox\");\r\n    var selectedValues = [];\r\n    var index = state.formModel.findIndex(object => {\r\n      return object.key === key;\r\n    });\r\n\r\n    if (index > -1) selectedValues = state.formModel[index][\"value\"];\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    return (\r\n      <span>\r\n        {Object.keys(options).map((keyName, i) => (\r\n          <FormGroup check className=\"checkbox\" key={`${i}checkboxformgroup`}>\r\n            <Input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id={`${key}_${keyName}`}\r\n              name={key}\r\n              value={keyName}\r\n              parent={key}\r\n              onChange={e => {\r\n                onCheckboxChange(e);\r\n              }}\r\n              checked={selectedValues.includes(keyName)}\r\n            />\r\n            <Label\r\n              check\r\n              className=\"form-check-label\"\r\n              htmlFor={`${key}_${keyName}`}\r\n            >\r\n              {options[keyName]}\r\n            </Label>\r\n          </FormGroup>\r\n        ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getInput = (isChecked, key, keyName) => {\r\n    if (isChecked === true)\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n          checked={true}\r\n        />\r\n      );\r\n    else\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n        />\r\n      );\r\n  };\r\n\r\n  const renderRadio = (options, key, q_ref, fieldValue = -1) => {\r\n    //console.log(\"Rendering Radio\");\r\n    // console.log(options);\r\n    // console.log(key);\r\n    //console.log(fieldValue);\r\n    return (\r\n      <span>\r\n        {Object.keys(options)\r\n          .sort((a, b) => a < b)\r\n          .map((keyName, i) => (\r\n            <FormGroup key={`${i}radioformgroup`} check className=\"radio\">\r\n              {getInput(keyName === fieldValue, key, keyName)}\r\n              <Label\r\n                check\r\n                className=\"form-check-label\"\r\n                htmlFor={`${key}_${keyName}`}\r\n              >\r\n                {options[keyName]}\r\n              </Label>\r\n            </FormGroup>\r\n          ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderSelect = (options, key, fieldValue) => {\r\n    // console.log(\"Rendering Select\");\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type=\"select\"\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        >\r\n          {Object.keys(options).map((keyName, i) => (\r\n            <option\r\n              key={`${i}selectOption`}\r\n              value={keyName}\r\n              selected={options[keyName] === fieldValue ? \"selected\" : \"\"}\r\n            >\r\n              {options[keyName]}\r\n            </option>\r\n          ))}\r\n        </Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderInput = (type, key, fieldValue) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFileInput = (type, key, fieldValue, fieldOrder) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    // console.log(\"fieldValueFile\");\r\n    // console.log(fieldValue);\r\n\r\n    var hasValue = fieldValue !== \"\";\r\n    return hasValue === true ? (\r\n      renderStatic(fieldValue)\r\n    ) : (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          onChange={e => {\r\n            onFileChange(e);\r\n          }}\r\n          order={fieldOrder}\r\n          data-order={fieldOrder}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Assuming for now there will always be at least one page.\r\n  const renderPagination = maxPages => {\r\n    return (\r\n      <Pagination listClassName=\"justify-content-center\">\r\n        <PaginationItem disabled={visiblePage === 0}>\r\n          <PaginationLink previous onClick={e => prevPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n        {[...Array(maxPages)].map((page, i) => (\r\n          <PaginationItem active={i === visiblePage} key={i}>\r\n            <PaginationLink onClick={e => setPage(e, i)} href=\"#\">\r\n              {i + 1}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem disabled={visiblePage + 1 === maxPages}>\r\n          <PaginationLink next onClick={e => nextPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  };\r\n\r\n  const renderTest = model => {\r\n    try {\r\n      return (\r\n        <>\r\n          {/* {model.map((mod, i) => {\r\n            return ( */}\r\n          {Object.keys(model[visiblePage]).map((keyName, i) => (\r\n            <>\r\n              <h3>{keyName}</h3>\r\n              <p></p>\r\n              {/* <p> {JSON.stringify(mod[keyName])}</p> */}\r\n              <div>\r\n                {model[visiblePage][keyName]\r\n                  .sort((a, b) => a.order > b.order)\r\n                  .map(m => {\r\n                    let key = m.key;\r\n                    let type = m.type || \"text\";\r\n                    let props = m.props || {};\r\n                    let placeholder = m.placeholder || \"\";\r\n                    let fieldValue = m.value || \"\";\r\n                    let options = m.options || {};\r\n                    let questionRef = m.question_ref;\r\n\r\n                    setValidationRules(model[visiblePage][keyName]);\r\n                    setDependencyRules(model[visiblePage][keyName]);\r\n\r\n                    return (\r\n                      <FormGroup row key={`${key}label`}>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor={key}>\r\n                            {m.order} - {m.label}\r\n                          </Label>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"9\">\r\n                          {(() => {\r\n                            switch (type) {\r\n                              case \"select\":\r\n                                return renderSelect(options, key, fieldValue);\r\n                              case \"radio\":\r\n                                return renderRadio(\r\n                                  options,\r\n                                  key,\r\n                                  questionRef,\r\n                                  fieldValue\r\n                                );\r\n                              case \"checkbox\":\r\n                                return renderCheckbox(options, key, fieldValue);\r\n                              case \"text\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"textarea\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"date\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"tel\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"file\":\r\n                                return renderFileInput(\r\n                                  type,\r\n                                  key,\r\n                                  fieldValue,\r\n                                  m.order\r\n                                );\r\n                              default:\r\n                                return \"renderStatic(fieldValue)\";\r\n                            }\r\n                          })()}\r\n                        </Col>\r\n                      </FormGroup>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </>\r\n          ))}\r\n          {/* );\r\n           })} */}\r\n          {renderPagination(maxPages)}\r\n        </>\r\n      );\r\n    } catch (e) {\r\n      return <div>{e.message}</div>;\r\n    }\r\n  };\r\n\r\n  const renderForm = () => {\r\n    // console.log(\"Form model\");\r\n    // console.log(props.model);\r\n    let model = state.formModel;\r\n\r\n    if (props.pagination === true) {\r\n      let categories = [...new Set(model.map(m => m.category))]; // Distinct list of the question categories\r\n      var paginatedModel = categories.map(cat => {\r\n        var temp = {};\r\n        temp[cat] = model.filter(i => {\r\n          return i.category === cat;\r\n        });\r\n        return temp;\r\n      });\r\n\r\n      // console.log(\"y\");\r\n      // console.log(paginatedModel);\r\n      return renderTest(paginatedModel);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col md=\"12\">\r\n      <Card>\r\n        <Form\r\n          className=\"needs-validation\"\r\n          noValidate\r\n          onSubmit={e => {\r\n            handleSubmit(e);\r\n          }}\r\n          method=\"post\"\r\n        >\r\n          {(() => {\r\n            if (props.title) {\r\n              return (\r\n                <CardHeader>\r\n                  <strong>{props.title}</strong>\r\n                </CardHeader>\r\n              );\r\n            } else {\r\n            }\r\n          })()}\r\n          <CardBody>\r\n            {state.doneBuildingModel === true && renderForm()}\r\n          </CardBody>\r\n          <CardFooter>\r\n            <div></div>\r\n            <LoaderButton\r\n              size=\"sm\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              isLoading={state.isLoading}\r\n              className=\"mx-1\"\r\n              //   onClick={e => {\r\n              //     handleSubmit(e);\r\n              //   }}\r\n            >\r\n              Save\r\n            </LoaderButton>\r\n\r\n            {(() => {\r\n              if (props.cancelButton) {\r\n                return (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    color=\"link\"\r\n                    type=\"reset\"\r\n                    className=\"mx-1\"\r\n                    onClick={props.cancelButton}\r\n                  >\r\n                    {props.cancelButtonText}\r\n                  </Button>\r\n                );\r\n              } else {\r\n              }\r\n            })()}\r\n\r\n            {/* {props.maxPages ? renderPagination(state.maxPages) : \"\"} */}\r\n          </CardFooter>\r\n        </Form>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n"],"sourceRoot":""}