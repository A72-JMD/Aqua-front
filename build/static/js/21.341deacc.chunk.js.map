{"version":3,"sources":["views/Pages/Register/Register.js","components/LoaderButton/LoaderButton.js","hooks/useFormFields.js"],"names":["Register","props","fields","handleFieldChange","useFormFields","email","password","confirmPassword","confirmationCode","mfaVerificationCode","newUser","setNewUser","useState","userConfirmed","setUserConfirmed","isLoading","setIsLoading","qrLink","setQRLink","mfaQrCode","setMFAQRCode","mfaSession","setMFASession","userGuid","setUserGuid","mfaFailedAlertVisible","setMFAFailedAlertVisible","async","handleSubmit","event","preventDefault","console","log","Auth","signUp","username","attributes","e","alert","message","handleConfirmationSubmit","confirmSignUp","then","data","x","signIn","body","session","Session","apiName","path","myInit","headers","result","API","post","JSON","stringify","validateMFA","SecretCode","catch","err","handleMFASubmit","code","totp","device","finaliseMFA","history","push","React","createElement","className","Container","Row","Col","md","lg","xl","Card","CardBody","Form","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","id","type","placeholder","autoComplete","onChange","value","LoaderButton","color","block","disabled","CardFooter","autoFocus","QRCode","Alert","_ref","Button","Object","assign","concat","Spinner","size","children","initialState","setValues","target"],"mappings":"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","file":"static/js/21.341deacc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nimport LoaderButton from \"../../../components/LoaderButton/LoaderButton\";\r\nimport { useFormFields } from \"../../../hooks/useFormFields\";\r\n\r\nimport { Auth, API } from \"aws-amplify\";\r\n\r\nimport QRCode from \"qrcode.react\";\r\n\r\nimport \"./Register.scss\";\r\n// import { FileSystemCredentials } from \"aws-sdk/global\";\r\n\r\nexport default function Register(props) {\r\n  const [fields, handleFieldChange] = useFormFields({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    confirmationCode: \"\",\r\n    mfaVerificationCode: \"\",\r\n  });\r\n  const [newUser, setNewUser] = useState(null);\r\n  const [userConfirmed, setUserConfirmed] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [qrLink, setQRLink] = useState(\"\");\r\n  const [mfaQrCode, setMFAQRCode] = useState(\"\");\r\n  const [mfaSession, setMFASession] = useState(\"\");\r\n  const [userGuid, setUserGuid] = useState(\"\"); //eslint-disable-line\r\n  const [mfaFailedAlertVisible, setMFAFailedAlertVisible] = useState(false); //eslint-disable-line\r\n\r\n  // TODO: Use this\r\n  // function validateForm() {\r\n  //   return (\r\n  //     fields.email.length > 0 &&\r\n  //     fields.password.length > 0 &&\r\n  //     fields.password === fields.confirmPassword\r\n  //   );\r\n  // }\r\n\r\n  // function validateConfirmationForm() {\r\n  //   return fields.confirmationCode.length > 0;\r\n  // }\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      console.log(\"==========check email==============\");\r\n      console.log(fields.email);\r\n      const newUser = await Auth.signUp({\r\n        username: fields.email,\r\n        password: fields.password,\r\n        attributes: {\r\n          \"custom:Group\": \"Customer\", // custom attribute, not standard\r\n        },\r\n      });\r\n      console.log(\"==========check newuser==============\");\r\n      console.log(newUser);\r\n      setIsLoading(false);\r\n      setNewUser(newUser);\r\n    } catch (e) {\r\n      alert(e.message);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  /// #1 send the user session to validate MFA,\r\n  /// returns: MFA secret, MFA Session\r\n  const validateMFA = async () => {\r\n    var x = await Auth.signIn(fields.email, fields.password);\r\n    setUserGuid(x.username);\r\n    var body = {\r\n      session: x.Session,\r\n    };\r\n\r\n    try {\r\n      let apiName = \"Fiji-Dev\";\r\n      let path = \"/secretgenerator\";\r\n      let myInit = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body,\r\n      };\r\n      var result = await API.post(apiName, path, myInit);\r\n      console.log(result);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n      } else {\r\n        alert(JSON.stringify(e));\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /// #2 Finalise MFA using the TOTP and Session from #1\r\n  /// Returns: MFA Session (unused)\r\n  const finaliseMFA = async (totp) => {\r\n    var body = {\r\n      session: mfaSession,\r\n      code: totp,\r\n      device: \"\",\r\n    };\r\n\r\n    try {\r\n      let apiName = \"Fiji-Dev\";\r\n      let path = \"/finalise-mfa\";\r\n      let myInit = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body,\r\n      };\r\n      var result = await API.post(apiName, path, myInit);\r\n    } catch (e) {\r\n      // TODO: Gracefully handle failed MFA\r\n      if (e.message === \"Request failed with status code 502\") {\r\n      } else {\r\n        alert(JSON.stringify(e));\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Authenticate with the user creds and MFA.\r\n  // NOTE: Doesn't work as expected, MFA token gets expired on first use (verify)\r\n  // this means we cannot reuse it to automatically auth the user.\r\n  // const authWithMFA = async mses => {\r\n  //   try {\r\n  //     var mfaAuthSession = await Auth.signIn(fields.email, fields.password);\r\n\r\n  //     var body = {\r\n  //       session: mfaAuthSession.Session,\r\n  //       client_id: config.cognito.APP_CLIENT_ID,\r\n  //       username: userGuid,\r\n  //       code: fields.mfaVerificationCode\r\n  //     };\r\n\r\n  //     let apiName = \"Fiji-Dev\";\r\n  //     let path = \"/mfavalidator\";\r\n  //     let myInit = {\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\"\r\n  //       },\r\n  //       body\r\n  //     };\r\n  //     var result = await API.post(apiName, path, myInit);\r\n  //   } catch (e) {\r\n  //     if (e.message === \"Request failed with status code 502\") {\r\n  //     } else {\r\n  //       alert(JSON.stringify(e));\r\n  //     }\r\n  //   }\r\n  //   return result;\r\n  // };\r\n\r\n  async function handleConfirmationSubmit(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    await Auth.confirmSignUp(\r\n      fields.email,\r\n      fields.confirmationCode\r\n    ).then((data) => console.log(data));\r\n\r\n    try {\r\n      // Get secret from API\r\n      await validateMFA()\r\n        .then((data) => {\r\n          setMFAQRCode(data.SecretCode);\r\n\r\n          setMFASession(data.Session);\r\n\r\n          setQRLink(\r\n            \"otpauth://totp/Fiji:\" +\r\n              fields.email +\r\n              \"?secret=\" +\r\n              data.SecretCode +\r\n              \"&issuer=Fiji-issuer\"\r\n          );\r\n        })\r\n        .catch((err) => console.log(err));\r\n      setUserConfirmed(true);\r\n      setIsLoading(false);\r\n      //});\r\n    } catch (e) {\r\n      alert(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function handleMFASubmit(event) {\r\n    try {\r\n      event.preventDefault();\r\n      setIsLoading(true);\r\n      await finaliseMFA(fields.mfaVerificationCode);\r\n      // .then(data => {\r\n      //  var newMFASession = \"\";\r\n      //   newMFASession = data.body.Session;\r\n      // });\r\n    } catch (e) {\r\n      alert(\"Waiting for Reece to fix the Lambda :)\");\r\n      alert(JSON.stringify(e.message));\r\n    }\r\n    // var x = newMFASession;\r\n    // var authw = authWithMFA(newMFASession);\r\n\r\n    // console.log(\"authw\");\r\n    // console.log(authw);\r\n\r\n    // TODO: make this a bit more graceful. provide user feedback (success alert)\r\n    props.history.push(\"/login\");\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // function showMFAAlert() {\r\n  //   setMFAFailedAlertVisible(true);\r\n\r\n  //   setTimeout(() => {\r\n  //     setMFAFailedAlertVisible(false);\r\n  //   }, 5000);\r\n  // }\r\n\r\n  function renderQRCode() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleMFASubmit}>\r\n                    <h1>Enable MFA</h1>\r\n                    <p className=\"text-muted\">\r\n                      Enter the code from your email to confirm.\r\n                    </p>\r\n\r\n                    <QRCode value={qrLink} />\r\n                    <p>\r\n                      Scan the code above in your Authenticator app of choice.\r\n                    </p>\r\n                    <p>\r\n                      If you are unable to scan the image, enter the following\r\n                      information:\r\n                      <br />\r\n                      code: {mfaQrCode}\r\n                    </p>\r\n                    <p>\r\n                      Enter the value in the field below to verify the account.\r\n                    </p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>#</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"mfaVerificationCode\"\r\n                        type=\"tel\"\r\n                        placeholder=\"Verify MFA Code\"\r\n                        onChange={handleFieldChange}\r\n                        autoFocus\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      Verify Code\r\n                    </LoaderButton>\r\n                    <p>\r\n                      <Alert\r\n                        color=\"danger\"\r\n                        className={\r\n                          mfaFailedAlertVisible ? \"alert-shown\" : \"alert-hidden\"\r\n                        }\r\n                      >\r\n                        Failed to verify MFA code.\r\n                      </Alert>\r\n                    </p>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\"></CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderConfirmationForm() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleConfirmationSubmit}>\r\n                    <h1>Confirmation code</h1>\r\n                    <p className=\"text-muted\">\r\n                      Enter the code from your email to confirm.\r\n                    </p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>#</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"confirmationCode\"\r\n                        type=\"tel\"\r\n                        placeholder=\"Confirmation Code\"\r\n                        onChange={handleFieldChange}\r\n                        autoFocus\r\n                        value={fields.confirmationCode}\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      {\" \"}\r\n                      Create Account\r\n                    </LoaderButton>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\"></CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderForm() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <h1>Register</h1>\r\n                    <p className=\"text-muted\">Create your account</p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>@</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Email\"\r\n                        autoComplete=\"email\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.email}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        autoComplete=\"new-password\"\r\n                        onChange={handleFieldChange}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-4\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"confirmPassword\"\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        autoComplete=\"new-password\"\r\n                        onChange={handleFieldChange}\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      {\" \"}\r\n                      Create Account\r\n                    </LoaderButton>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\">\r\n                  {/* <Row>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                      <Button className=\"btn-facebook mb-1\" block>\r\n                        <span>facebook</span>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                      <Button className=\"btn-twitter mb-1\" block>\r\n                        <span>twitter</span>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row> */}\r\n                </CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Register\">\r\n      {newUser === null\r\n        ? renderForm()\r\n        : userConfirmed === false\r\n        ? renderConfirmationForm()\r\n        : renderQRCode()}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Spinner } from \"reactstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Button\r\n      className={`LoaderButton ${className}`}\r\n      disabled={disabled || isLoading}\r\n      {...props}>\r\n      {isLoading && <Spinner size='sm' color='light' />}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport function useFormFields(initialState) {\r\n  const [fields, setValues] = useState(initialState);\r\n\r\n  return [\r\n    fields,\r\n    function(event) {\r\n      setValues({\r\n        ...fields,\r\n        [event.target.id]: event.target.value\r\n      });\r\n    }\r\n  ];\r\n}\r\n"],"sourceRoot":""}