{"version":3,"sources":["views/Tickets/DynamicEditTicket.js","components/LoaderButton/LoaderButton.js","Common/Api/apiHelper.js","components/DynamicForm/DynamicForm.js"],"names":["DynamicEditTicket","props","isLoading","setIsLoading","useState","wasSuccess","setWasSuccess","createdTicket","setCreatedTicket","formTitle","setFormTitle","formModel","setForm","JiraProjectValues","C1","FP","VEN","c1TicketTypes","key","label","type","options","Task","fpTicketTypes","Improvement","Bug","Epic","jiraProjects","onChange","event","ttl","target","value","newForm","basicFormFields","Lowest","Low","Medium","High","Highest","userDetails","userInfo","email","required","useEffect","onLoad","async","id","useParams","handleSubmit","res","result","myInit","headers","Authorization","concat","Auth","currentSession","getIdToken","getJwtToken","body","API","post","e","alert","postData","model","toggleWasSuccess","show","arguments","length","undefined","React","createElement","className","Row","Col","xs","Card","CardHeader","CardBody","DynamicForm","title","onSubmit","CardFooter","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","dismissWasSuccess","LoaderButton","_ref","disabled","Object","assign","Spinner","size","children","apiGET","apiPath","authenticated","console","log","apiName","config","apiGateway","NAME","path","get","message","apiPOST","state","setState","doneBuildingModel","dependencies","visiblePage","setVisiblePage","maxPages","setMaxPages","minPage","setMinPage","file","useRef","validationRules","fetchData","stateTemp","preventDefault","formValues","map","m","keys","toString","performValidation","success","updateFieldValue","guid","newValue","index","findIndex","object","findFieldByKey","keyval","inputField","name","desiredValue","fieldObject","onRadioChange","onCheckboxChange","updateMultiFieldValue","selected","vals","push","filter","x","checked","onFileChange","current","files","fileName","attributes","fileExt","split","pop","fieldId","maxFileSize","presignedUrl","assessmentId","getPresignedUrl","fetch","method","then","response","json","nextPage","setPage","i","getInput","isChecked","keyName","Input","questionId","parent","renderSelect","fieldValue","defaultValue","renderInput","renderFileInput","fieldOrder","renderStatic","order","data-order","renderPagination","Pagination","listClassName","PaginationItem","PaginationLink","previous","prevPage","href","Array","page","active","next","renderTest","Fragment","sort","a","b","placeholder","questionRef","question_ref","c","validation","setValidationRules","setDependencyRules","FormGroup","row","md","Label","htmlFor","q_ref","check","renderRadio","selectedValues","includes","renderCheckbox","Form","noValidate","renderForm","pagination","paginatedModel","Set","category","cat","temp","cancelButton","cancelButtonText"],"mappings":"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","file":"static/js/23.59fb2fb3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader\r\n} from \"reactstrap\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport DynamicForm from \"../../components/DynamicForm/DynamicForm\";\r\n\r\nfunction DynamicEditTicket(props) {\r\n  const [isLoading, setIsLoading] = useState(false); //eslint-disable-line\r\n\r\n  const [wasSuccess, setWasSuccess] = useState(false);\r\n  const [createdTicket, setCreatedTicket] = useState(\"\"); //eslint-disable-line\r\n\r\n  const [formTitle, setFormTitle] = useState(\"TestCustomerOne\");\r\n  const [formModel, setForm] = useState([]);\r\n\r\n  // #FakeItTilYouMakeIt\r\n  const updateFormTitle = ttl => {\r\n    setFormTitle(JiraProjectValues[ttl]);\r\n  };\r\n\r\n  const updateForm = event => {\r\n    updateFormTitle(event.target.value);\r\n    var newForm = [];\r\n\r\n    switch (event.target.value) {\r\n      case \"C1\":\r\n        newForm = [jiraProjects, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n      case \"FP\":\r\n        newForm = [jiraProjects, fpTicketTypes, ...basicFormFields];\r\n        break;\r\n      case \"VEN\":\r\n        newForm = [jiraProjects, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n      default:\r\n        newForm = [jiraProjects, c1TicketTypes, ...basicFormFields];\r\n        break;\r\n    }\r\n    setForm(newForm);\r\n  };\r\n\r\n  const TicketPriorityValues = {\r\n    Lowest: \"Lowest\",\r\n    Low: \"Low\",\r\n    Medium: \"Medium\",\r\n    High: \"High\",\r\n    Highest: \"Highest\"\r\n  };\r\n  const c1TicketTypeValues = { Task: \"Task\" };\r\n  const fpTicketTypeValues = {\r\n    Task: \"Task\",\r\n    \"New Feature\": \"New Feature\",\r\n    Improvement: \"Improvement\",\r\n    Bug: \"Bug\",\r\n    Epic: \"Epic\"\r\n  };\r\n  const JiraProjectValues = {\r\n    C1: \"TestCustomerOne\",\r\n    FP: \"Fortian Portal\",\r\n    VEN: \"Vendor Assessment\"\r\n  };\r\n  const c1TicketTypes = {\r\n    key: \"ticketType\",\r\n    label: \"Ticket Type\",\r\n    type: \"select\",\r\n    options: c1TicketTypeValues\r\n  };\r\n  const fpTicketTypes = {\r\n    key: \"ticketType\",\r\n    label: \"Ticket Type\",\r\n    type: \"select\",\r\n    options: fpTicketTypeValues\r\n  };\r\n  const jiraProjects = {\r\n    key: \"project\",\r\n    label: \"Project\",\r\n    type: \"select\",\r\n    options: JiraProjectValues,\r\n    onChange: updateForm\r\n  };\r\n\r\n  const basicFormFields = [\r\n    {\r\n      key: \"priority\",\r\n      label: \"Priority\",\r\n      type: \"select\",\r\n      options: TicketPriorityValues,\r\n      value: \"Medium\"\r\n    },\r\n    {\r\n      key: \"reporter\",\r\n      label: \"Reporter\",\r\n      type: \"static\",\r\n      value: props.userDetails.userInfo.email\r\n    },\r\n    {\r\n      key: \"summary\",\r\n      label: \"Ticket Summary\",\r\n      props: { required: true }\r\n    },\r\n    {\r\n      key: \"description\",\r\n      label: \"Ticket Description\",\r\n      type: \"textarea\",\r\n      props: { required: true }\r\n    }\r\n  ];\r\n\r\n  const newForm = [jiraProjects, c1TicketTypes, ...basicFormFields];\r\n\r\n  useEffect(() => {\r\n    onLoad();\r\n  }, []); //eslint-disable-line\r\n\r\n  const onLoad = async () => {\r\n    setForm(newForm);\r\n  };\r\n  const { id } = useParams();\r\n\r\n  const postData = async body => {\r\n    // console.log(\"posting\");\r\n    // console.log(body);\r\n    let result = \"\";\r\n    let apiName = \"Fiji-Dev\";\r\n    let path = \"/tickets/create\";\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`,\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n      },\r\n      body: { body }\r\n    };\r\n    try {\r\n      result = await API.post(apiName, path, myInit);\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleSubmit = async model => {\r\n    // console.log(\"submittedHere\");\r\n    // console.log(model);\r\n    setIsLoading(true);\r\n\r\n    var res = await postData(model);\r\n    // console.log(res);\r\n    setCreatedTicket(res[\"issueKey\"]);\r\n    // console.log(createdTicket);\r\n    toggleWasSuccess(true);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const toggleWasSuccess = (show = false) => {\r\n    setWasSuccess(show);\r\n  };\r\n  const dismissWasSuccess = () => {\r\n    setWasSuccess(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\">\r\n      <Row>\r\n        <Col xs=\"12\">\r\n          <Card>\r\n            <CardHeader>\r\n              <strong>Dynamic Edit Ticket</strong> {id}\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                <DynamicForm\r\n                  className=\"form\"\r\n                  title={formTitle}\r\n                  model={formModel}\r\n                  onSubmit={model => {\r\n                    handleSubmit(model);\r\n                  }}\r\n                />\r\n              </Row>\r\n            </CardBody>\r\n            <CardFooter></CardFooter>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        isOpen={wasSuccess}\r\n        toggle={toggleWasSuccess}\r\n        className=\"modal-success\"\r\n      >\r\n        <ModalHeader toggle={toggleWasSuccess}>Ticket updated</ModalHeader>\r\n        <ModalBody>Ticket {` ${id} `} was successfully updated.</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={dismissWasSuccess}>\r\n            Ok\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicEditTicket;\r\n","import React from \"react\";\r\nimport { Button, Spinner } from \"reactstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Button\r\n      className={`LoaderButton ${className}`}\r\n      disabled={disabled || isLoading}\r\n      {...props}>\r\n      {isLoading && <Spinner size='sm' color='light' />}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n}\r\n","import { Auth, API } from \"aws-amplify\";\r\n\r\nimport config from \"../../config\";\r\n\r\nexport async function apiGET(apiPath, authenticated = true) {\r\n  try {\r\n    console.log(\"Test Getting\");\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = authenticated\r\n      ? {\r\n          headers: {\r\n            Authorization: `Bearer ${(await Auth.currentSession())\r\n              .getIdToken()\r\n              .getJwtToken()}`\r\n          }\r\n        }\r\n      : \"\";\r\n    var result = await API.get(apiName, path, myInit);\r\n    console.log(\"GET result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else if (e.message === \"Request failed with status code 400\") {\r\n      return null;\r\n    } else {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// GET\r\n/// POST\r\nexport async function apiPOST(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.post(apiName, path, myInit);\r\n    console.log(\"POST result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"POST ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// PUT\r\n\r\nexport async function apiPUT(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.put(apiName, path, myInit);\r\n    console.log(\"PUT result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"PUT ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink\r\n} from \"reactstrap\";\r\n\r\nimport LoaderButton from \"../../components/LoaderButton/LoaderButton\";\r\nimport { apiGET } from \"../../Common/Api/apiHelper\";\r\n\r\nexport default function DynamicForm(props) {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    doneBuildingModel: false,\r\n    dependencies: {},\r\n    formModel: {}\r\n  });\r\n  const [visiblePage, setVisiblePage] = useState(0);\r\n  const [maxPages, setMaxPages] = useState(0);\r\n\r\n  // const [validationSuccess, setValidationSuccess] = useState(false);\r\n  const [minPage, setMinPage] = useState(0); //eslint-disable-line\r\n\r\n  const file = useRef(null); // useRef will not trigger component rerender on change\r\n\r\n  var validationRules = [{}];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await onLoad();\r\n    };\r\n    fetchData();\r\n  }, []); //eslint-disable-line\r\n\r\n  // When the component loads, update state with any pre-filled values\r\n  const onLoad = () => {\r\n    // console.log(\"ON LOAD TRIGGERED\");\r\n    let model = props.model;\r\n    var stateTemp = { ...state };\r\n    console.log(\"JMD-\");\r\n\r\n    setVisiblePage(props.visiblePage ? props.visiblePage : 0);\r\n    setMaxPages(props.maxPages ? props.maxPages : 1);\r\n\r\n    stateTemp.formModel = model;\r\n\r\n    // console.log(\"DUMP: \", stateTemp.formModel);\r\n    stateTemp.doneBuildingModel = true;\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const performValidation = () => {\r\n    var success = true;\r\n    // console.log(\"validating...\");\r\n    try {\r\n      // console.log(\"validationRules\");\r\n      // console.log(validationRules);\r\n      // console.log(\"state\");\r\n      // console.log(state);\r\n      Object.keys(state.formModel).map(function(key) {\r\n        console.log(validationRules[key].required);\r\n\r\n        // TODO trigger validation message useful tot he specific field\r\n        if (validationRules[key].required && state.formModel[key].length <= 0) {\r\n          success = false;\r\n        }\r\n\r\n        if (state.formModel[key].length > 0) {\r\n          if (state.formModel[key].length < validationRules[key].length) {\r\n            success = false;\r\n          }\r\n        }\r\n      });\r\n\r\n      // validationRules.map((i, c) => {\r\n      //   console.log(i);\r\n      //   console.log(validationRules[i]);\r\n      //   if (validationRules[c][\"rules\"][\"required\"]) {\r\n      //     if (state[validationRules[c].field].length === 0) {\r\n      //       setValidationSuccess(false);\r\n      //     }\r\n      //   }\r\n      // });\r\n    } catch (e) {}\r\n    return success;\r\n  };\r\n\r\n  const setValidationRules = async model => {\r\n    // model.map((i, c) => {\r\n    //   console.log(Object.keys(model[c].validation));\r\n    //   console.log(Object.values(model[c].validation));\r\n    // });\r\n\r\n    model.map((i, c) => {\r\n      var key = model[c].key;\r\n      var x = {\r\n        //field: key,\r\n      };\r\n      validationRules[key] = {\r\n        ...model[c].validation\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    console.log(\"submitted\");\r\n    event.preventDefault();\r\n\r\n    let model = state.formModel;\r\n    let formValues = {};\r\n\r\n    model.map(m => {\r\n      if (m.options) {\r\n        formValues[m.key] = m.value || Object.keys(m.options)[0].toString();\r\n      } else {\r\n        formValues[m.key] = m.value || \"\";\r\n      }\r\n    });\r\n\r\n    if (performValidation()) {\r\n      setState({ ...state, isLoading: true });\r\n      if (props.onSubmit) props.onSubmit(formValues);\r\n      setState({ ...state, isLoading: false });\r\n      console.log(\"Validation Success\");\r\n    } else {\r\n      alert(\"Validation Failed\");\r\n    }\r\n  };\r\n\r\n  const updateMultiFieldValue = (guid, newValue, selected) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) {\r\n      var vals = [];\r\n      if (stateTemp.formModel[index][\"value\"] === \"\")\r\n        stateTemp.formModel[index][\"value\"] = vals;\r\n\r\n      vals = stateTemp.formModel[index][\"value\"];\r\n      if (selected) vals.push(newValue);\r\n      else vals = vals.filter(x => x !== newValue);\r\n\r\n      stateTemp.formModel[index][\"value\"] = vals;\r\n    } else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  const updateFieldValue = (guid, newValue) => {\r\n    var stateTemp = { ...state };\r\n\r\n    var index = stateTemp.formModel.findIndex(object => {\r\n      return object.key === guid;\r\n    });\r\n\r\n    if (index > -1) stateTemp.formModel[index][\"value\"] = newValue;\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    setState({ ...stateTemp });\r\n  };\r\n\r\n  function findFieldByKey(keyval) {\r\n    let index = state.formModel.findIndex(object => {\r\n      return object.key === keyval;\r\n    });\r\n\r\n    if (index > -1) return state.formModel[index];\r\n    else console.log(\"findFieldByKey() failed to find index\");\r\n    return null;\r\n  }\r\n\r\n  // Update local state, call parent onChange if any.\r\n  //TODO: CHANGE ALL TO USE ON CHANGE\r\n  const onChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onRadioChange = e => {\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    updateFieldValue(inputField, desiredValue);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const onCheckboxChange = e => {\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n\r\n    var inputField = e.target.name;\r\n    var desiredValue = e.target.value;\r\n    var wasChecked = e.target.checked;\r\n    updateMultiFieldValue(inputField, desiredValue, wasChecked);\r\n\r\n    var fieldObject = findFieldByKey(inputField);\r\n    if (fieldObject.onChange) {\r\n      fieldObject.onChange(e, state);\r\n    }\r\n  };\r\n\r\n  const getPresignedUrl = async fileName => {\r\n    return apiGET(\r\n      `/files/presignedurl?fileName=${fileName}&assessment=${props.assessmentId}`\r\n    );\r\n  };\r\n\r\n  // Upload the file to S3\r\n  /// Validate the file input (file type, size etc...)\r\n  /// GET the presigned url\r\n  /// PUT the file using the presigned url\r\n  const onFileChange = async e => {\r\n    setState({ ...state, isLoading: true });\r\n    // console.log(\"e.target\");\r\n    // console.log(e.target);\r\n    // console.log(e.target.attributes[\"order\"].value);\r\n    file.current = e.target.files[0];\r\n    var fileName = e.target.attributes[\"order\"].value;\r\n    var fileExt = file.current.name.split(\".\").pop();\r\n    var fieldId = e.target.id;\r\n\r\n    // basic file validation to make sure it works.\r\n    var maxFileSize = 5000000;\r\n    // basic file size validation:\r\n    if (file.current && file.current.size > maxFileSize) {\r\n      alert(`Please pick a file smaller than ${maxFileSize / 1000000} MB.`);\r\n      return;\r\n    }\r\n\r\n    // Get a presigned url.\r\n    //console.log(\"Getting presigned url\");\r\n    var presignedUrl = await getPresignedUrl(`${fileName}.${fileExt}`);\r\n    //console.log(presignedUrl);\r\n\r\n    // upload the file.\r\n    try {\r\n      var fileTest = await fetch(presignedUrl[\"body\"], {\r\n        method: \"PUT\",\r\n        body: file.current,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n      }).then(response => response.json());\r\n\r\n      // console.log(\"fileTest\");\r\n      // console.log(fileTest);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n        //toggleApiError502(true);\r\n      } else {\r\n        console.log(e);\r\n        //props.onLogout();\r\n      }\r\n    }\r\n\r\n    var stateTemp = { ...state };\r\n\r\n    updateFieldValue(fieldId, file.current.name);\r\n    //stateTemp.formModel[fieldId] = file.current.name;\r\n\r\n    setState({ ...stateTemp });\r\n\r\n    if (props.onSubmit) props.onSubmit(stateTemp);\r\n    setState({ ...state, isLoading: false });\r\n  };\r\n\r\n  const setDependencyRules = model => {\r\n    var stateTemp = { ...state };\r\n\r\n    model.map((m, c) => {\r\n      if (m.dependencies.length > 0) {\r\n        stateTemp[\"dependencies\"][m.key] = m.dependencies;\r\n      }\r\n    });\r\n  };\r\n\r\n  /// TODO: Implement hide/show dependent questions.\r\n  const hideField = () => {};\r\n\r\n  const showField = () => {};\r\n\r\n  /// Pagination functions\r\n\r\n  // Go to the next page\r\n  // Make sure that the next page exists before setting it.\r\n  const nextPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n    // apparently ! for 'not' doesn't work in react ¯\\_(ツ)_/¯\r\n    if (visiblePage + 2 > maxPages) {\r\n      console.log(\r\n        `${visiblePage + 2} is greater than the max pages ${maxPages}`\r\n      );\r\n    } else {\r\n      setVisiblePage(visiblePage + 1);\r\n    }\r\n  };\r\n\r\n  // Go to the previous page.\r\n  // Make sure that the previous page exists before setting it.\r\n  const prevPage = e => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    if (visiblePage - 1 < minPage) {\r\n      console.log(`${visiblePage - 1} is less than the min pages ${minPage}`);\r\n    } else {\r\n      setVisiblePage(visiblePage - 1);\r\n    }\r\n  };\r\n\r\n  // Go to a specific page\r\n  // Make sure that the page exists before setting it.\r\n  const setPage = (e, i) => {\r\n    e.preventDefault(); // Stop the form from submitting and triggering validation for now\r\n\r\n    // console.log(\"setting the page\");\r\n    // console.log(`page: ${i}, min: ${minPage}, max:${maxPages}`);\r\n    if (i + 1 >= minPage && i + 1 <= maxPages) {\r\n      setVisiblePage(i);\r\n    } else {\r\n      console.log(`${i} is out of bounds.`);\r\n    }\r\n  };\r\n\r\n  /// Field render functions\r\n  const renderStatic = fieldValue => {\r\n    // console.log(\"Rendering Static\");\r\n    return <p className=\"form-control-static\">{fieldValue}</p>;\r\n  };\r\n\r\n  const renderCheckbox = (options, key, fieldValue = -1) => {\r\n    // console.log(\"Rendering Checkbox\");\r\n    var selectedValues = [];\r\n    var index = state.formModel.findIndex(object => {\r\n      return object.key === key;\r\n    });\r\n\r\n    if (index > -1) selectedValues = state.formModel[index][\"value\"];\r\n    else console.log(\"Failed to find index in model\");\r\n\r\n    return (\r\n      <span>\r\n        {Object.keys(options).map((keyName, i) => (\r\n          <FormGroup check className=\"checkbox\" key={`${i}checkboxformgroup`}>\r\n            <Input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id={`${key}_${keyName}`}\r\n              name={key}\r\n              value={keyName}\r\n              parent={key}\r\n              onChange={e => {\r\n                onCheckboxChange(e);\r\n              }}\r\n              checked={selectedValues.includes(keyName)}\r\n            />\r\n            <Label\r\n              check\r\n              className=\"form-check-label\"\r\n              htmlFor={`${key}_${keyName}`}\r\n            >\r\n              {options[keyName]}\r\n            </Label>\r\n          </FormGroup>\r\n        ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getInput = (isChecked, key, keyName) => {\r\n    if (isChecked === true)\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n          checked={true}\r\n        />\r\n      );\r\n    else\r\n      return (\r\n        <Input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          id={`${key}_${keyName}`}\r\n          questionId={key}\r\n          name={key}\r\n          value={keyName}\r\n          parent={key}\r\n          onChange={e => {\r\n            onRadioChange(e);\r\n          }}\r\n        />\r\n      );\r\n  };\r\n\r\n  const renderRadio = (options, key, q_ref, fieldValue = -1) => {\r\n    //console.log(\"Rendering Radio\");\r\n    // console.log(options);\r\n    // console.log(key);\r\n    //console.log(fieldValue);\r\n    return (\r\n      <span>\r\n        {Object.keys(options)\r\n          .sort((a, b) => a < b)\r\n          .map((keyName, i) => (\r\n            <FormGroup key={`${i}radioformgroup`} check className=\"radio\">\r\n              {getInput(keyName === fieldValue, key, keyName)}\r\n              <Label\r\n                check\r\n                className=\"form-check-label\"\r\n                htmlFor={`${key}_${keyName}`}\r\n              >\r\n                {options[keyName]}\r\n              </Label>\r\n            </FormGroup>\r\n          ))}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderSelect = (options, key, fieldValue) => {\r\n    // console.log(\"Rendering Select\");\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type=\"select\"\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        >\r\n          {Object.keys(options).map((keyName, i) => (\r\n            <option\r\n              key={`${i}selectOption`}\r\n              value={keyName}\r\n              selected={options[keyName] === fieldValue ? \"selected\" : \"\"}\r\n            >\r\n              {options[keyName]}\r\n            </option>\r\n          ))}\r\n        </Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderInput = (type, key, fieldValue) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    return (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          defaultValue={fieldValue}\r\n          onChange={e => {\r\n            onChange(e);\r\n          }}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFileInput = (type, key, fieldValue, fieldOrder) => {\r\n    // console.log(`Rendering Input ${type}`);\r\n    // console.log(state.dependencies[\"key\"]);\r\n    // console.log(\"fieldValueFile\");\r\n    // console.log(fieldValue);\r\n\r\n    var hasValue = fieldValue !== \"\";\r\n    return hasValue === true ? (\r\n      renderStatic(fieldValue)\r\n    ) : (\r\n      <div>\r\n        <Input\r\n          {...props}\r\n          type={type}\r\n          id={key}\r\n          name={key}\r\n          key={`${key}input`}\r\n          onChange={e => {\r\n            onFileChange(e);\r\n          }}\r\n          order={fieldOrder}\r\n          data-order={fieldOrder}\r\n          required\r\n          className=\"form-control\"\r\n        ></Input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Assuming for now there will always be at least one page.\r\n  const renderPagination = maxPages => {\r\n    return (\r\n      <Pagination listClassName=\"justify-content-center\">\r\n        <PaginationItem disabled={visiblePage === 0}>\r\n          <PaginationLink previous onClick={e => prevPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n        {[...Array(maxPages)].map((page, i) => (\r\n          <PaginationItem active={i === visiblePage} key={i}>\r\n            <PaginationLink onClick={e => setPage(e, i)} href=\"#\">\r\n              {i + 1}\r\n            </PaginationLink>\r\n          </PaginationItem>\r\n        ))}\r\n        <PaginationItem disabled={visiblePage + 1 === maxPages}>\r\n          <PaginationLink next onClick={e => nextPage(e)} href=\"#\" />\r\n        </PaginationItem>\r\n      </Pagination>\r\n    );\r\n  };\r\n\r\n  const renderTest = model => {\r\n    try {\r\n      return (\r\n        <>\r\n          {/* {model.map((mod, i) => {\r\n            return ( */}\r\n          {Object.keys(model[visiblePage]).map((keyName, i) => (\r\n            <>\r\n              <h3>{keyName}</h3>\r\n              <p></p>\r\n              {/* <p> {JSON.stringify(mod[keyName])}</p> */}\r\n              <div>\r\n                {model[visiblePage][keyName]\r\n                  .sort((a, b) => a.order > b.order)\r\n                  .map(m => {\r\n                    let key = m.key;\r\n                    let type = m.type || \"text\";\r\n                    let props = m.props || {};\r\n                    let placeholder = m.placeholder || \"\";\r\n                    let fieldValue = m.value || \"\";\r\n                    let options = m.options || {};\r\n                    let questionRef = m.question_ref;\r\n\r\n                    setValidationRules(model[visiblePage][keyName]);\r\n                    setDependencyRules(model[visiblePage][keyName]);\r\n\r\n                    return (\r\n                      <FormGroup row key={`${key}label`}>\r\n                        <Col md=\"3\">\r\n                          <Label htmlFor={key}>\r\n                            {m.order} - {m.label}\r\n                          </Label>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"9\">\r\n                          {(() => {\r\n                            switch (type) {\r\n                              case \"select\":\r\n                                return renderSelect(options, key, fieldValue);\r\n                              case \"radio\":\r\n                                return renderRadio(\r\n                                  options,\r\n                                  key,\r\n                                  questionRef,\r\n                                  fieldValue\r\n                                );\r\n                              case \"checkbox\":\r\n                                return renderCheckbox(options, key, fieldValue);\r\n                              case \"text\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"textarea\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"date\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"tel\":\r\n                                return renderInput(type, key, fieldValue);\r\n                              case \"file\":\r\n                                return renderFileInput(\r\n                                  type,\r\n                                  key,\r\n                                  fieldValue,\r\n                                  m.order\r\n                                );\r\n                              default:\r\n                                return \"renderStatic(fieldValue)\";\r\n                            }\r\n                          })()}\r\n                        </Col>\r\n                      </FormGroup>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </>\r\n          ))}\r\n          {/* );\r\n           })} */}\r\n          {renderPagination(maxPages)}\r\n        </>\r\n      );\r\n    } catch (e) {\r\n      return <div>{e.message}</div>;\r\n    }\r\n  };\r\n\r\n  const renderForm = () => {\r\n    // console.log(\"Form model\");\r\n    // console.log(props.model);\r\n    let model = state.formModel;\r\n\r\n    if (props.pagination === true) {\r\n      let categories = [...new Set(model.map(m => m.category))]; // Distinct list of the question categories\r\n      var paginatedModel = categories.map(cat => {\r\n        var temp = {};\r\n        temp[cat] = model.filter(i => {\r\n          return i.category === cat;\r\n        });\r\n        return temp;\r\n      });\r\n\r\n      // console.log(\"y\");\r\n      // console.log(paginatedModel);\r\n      return renderTest(paginatedModel);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col md=\"12\">\r\n      <Card>\r\n        <Form\r\n          className=\"needs-validation\"\r\n          noValidate\r\n          onSubmit={e => {\r\n            handleSubmit(e);\r\n          }}\r\n          method=\"post\"\r\n        >\r\n          {(() => {\r\n            if (props.title) {\r\n              return (\r\n                <CardHeader>\r\n                  <strong>{props.title}</strong>\r\n                </CardHeader>\r\n              );\r\n            } else {\r\n            }\r\n          })()}\r\n          <CardBody>\r\n            {state.doneBuildingModel === true && renderForm()}\r\n          </CardBody>\r\n          <CardFooter>\r\n            <div></div>\r\n            <LoaderButton\r\n              size=\"sm\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              isLoading={state.isLoading}\r\n              className=\"mx-1\"\r\n              //   onClick={e => {\r\n              //     handleSubmit(e);\r\n              //   }}\r\n            >\r\n              Save\r\n            </LoaderButton>\r\n\r\n            {(() => {\r\n              if (props.cancelButton) {\r\n                return (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    color=\"link\"\r\n                    type=\"reset\"\r\n                    className=\"mx-1\"\r\n                    onClick={props.cancelButton}\r\n                  >\r\n                    {props.cancelButtonText}\r\n                  </Button>\r\n                );\r\n              } else {\r\n              }\r\n            })()}\r\n\r\n            {/* {props.maxPages ? renderPagination(state.maxPages) : \"\"} */}\r\n          </CardFooter>\r\n        </Form>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n"],"sourceRoot":""}