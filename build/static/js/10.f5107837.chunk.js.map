{"version":3,"sources":["views/Pages/RegisterVendor/RegisterVendor.js","components/LoaderButton/LoaderButton.js","Common/Api/apiHelper.js","components/loadingBlock/loadingBlock.js"],"names":["RegisterVendor","props","fields","setFields","useState","email","password","confirmPassword","confirmationCode","mfaVerificationCode","newUser","setNewUser","userConfirmed","setUserConfirmed","isLoading","setIsLoading","qrLink","setQRLink","mfaQrCode","setMFAQRCode","mfaSession","setMFASession","userGuid","setUserGuid","mfaFailedAlertVisible","setMFAFailedAlertVisible","jwtVald","setJWTValid","pageLoading","setPageLoading","vendorId","setVendorId","useEffect","onLoad","async","params","queryString","parse","location","search","jwt","url","concat","apiGET","decodedJWT","decode","fieldsTemp","VendorEmail","VendorId","console","log","handleSubmit","event","preventDefault","Auth","signUp","username","attributes","e","alert","message","handleFieldChange","stateTemp","target","id","value","handleConfirmationSubmit","confirmSignUp","then","data","x","signIn","body","session","Session","apiName","path","myInit","headers","result","API","post","JSON","stringify","validateMFA","SecretCode","catch","err","handleMFASubmit","code","totp","device","finaliseMFA","history","push","React","createElement","className","LoadingBlock","Container","Row","Col","md","lg","xl","Card","CardBody","Form","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","placeholder","autoComplete","onChange","LoaderButton","color","block","disabled","CardFooter","autoFocus","QRCode","Alert","_ref","Button","Object","assign","Spinner","size","children","apiPath","authenticated","arguments","length","undefined","config","apiGateway","NAME","Authorization","currentSession","getIdToken","getJwtToken","get","apiPOST"],"mappings":"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","file":"static/js/10.f5107837.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Row\r\n} from \"reactstrap\";\r\n\r\nimport LoaderButton from \"../../../components/LoaderButton/LoaderButton\";\r\n\r\nimport { Auth, API } from \"aws-amplify\";\r\n\r\nimport QRCode from \"qrcode.react\";\r\n\r\nimport \"./RegisterVendor.scss\";\r\nimport queryString from \"query-string\";\r\nimport LoadingBlock from \"../../../components/loadingBlock/loadingBlock\";\r\nimport { apiGET } from \"../../../Common/Api/apiHelper\";\r\n\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport default function RegisterVendor(props) {\r\n  const [fields, setFields] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    confirmationCode: \"\",\r\n    mfaVerificationCode: \"\"\r\n  });\r\n  const [newUser, setNewUser] = useState(null);\r\n  const [userConfirmed, setUserConfirmed] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [qrLink, setQRLink] = useState(\"\");\r\n  const [mfaQrCode, setMFAQRCode] = useState(\"\");\r\n  const [mfaSession, setMFASession] = useState(\"\");\r\n  const [userGuid, setUserGuid] = useState(\"\"); //eslint-disable-line\r\n  const [mfaFailedAlertVisible, setMFAFailedAlertVisible] = useState(false); //eslint-disable-line\r\n  const [jwtVald, setJWTValid] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true); // Render a loading block while we wait to verify the JWT\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    onLoad();\r\n  }, []); // eslint-disable-line\r\n\r\n  // Validate the JWT before we go any further and set up State\r\n  const onLoad = async () => {\r\n    let params = queryString.parse(props.location.search);\r\n\r\n    if (params.jwt) {\r\n      var url = `/jwtverify?jwt=${params.jwt}`;\r\n      var verifiedJWTResult = await apiGET(url, false);\r\n      if (verifiedJWTResult !== null) {\r\n        var decodedJWT = jwt.decode(params.jwt);\r\n\r\n        var fieldsTemp = { ...fields };\r\n        fieldsTemp.email = decodedJWT.VendorEmail;\r\n        setFields(fieldsTemp);\r\n\r\n        setVendorId(decodedJWT.VendorId);\r\n\r\n        setJWTValid(true); // Everything worked, display the registration form.\r\n      }\r\n    } else {\r\n      console.log(\"No JWT\");\r\n    }\r\n    setPageLoading(false);\r\n  };\r\n\r\n  // TODO: Use this\r\n  // function validateForm() {\r\n  //   return (\r\n  //     fields.email.length > 0 &&\r\n  //     fields.password.length > 0 &&\r\n  //     fields.password === fields.confirmPassword\r\n  //   );\r\n  // }\r\n\r\n  // function validateConfirmationForm() {\r\n  //   return fields.confirmationCode.length > 0;\r\n  // }\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const newUser = await Auth.signUp({\r\n        username: fields.email,\r\n        password: fields.password,\r\n        attributes: {\r\n          \"custom:Group\": \"Vendor\", // custom attribute, not standard\r\n          \"custom:VendorId\": vendorId // custom attribute, not standard\r\n        }\r\n      });\r\n      setIsLoading(false);\r\n      setNewUser(newUser);\r\n    } catch (e) {\r\n      alert(e.message);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  const handleFieldChange = event => {\r\n    var stateTemp = {\r\n      ...fields,\r\n      [event.target.id]: event.target.value\r\n    };\r\n\r\n    setFields(stateTemp);\r\n  };\r\n\r\n  /// #1 send the user session to validate MFA,\r\n  /// returns: MFA secret, MFA Session\r\n  const validateMFA = async () => {\r\n    var x = await Auth.signIn(fields.email, fields.password);\r\n    setUserGuid(x.username);\r\n    var body = {\r\n      session: x.Session\r\n    };\r\n\r\n    try {\r\n      let apiName = \"Fiji-Dev\";\r\n      let path = \"/signup/validate-mfa\";\r\n      let myInit = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body\r\n      };\r\n      var result = await API.post(apiName, path, myInit);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n      } else {\r\n        alert(JSON.stringify(e));\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /// #2 Finalise MFA using the TOTP and Session from #1\r\n  /// Returns: MFA Session (unused)\r\n  const finaliseMFA = async totp => {\r\n    var body = {\r\n      session: mfaSession,\r\n      code: totp,\r\n      device: \"\"\r\n    };\r\n\r\n    try {\r\n      let apiName = \"Fiji-Dev\";\r\n      let path = \"/signup/finalise-mfa\";\r\n      let myInit = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body\r\n      };\r\n      var result = await API.post(apiName, path, myInit);\r\n    } catch (e) {\r\n      // TODO: Gracefully handle failed MFA\r\n      if (e.message === \"Request failed with status code 502\") {\r\n      } else {\r\n        alert(JSON.stringify(e));\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Authenticate with the user creds and MFA.\r\n  // Doesn't work because the TOTP is single use.\r\n  // const authWithMFA = async mses => {\r\n  //   try {\r\n  //     var mfaAuthSession = await Auth.signIn(fields.email, fields.password);\r\n\r\n  //     var body = {\r\n  //       session: mfaAuthSession.Session,\r\n  //       client_id: config.cognito.APP_CLIENT_ID,\r\n  //       username: userGuid,\r\n  //       code: fields.mfaVerificationCode\r\n  //     };\r\n\r\n  //     let apiName = \"Fiji-Dev\";\r\n  //     let path = \"/mfavalidator\";\r\n  //     let myInit = {\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\"\r\n  //       },\r\n  //       body\r\n  //     };\r\n  //     var result = await API.post(apiName, path, myInit);\r\n  //   } catch (e) {\r\n  //     if (e.message === \"Request failed with status code 502\") {\r\n  //     } else {\r\n  //       alert(JSON.stringify(e));\r\n  //     }\r\n  //   }\r\n  //   return result;\r\n  // };\r\n\r\n  async function handleConfirmationSubmit(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    await Auth.confirmSignUp(fields.email, fields.confirmationCode).then(data =>\r\n      console.log(data)\r\n    );\r\n\r\n    try {\r\n      // Get secret from API\r\n      await validateMFA()\r\n        .then(data => {\r\n          setMFAQRCode(data.SecretCode);\r\n\r\n          setMFASession(data.Session);\r\n\r\n          setQRLink(\r\n            \"otpauth://totp/Fortian:\" +\r\n              fields.email +\r\n              \"?secret=\" +\r\n              data.SecretCode +\r\n              \"&issuer=FortianMSS\"\r\n          );\r\n        })\r\n        .catch(err => console.log(err));\r\n      setUserConfirmed(true);\r\n      setIsLoading(false);\r\n      //});\r\n    } catch (e) {\r\n      alert(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function handleMFASubmit(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    await finaliseMFA(fields.mfaVerificationCode);\r\n    //.then(data => {\r\n    //   try {\r\n    //     var newMFASession = \"\";\r\n    //     newMFASession = data.body.Session;\r\n    //   } catch (e) {\r\n    //     alert(\"Waiting for Reece to fix the Lambda :)\");\r\n    //     alert(JSON.stringify(e.message));\r\n    //   }\r\n    // });\r\n    // TODO: make this a bit more graceful. provide user feedback (success alert)\r\n    props.history.push(\"/login\");\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // function showMFAAlert() {\r\n  //   setMFAFailedAlertVisible(true);\r\n\r\n  //   setTimeout(() => {\r\n  //     setMFAFailedAlertVisible(false);\r\n  //   }, 5000);\r\n  // }\r\n\r\n  function renderInvalid() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <p>To register as a vendor, please contact Fortian.</p>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderQRCode() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleMFASubmit}>\r\n                    <h1>Enable MFA</h1>\r\n                    <p className=\"text-muted\">\r\n                      Enter the code from your email to confirm.\r\n                    </p>\r\n\r\n                    <QRCode value={qrLink} />\r\n                    <p>\r\n                      Scan the code above in your Authenticator app of choice.\r\n                    </p>\r\n                    <p>\r\n                      If you are unable to scan the image, enter the following\r\n                      information:\r\n                      <br />\r\n                      code: {mfaQrCode}\r\n                    </p>\r\n                    <p>\r\n                      Enter the value in the field below to verify the account.\r\n                    </p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>#</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"mfaVerificationCode\"\r\n                        type=\"tel\"\r\n                        placeholder=\"Verify MFA Code\"\r\n                        onChange={handleFieldChange}\r\n                        autoFocus\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      Verify Code\r\n                    </LoaderButton>\r\n                    <p>\r\n                      <Alert\r\n                        color=\"danger\"\r\n                        className={\r\n                          mfaFailedAlertVisible ? \"alert-shown\" : \"alert-hidden\"\r\n                        }\r\n                      >\r\n                        Failed to verify MFA code.\r\n                      </Alert>\r\n                    </p>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\"></CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderConfirmationForm() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleConfirmationSubmit}>\r\n                    <h1>Confirmation code</h1>\r\n                    <p className=\"text-muted\">\r\n                      Enter the code from your email to confirm.\r\n                    </p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>#</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"confirmationCode\"\r\n                        type=\"tel\"\r\n                        placeholder=\"Confirmation Code\"\r\n                        onChange={handleFieldChange}\r\n                        autoFocus\r\n                        value={fields.confirmationCode}\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      {\" \"}\r\n                      Create Account\r\n                    </LoaderButton>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\"></CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderForm() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n              <Card className=\"mx-4\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <h1>Register Vendor</h1>\r\n                    <p className=\"text-muted\">Create vendor account</p>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>@</InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Email\"\r\n                        autoComplete=\"email\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.email}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        autoComplete=\"new-password\"\r\n                        onChange={handleFieldChange}\r\n                      />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-4\">\r\n                      <InputGroupAddon addonType=\"prepend\">\r\n                        <InputGroupText>\r\n                          <i className=\"icon-lock\"></i>\r\n                        </InputGroupText>\r\n                      </InputGroupAddon>\r\n                      <Input\r\n                        id=\"confirmPassword\"\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm password\"\r\n                        autoComplete=\"new-password\"\r\n                        onChange={handleFieldChange}\r\n                      />\r\n                    </InputGroup>\r\n                    <LoaderButton\r\n                      color=\"success\"\r\n                      block\r\n                      isLoading={isLoading}\r\n                      disabled={isLoading}\r\n                    >\r\n                      {\" \"}\r\n                      Create Account\r\n                    </LoaderButton>\r\n                  </Form>\r\n                </CardBody>\r\n                <CardFooter className=\"p-4\">\r\n                  {/* <Row>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                      <Button className=\"btn-facebook mb-1\" block>\r\n                        <span>facebook</span>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                      <Button className=\"btn-twitter mb-1\" block>\r\n                        <span>twitter</span>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row> */}\r\n                </CardFooter>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Register\">\r\n      {pageLoading ? (\r\n        <LoadingBlock />\r\n      ) : !jwtVald ? (\r\n        renderInvalid()\r\n      ) : newUser === null ? (\r\n        renderForm()\r\n      ) : userConfirmed === false ? (\r\n        renderConfirmationForm()\r\n      ) : (\r\n        renderQRCode()\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Spinner } from \"reactstrap\";\r\nimport \"./LoaderButton.css\";\r\n\r\nexport default function LoaderButton({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Button\r\n      className={`LoaderButton ${className}`}\r\n      disabled={disabled || isLoading}\r\n      {...props}>\r\n      {isLoading && <Spinner size='sm' color='light' />}\r\n      {props.children}\r\n    </Button>\r\n  );\r\n}\r\n","import { Auth, API } from \"aws-amplify\";\r\n\r\nimport config from \"../../config\";\r\n\r\nexport async function apiGET(apiPath, authenticated = true) {\r\n  try {\r\n    console.log(\"Test Getting\");\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = authenticated\r\n      ? {\r\n          headers: {\r\n            Authorization: `Bearer ${(await Auth.currentSession())\r\n              .getIdToken()\r\n              .getJwtToken()}`\r\n          }\r\n        }\r\n      : \"\";\r\n    var result = await API.get(apiName, path, myInit);\r\n    console.log(\"GET result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else if (e.message === \"Request failed with status code 400\") {\r\n      return null;\r\n    } else {\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// GET\r\n/// POST\r\nexport async function apiPOST(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.post(apiName, path, myInit);\r\n    console.log(\"POST result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"POST ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/// PUT\r\n\r\nexport async function apiPUT(apiPath, body) {\r\n  try {\r\n    delete body.isLoading;\r\n    let apiName = config.apiGateway.NAME;\r\n    let path = apiPath;\r\n    let myInit = {\r\n      headers: {\r\n        Authorization: `Bearer ${(await Auth.currentSession())\r\n          .getIdToken()\r\n          .getJwtToken()}`\r\n      },\r\n      body\r\n    };\r\n    var result = await API.put(apiName, path, myInit);\r\n    console.log(\"PUT result\");\r\n    console.log(result);\r\n  } catch (e) {\r\n    if (e.message === \"Request failed with status code 502\") {\r\n    } else {\r\n      console.log(\"PUT ERROR\");\r\n      console.log(e);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","import React from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport \"./loadingBlock.scss\";\r\n\r\nexport default function LoadingBlock({\r\n  isLoading,\r\n  className = \"\",\r\n  disabled = false,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className=\"animated fadeIn pt-3 pb-3 text-center\">\r\n      <Spinner\r\n        size={props.size ? props.size : \"sm\"}\r\n        color={props.color ? props.color : \"dark\"}\r\n        type={props.type ? props.type : \"grow\"}\r\n      />{\" \"}\r\n      Loading...\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}