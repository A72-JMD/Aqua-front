{"version":3,"sources":["views/Vendor/VendorDashboardContent.js","views/Vendor/VendorDashboard.js"],"names":["VendorDashboardContent","props","vendorAssessments","setVendorAssessments","useState","pageReady","setPageReady","statusMap","in_progress","not_started","useEffect","onLoad","async","getData","then","data","body","catch","error","console","apiName","path","myInit","headers","Authorization","concat","Auth","currentSession","getIdToken","getJwtToken","result","API","get","e","message","log","handleClick","target","name","setCurrentAssessment","id","setCurrentAssessmentCustomer","setViewForm","React","createElement","CardBody","map","i","c","Row","key","Button","size","color","type","onClick","assessment_id","customer","status","LoadingBlock","VendorDashboard","pageTitle","setPageTitle","viewForm","currentAssessment","currentAssessmentCustomer","userDetails","userGroups","includes","history","push","customerName","clearTitle","className","Col","xs","Card","CardHeader","VendorAssessmentForm","Object","assign","backClick"],"mappings":"0RAyFeA,MApFf,SAAgCC,GAC9B,MAAOC,EAAmBC,GAAwBC,mBAAS,KACpDC,EAAWC,GAAgBF,oBAAS,GAErCG,EAAY,CAChBC,YAAa,cACbC,YAAa,eAGfC,oBAAU,KACRC,KACC,IAEH,MAAMA,EAASC,UACbN,GAAa,SACPO,IACHC,KAAKC,IAGJZ,EAAqBY,EAAKC,MAC1BV,GAAa,KAEdW,MAAMC,IACLC,QAAQD,MAAMA,MAKdL,EAAUD,UACd,IACE,IAAIQ,EAAU,WACVC,EAAO,oBACPC,EAAS,CACXC,QAAS,CACPC,cAAc,UAADC,cAAmBC,IAAKC,kBAClCC,aACAC,iBAGP,IAAIC,QAAeC,IAAIC,IAAIZ,EAASC,EAAMC,GAC1C,MAAOW,GACW,wCAAdA,EAAEC,SAGJf,QAAQgB,IAAIF,GAIhB,OAAOH,GAGHM,EAAcH,IAClBd,QAAQgB,IAAIF,EAAEI,OAAOC,MACrBrC,EAAMsC,qBAAqBN,EAAEI,OAAOG,IACpCvC,EAAMwC,6BAA6BR,EAAEI,OAAOC,MAC5CrC,EAAMyC,YAAYT,EAAEI,OAAOC,OAG7B,OACEK,IAAAC,cAACC,IAAQ,KACNxC,EACCH,EAAkB4C,IAAI,CAACC,EAAGC,IACxBL,IAAAC,cAACK,IAAG,CAACC,IAAKF,GACRL,IAAAC,cAAA,WACED,IAAAC,cAACO,IAAM,CACLC,KAAK,KACLC,MAAM,OACNC,KAAK,QACLC,QAASnB,EACTI,GAAIO,EAAES,cACNlB,KAAMS,EAAEU,UAAS,GAAAhC,OAEbsB,EAAEU,SAAQ,OAAAhC,OAAMlB,EAAUwC,EAAEW,aAMxCf,IAAAC,cAACe,IAAY,QCPNC,UAtEf,SAAyB3D,GACvB,MAAO4D,EAAWC,GAAgB1D,mBAAS,qBAEpC2D,EAAUrB,GAAetC,oBAAS,IAClC4D,EAAmBzB,GAAwBnC,mBAAS,KACpD6D,EAA2BxB,GAAgCrC,mBAChE,IAEFM,oBAAU,KACRC,KACC,IAEH,MAAMA,EAASC,UAETX,EAAMiE,YAAYC,WAAWC,SAAS,WAExCnE,EAAMoE,QAAQC,KAAK,SAIjBlC,EAAemC,IACnB7B,GAAaqB,GACbD,EAAa,uBAADrC,OAAwB8C,KAGhCC,EAAaA,KACjB9B,GAAY,GACZoB,EAAa,qBAGf,OACEnB,IAAAC,cAAA,OAAK6B,UAAU,mBACb9B,IAAAC,cAACK,IAAG,KACFN,IAAAC,cAAC8B,IAAG,CAACC,GAAG,MACNhC,IAAAC,cAACgC,IAAI,KACHjC,IAAAC,cAACiC,IAAU,KACTlC,IAAAC,cAAA,UAAKiB,IAIDE,EAEApB,IAAAC,cAACkC,UAAoBC,OAAAC,OAAA,GACf/E,EAAK,CACT+D,kBAAmBA,EACnBC,0BAA2BA,EAC3BgB,UAAWT,KAKb7B,IAAAC,cAAC5C,EAAsB+E,OAAAC,OAAA,GACjB/E,EAAK,CACTyC,YAAaN,EACb2B,SAAUA,EACVxB,qBAAsBA,EACtBE,6BAA8BA","file":"static/js/41.5a606451.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport { Button, CardBody, Row } from \"reactstrap\";\r\nimport LoadingBlock from \"../../components/loadingBlock/loadingBlock\";\r\n\r\nfunction VendorDashboardContent(props) {\r\n  const [vendorAssessments, setVendorAssessments] = useState([]);\r\n  const [pageReady, setPageReady] = useState(false);\r\n\r\n  const statusMap = {\r\n    in_progress: \"In progress\",\r\n    not_started: \"Not started\"\r\n  };\r\n\r\n  useEffect(() => {\r\n    onLoad();\r\n  }, []); //eslint-disable-line\r\n\r\n  const onLoad = async () => {\r\n    setPageReady(false);\r\n    await getData()\r\n      .then(data => {\r\n        // console.log(\"data.body\");\r\n        // console.log(data.body);\r\n        setVendorAssessments(data.body);\r\n        setPageReady(true);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  // Pull out into a generic reusable function\r\n  const getData = async () => {\r\n    try {\r\n      let apiName = \"Fiji-Dev\";\r\n      let path = \"/assessments/list\";\r\n      let myInit = {\r\n        headers: {\r\n          Authorization: `Bearer ${(await Auth.currentSession())\r\n            .getIdToken()\r\n            .getJwtToken()}`\r\n        }\r\n      };\r\n      var result = await API.get(apiName, path, myInit);\r\n    } catch (e) {\r\n      if (e.message === \"Request failed with status code 502\") {\r\n        //toggleApiError502(true);\r\n      } else {\r\n        console.log(e);\r\n        //props.onLogout();\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const handleClick = e => {\r\n    console.log(e.target.name);\r\n    props.setCurrentAssessment(e.target.id);\r\n    props.setCurrentAssessmentCustomer(e.target.name);\r\n    props.setViewForm(e.target.name);\r\n  };\r\n\r\n  return (\r\n    <CardBody>\r\n      {pageReady ? (\r\n        vendorAssessments.map((i, c) => (\r\n          <Row key={c}>\r\n            <div>\r\n              <Button\r\n                size=\"sm\"\r\n                color=\"link\"\r\n                type=\"reset\"\r\n                onClick={handleClick}\r\n                id={i.assessment_id}\r\n                name={i.customer}\r\n              >\r\n                {`${i.customer} - ${statusMap[i.status]}`}\r\n              </Button>\r\n            </div>\r\n          </Row>\r\n        ))\r\n      ) : (\r\n        <LoadingBlock />\r\n      )}\r\n    </CardBody>\r\n  );\r\n}\r\n\r\nexport default VendorDashboardContent;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import DynamicForm from \"../../components/DynamicForm/DynamicForm\";\r\nimport { Card, CardHeader, Col, Row } from \"reactstrap\";\r\nimport VendorAssessmentForm from \"../BackofficeArea/VendorAssessmentForm\";\r\nimport VendorDashboardContent from \"./VendorDashboardContent\";\r\n\r\nfunction VendorDashboard(props) {\r\n  const [pageTitle, setPageTitle] = useState(\"Vendor Dashboard\");\r\n  // const [formModel, setForm] = useState([]);\r\n  const [viewForm, setViewForm] = useState(false);\r\n  const [currentAssessment, setCurrentAssessment] = useState(\"\");\r\n  const [currentAssessmentCustomer, setCurrentAssessmentCustomer] = useState(\r\n    \"\"\r\n  );\r\n  useEffect(() => {\r\n    onLoad();\r\n  }, []); //eslint-disable-line\r\n\r\n  const onLoad = async () => {\r\n    // Only vendors are allowed here\r\n    if (props.userDetails.userGroups.includes(\"Vendor\")) {\r\n    } else {\r\n      props.history.push(\"/401\");\r\n    }\r\n  };\r\n\r\n  const handleClick = (customerName) => {\r\n    setViewForm(!viewForm);\r\n    setPageTitle(`Vendor Assessment - ${customerName}`);\r\n  };\r\n\r\n  const clearTitle = () => {\r\n    setViewForm(false);\r\n    setPageTitle(\"Vendor Dashboard\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\">\r\n      <Row>\r\n        <Col xs=\"12\">\r\n          <Card>\r\n            <CardHeader>\r\n              <h2>{pageTitle}</h2>\r\n            </CardHeader>\r\n\r\n            {(() => {\r\n              if (viewForm) {\r\n                return (\r\n                  <VendorAssessmentForm\r\n                    {...props}\r\n                    currentAssessment={currentAssessment}\r\n                    currentAssessmentCustomer={currentAssessmentCustomer}\r\n                    backClick={clearTitle}\r\n                  ></VendorAssessmentForm>\r\n                );\r\n              } else {\r\n                return (\r\n                  <VendorDashboardContent\r\n                    {...props}\r\n                    setViewForm={handleClick}\r\n                    viewForm={viewForm}\r\n                    setCurrentAssessment={setCurrentAssessment}\r\n                    setCurrentAssessmentCustomer={setCurrentAssessmentCustomer}\r\n                  />\r\n                );\r\n              }\r\n            })()}\r\n\r\n            {/* <CardFooter></CardFooter> */}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VendorDashboard;\r\n"],"sourceRoot":""}