{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { Credentials } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport * as Rekognition from 'aws-sdk/clients/rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport * as Textract from 'aws-sdk/clients/textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Rekognition.Image>} - Promise resolving to the converted source object.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: parsedURL[2]\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: buffer\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: buffer\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n        // everything else can be directly passed to Rekognition / Textract.\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, format, featureTypes, textractParam_1, rekognitionParam, param;\n        var _this = this;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              this.textract = new Textract({\n                region: region,\n                credentials: credentials\n              });\n              return [4 /*yield*/, this.configureSource(input.text.source).then(function (data) {\n                return inputDocument = data;\n              }).catch(function (err) {\n                rej(err);\n              })];\n            case 2:\n              _f.sent();\n              format = input.text.format || configFormat;\n              featureTypes = [];\n              if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n              if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n              if (featureTypes.length === 0) {\n                textractParam_1 = {\n                  Document: inputDocument\n                };\n                rekognitionParam = {\n                  Image: inputDocument\n                };\n                this.rekognition.detectText(rekognitionParam, function (rekognitionErr, rekognitionData) {\n                  if (rekognitionErr) return rej(rekognitionErr);\n                  var rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                  if (rekognitionResponse.text.words.length < 50) {\n                    // did not hit the word limit, return the data\n                    return res(rekognitionResponse);\n                  }\n                  _this.textract.detectDocumentText(textractParam_1, function (textractErr, textractData) {\n                    if (textractErr) return rej(textractErr);\n                    // use the service that identified more texts.\n                    if (rekognitionData.TextDetections.length > textractData.Blocks.length) {\n                      return res(rekognitionResponse);\n                    } else {\n                      return res(categorizeTextractBlocks(textractData.Blocks));\n                    }\n                  });\n                });\n              } else {\n                param = {\n                  Document: inputDocument,\n                  FeatureTypes: featureTypes\n                };\n                this.textract.analyzeDocument(param, function (err, data) {\n                  if (err) return rej(err);\n                  var blocks = data.Blocks;\n                  res(categorizeTextractBlocks(blocks));\n                });\n              }\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, type, inputImage, param, servicePromises, entityType;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4 /*yield*/, this.configureSource(input.labels.source).then(function (data) {\n                inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n            case 2:\n              _f.sent();\n              param = {\n                Image: inputImage\n              };\n              servicePromises = [];\n              entityType = input.labels.type || type;\n              if (entityType === 'LABELS' || entityType === 'ALL') {\n                servicePromises.push(this.detectLabels(param));\n              }\n              if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                servicePromises.push(this.detectModerationLabels(param));\n              }\n              // if (servicePromises.length === 0) {\n              //     rej('You must specify entity type: LABELS | UNSAFE | ALL');\n              // }\n              Promise.all(servicePromises).then(function (data) {\n                var identifyResult = {};\n                // concatenate resolved promises to a single object\n                data.forEach(function (val) {\n                  identifyResult = __assign(__assign({}, identifyResult), val);\n                });\n                res(identifyResult);\n              }).catch(function (err) {\n                return rej(err);\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectLabels(param, function (err, data) {\n        if (err) return rej(err);\n        if (!data.Labels) return res({\n          labels: null\n        }); // no image was detected\n        var detectLabelData = data.Labels.map(function (val) {\n          var boxes = val.Instances ? val.Instances.map(function (val) {\n            return makeCamelCase(val.BoundingBox);\n          }) : undefined;\n          return {\n            name: val.Name,\n            boundingBoxes: boxes,\n            metadata: {\n              confidence: val.Confidence,\n              parents: makeCamelCaseArray(val.Parents)\n            }\n          };\n        });\n        return res({\n          labels: detectLabelData\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectModerationLabels(param, function (err, data) {\n        if (err) return rej(err);\n        if (data.ModerationLabels.length !== 0) {\n          return res({\n            unsafe: 'YES'\n          });\n        } else {\n          return res({\n            unsafe: 'NO'\n          });\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, _j, _k, collectionId, _l, maxFaces, updatedParam;\n        var _this = this;\n        return __generator(this, function (_m) {\n          switch (_m.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _m.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n              // default arguments\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4 /*yield*/, this.configureSource(input.entities.source).then(function (data) {\n                return inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n            case 2:\n              _m.sent();\n              param = {\n                Image: inputImage\n              };\n              if (isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection) {\n                if (!celebrityDetectionEnabled) {\n                  return [2 /*return*/, rej('Error: You have to enable celebrity detection first')];\n                }\n                this.rekognition.recognizeCelebrities(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.CelebrityFaces.map(function (celebrity) {\n                    return {\n                      boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                      landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                      metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                        pose: makeCamelCase(celebrity.Face.Pose)\n                      })\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else if (isIdentifyFromCollection(input.entities) && input.entities.collection) {\n                _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                updatedParam = __assign(__assign({}, param), {\n                  CollectionId: collectionId,\n                  MaxFaces: maxFaces\n                });\n                this.rekognition.searchFacesByImage(updatedParam, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceMatches.map(function (val) {\n                    return {\n                      boundingBox: makeCamelCase(val.Face.BoundingBox),\n                      metadata: {\n                        externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                        similarity: val.Similarity\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else {\n                this.rekognition.detectFaces(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceDetails.map(function (detail) {\n                    // face attributes keys we want to extract from Rekognition's response\n                    var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n                    var faceAttributes = makeCamelCase(detail, attributeKeys);\n                    if (detail.Emotions) {\n                      faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                        return emotion.Type;\n                      });\n                    }\n                    return {\n                      boundingBox: makeCamelCase(detail.BoundingBox),\n                      landmarks: makeCamelCaseArray(detail.Landmarks),\n                      ageRange: makeCamelCase(detail.AgeRange),\n                      attributes: makeCamelCase(detail, attributeKeys),\n                      metadata: {\n                        confidence: detail.Confidence,\n                        pose: makeCamelCase(detail.Pose)\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              }\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Credentials } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport * as Rekognition from 'aws-sdk/clients/rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, } from '../types';\nimport * as Textract from 'aws-sdk/clients/textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIIdentifyPredictionsProvider, _super);\n    function AmazonAIIdentifyPredictionsProvider() {\n        return _super.call(this) || this;\n    }\n    AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    };\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Rekognition.Image>} - Promise resolving to the converted source object.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n        return new Promise(function (res, rej) {\n            if (isStorageSource(source)) {\n                var storageConfig = {\n                    level: source.level,\n                    identityId: source.identityId,\n                };\n                Storage.get(source.key, storageConfig)\n                    .then(function (url) {\n                    var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n                    var parsedURL = url.match(parser);\n                    if (parsedURL.length < 3)\n                        rej('Invalid S3 key was given.');\n                    res({ S3Object: { Bucket: parsedURL[1], Name: parsedURL[2] } });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(function (buffer) {\n                    res({ Bytes: buffer });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isBytesSource(source)) {\n                var bytes = source.bytes;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(function (buffer) {\n                        res({ Bytes: buffer });\n                    })\n                        .catch(function (err) { return rej(err); });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                res({ Bytes: bytes });\n            }\n            else {\n                rej('Input source is not configured correctly.');\n            }\n        });\n    };\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, format, featureTypes, textractParam_1, rekognitionParam, param;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        this.textract = new Textract({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.text.source)\n                                .then(function (data) { return (inputDocument = data); })\n                                .catch(function (err) {\n                                rej(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        format = input.text.format || configFormat;\n                        featureTypes = [];\n                        if (format === 'FORM' || format === 'ALL')\n                            featureTypes.push('FORMS');\n                        if (format === 'TABLE' || format === 'ALL')\n                            featureTypes.push('TABLES');\n                        if (featureTypes.length === 0) {\n                            textractParam_1 = {\n                                Document: inputDocument,\n                            };\n                            rekognitionParam = {\n                                Image: inputDocument,\n                            };\n                            this.rekognition.detectText(rekognitionParam, function (rekognitionErr, rekognitionData) {\n                                if (rekognitionErr)\n                                    return rej(rekognitionErr);\n                                var rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                                if (rekognitionResponse.text.words.length < 50) {\n                                    // did not hit the word limit, return the data\n                                    return res(rekognitionResponse);\n                                }\n                                _this.textract.detectDocumentText(textractParam_1, function (textractErr, textractData) {\n                                    if (textractErr)\n                                        return rej(textractErr);\n                                    // use the service that identified more texts.\n                                    if (rekognitionData.TextDetections.length >\n                                        textractData.Blocks.length) {\n                                        return res(rekognitionResponse);\n                                    }\n                                    else {\n                                        return res(categorizeTextractBlocks(textractData.Blocks));\n                                    }\n                                });\n                            });\n                        }\n                        else {\n                            param = {\n                                Document: inputDocument,\n                                FeatureTypes: featureTypes,\n                            };\n                            this.textract.analyzeDocument(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var blocks = data.Blocks;\n                                res(categorizeTextractBlocks(blocks));\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, type, inputImage, param, servicePromises, entityType;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.labels.source)\n                                .then(function (data) {\n                                inputImage = data;\n                            })\n                                .catch(function (err) {\n                                return rej(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        param = { Image: inputImage };\n                        servicePromises = [];\n                        entityType = input.labels.type || type;\n                        if (entityType === 'LABELS' || entityType === 'ALL') {\n                            servicePromises.push(this.detectLabels(param));\n                        }\n                        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                            servicePromises.push(this.detectModerationLabels(param));\n                        }\n                        // if (servicePromises.length === 0) {\n                        //     rej('You must specify entity type: LABELS | UNSAFE | ALL');\n                        // }\n                        Promise.all(servicePromises)\n                            .then(function (data) {\n                            var identifyResult = {};\n                            // concatenate resolved promises to a single object\n                            data.forEach(function (val) {\n                                identifyResult = __assign(__assign({}, identifyResult), val);\n                            });\n                            res(identifyResult);\n                        })\n                            .catch(function (err) { return rej(err); });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            _this.rekognition.detectLabels(param, function (err, data) {\n                if (err)\n                    return rej(err);\n                if (!data.Labels)\n                    return res({ labels: null }); // no image was detected\n                var detectLabelData = data.Labels.map(function (val) {\n                    var boxes = val.Instances\n                        ? val.Instances.map(function (val) { return makeCamelCase(val.BoundingBox); })\n                        : undefined;\n                    return {\n                        name: val.Name,\n                        boundingBoxes: boxes,\n                        metadata: {\n                            confidence: val.Confidence,\n                            parents: makeCamelCaseArray(val.Parents),\n                        },\n                    };\n                });\n                return res({ labels: detectLabelData });\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            _this.rekognition.detectModerationLabels(param, function (err, data) {\n                if (err)\n                    return rej(err);\n                if (data.ModerationLabels.length !== 0) {\n                    return res({ unsafe: 'YES' });\n                }\n                else {\n                    return res({ unsafe: 'NO' });\n                }\n            });\n        });\n    };\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n     * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, _j, _k, collectionId, _l, maxFaces, updatedParam;\n            var _this = this;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _m.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n                        // default arguments\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.entities.source)\n                                .then(function (data) { return (inputImage = data); })\n                                .catch(function (err) {\n                                return rej(err);\n                            })];\n                    case 2:\n                        _m.sent();\n                        param = { Image: inputImage };\n                        if (isIdentifyCelebrities(input.entities) &&\n                            input.entities.celebrityDetection) {\n                            if (!celebrityDetectionEnabled) {\n                                return [2 /*return*/, rej('Error: You have to enable celebrity detection first')];\n                            }\n                            this.rekognition.recognizeCelebrities(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.CelebrityFaces.map(function (celebrity) {\n                                    return {\n                                        boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                                        landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                                        metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), { pose: makeCamelCase(celebrity.Face.Pose) }),\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        else if (isIdentifyFromCollection(input.entities) &&\n                            input.entities.collection) {\n                            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                            updatedParam = __assign(__assign({}, param), { CollectionId: collectionId, MaxFaces: maxFaces });\n                            this.rekognition.searchFacesByImage(updatedParam, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.FaceMatches.map(function (val) {\n                                    return {\n                                        boundingBox: makeCamelCase(val.Face.BoundingBox),\n                                        metadata: {\n                                            externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                                            similarity: val.Similarity,\n                                        },\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        else {\n                            this.rekognition.detectFaces(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.FaceDetails.map(function (detail) {\n                                    // face attributes keys we want to extract from Rekognition's response\n                                    var attributeKeys = [\n                                        'Smile',\n                                        'Eyeglasses',\n                                        'Sunglasses',\n                                        'Gender',\n                                        'Beard',\n                                        'Mustache',\n                                        'EyesOpen',\n                                        'MouthOpen',\n                                    ];\n                                    var faceAttributes = makeCamelCase(detail, attributeKeys);\n                                    if (detail.Emotions) {\n                                        faceAttributes['emotions'] = detail.Emotions.map(function (emotion) { return emotion.Type; });\n                                    }\n                                    return {\n                                        boundingBox: makeCamelCase(detail.BoundingBox),\n                                        landmarks: makeCamelCaseArray(detail.Landmarks),\n                                        ageRange: makeCamelCase(detail.AgeRange),\n                                        attributes: makeCamelCase(detail, attributeKeys),\n                                        metadata: {\n                                            confidence: detail.Confidence,\n                                            pose: makeCamelCase(detail.Pose),\n                                        },\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    };\n    return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider));\nexport default AmazonAIIdentifyPredictionsProvider;\n//# sourceMappingURL=AmazonAIIdentifyPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}