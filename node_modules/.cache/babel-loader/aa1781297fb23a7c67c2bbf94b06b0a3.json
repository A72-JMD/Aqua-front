{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCache = /** @class */function (_super) {\n  __extends(InMemoryCache, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n  function InMemoryCache(config) {\n    var _this = this;\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    // initialize list for every priority\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n  InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n  InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n  InMemoryCache.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey);\n    // decrease the current size of the cache\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n    // finally remove the item from memory\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey);\n    // increase the current size of the cache\n    this._increaseCurSizeInBytes(item.byteSize);\n    // finally add the item into memory\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n  InMemoryCache.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n  InMemoryCache.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n  InMemoryCache.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // invalid keys\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n    // check wether this item is too big;\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n    // if key already in the cache, then delete it.\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n    // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n    var cacheListIdx = this.maxPriority - 1;\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n  InMemoryCache.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n    // check whether it's in the cachelist\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n      return val;\n    }\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n  InMemoryCache.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // check if the key is in the cache\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n  InMemoryCache.prototype.clear = function () {\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        this._removeItem(key, i);\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n  InMemoryCache.prototype.getAllKeys = function () {\n    var keys = [];\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n  InMemoryCache.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n  InMemoryCache.prototype.createInstance = function (config) {\n    return new InMemoryCache(config);\n  };\n  return InMemoryCache;\n}(StorageCache);\nexport { InMemoryCache };\nvar instance = new InMemoryCache();\nexport default instance;","map":{"version":3,"sources":["../src/InMemoryCache.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCache = /** @class */ (function (_super) {\n    __extends(InMemoryCache, _super);\n    /**\n     * initialize the cache\n     *\n     * @param config - the configuration of the cache\n     */\n    function InMemoryCache(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        logger.debug('now we start!');\n        _this.cacheList = [];\n        _this.curSizeInBytes = 0;\n        _this.maxPriority = 5;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        // initialize list for every priority\n        for (var i = 0; i < _this.maxPriority; i += 1) {\n            _this.cacheList[i] = new CacheList();\n        }\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes -= amount;\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes += amount;\n    };\n    /**\n     * check whether item is expired\n     *\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    InMemoryCache.prototype._isExpired = function (key) {\n        var text = CacheObject.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n        // delete the key from the list\n        this.cacheList[listIdx].removeItem(prefixedKey);\n        // decrease the current size of the cache\n        this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n        // finally remove the item from memory\n        CacheObject.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n        // insert the key into the list\n        this.cacheList[listIdx].insertItem(prefixedKey);\n        // increase the current size of the cache\n        this._increaseCurSizeInBytes(item.byteSize);\n        // finally add the item into memory\n        CacheObject.setItem(prefixedKey, JSON.stringify(item));\n    };\n    /**\n     * see whether cache is full\n     *\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    InMemoryCache.prototype._isCacheFull = function (itemSize) {\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n    };\n    /**\n     * check whether the cache contains the key\n     *\n     * @param key\n     */\n    InMemoryCache.prototype.containsKey = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            if (this.cacheList[i].containsKey(prefixedKey)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    };\n    /**\n     * * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param options - optional, the specified meta-data\n     *\n     * @throws if the item is too big which exceeds the limit of single item size\n     * @throws if the key is invalid\n     */\n    InMemoryCache.prototype.setItem = function (key, value, options) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        // if key already in the cache, then delete it.\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n        // pop out items in the cache when cache is full based on LRU\n        // first start from lowest priority cache list\n        var cacheListIdx = this.maxPriority - 1;\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n                this._removeItem(popedItemKey, cacheListIdx);\n            }\n            else {\n                cacheListIdx -= 1;\n            }\n        }\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     *\n     * @param key - the key of the item\n     * @param options - the options of callback function\n     */\n    InMemoryCache.prototype.getItem = function (key, options) {\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        // check whether it's in the cachelist\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            if (this._isExpired(prefixedKey)) {\n                // if expired, remove that item and return null\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\n            }\n            else {\n                // if not expired, great, return the value and refresh it\n                ret = CacheObject.getItem(prefixedKey);\n                var item = JSON.parse(ret);\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\n                return item.data;\n            }\n        }\n        if (options && options.callback !== undefined) {\n            var val = options.callback();\n            if (val !== null) {\n                this.setItem(key, val, options);\n            }\n            return val;\n        }\n        return null;\n    };\n    /**\n     * remove item from the cache\n     *\n     * @param key - the key of the item\n     */\n    InMemoryCache.prototype.removeItem = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // check if the key is in the cache\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n    };\n    /**\n     * clear the entire cache\n     */\n    InMemoryCache.prototype.clear = function () {\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                this._removeItem(key, i);\n            }\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     */\n    InMemoryCache.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return the current size of the cache\n     */\n    InMemoryCache.prototype.getCacheCurSize = function () {\n        return this.curSizeInBytes;\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     */\n    InMemoryCache.prototype.createInstance = function (config) {\n        return new InMemoryCache(config);\n    };\n    return InMemoryCache;\n}(StorageCache));\nexport { InMemoryCache };\nvar instance = new InMemoryCache();\nexport default instance;\n//# sourceMappingURL=InMemoryCache.js.map"]},"metadata":{},"sourceType":"module"}