{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, TransformerMutationType } from '../utils';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */function () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, conflictHandler, errorHandler) {\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.conflictHandler = conflictHandler;\n    this.errorHandler = errorHandler;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.generateQueries();\n  }\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var createMutation = buildGraphQLOperation(namespace, model, 'CREATE')[0];\n        var updateMutation = buildGraphQLOperation(namespace, model, 'UPDATE')[0];\n        var deleteMutation = buildGraphQLOperation(namespace, model, 'DELETE')[0];\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n      _this.resume();\n      return function () {\n        _this.pause();\n      };\n    });\n    return observable;\n  };\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var head, namespaceName, _a, model, operation, data, condition, modelConstructor, result, opName, modelDefinition, error_1, record;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.processing || !this.isReady()) {\n              return [2 /*return*/];\n            }\n            this.processing = true;\n            namespaceName = USER;\n            _c.label = 1;\n          case 1:\n            _a = this.processing;\n            if (!_a) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.outbox.peek(this.storage)];\n          case 2:\n            _a = head = _c.sent();\n            _c.label = 3;\n          case 3:\n            if (!_a) return [3 /*break*/, 11];\n            model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n            modelConstructor = this.userClasses[model];\n            result = void 0;\n            opName = void 0;\n            modelDefinition = void 0;\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head)];\n          case 5:\n            _b = _c.sent(), result = _b[0], opName = _b[1], modelDefinition = _b[2];\n            return [3 /*break*/, 7];\n          case 6:\n            error_1 = _c.sent();\n            if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n              return [3 /*break*/, 1];\n            }\n            return [3 /*break*/, 7];\n          case 7:\n            if (!(result === undefined)) return [3 /*break*/, 9];\n            logger.debug('done retrying');\n            return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n          case 8:\n            _c.sent();\n            return [3 /*break*/, 1];\n          case 9:\n            record = result.data[opName];\n            return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n          case 10:\n            _c.sent();\n            this.observer.next([operation, modelDefinition, record]);\n            return [3 /*break*/, 1];\n          case 11:\n            // pauses itself\n            this.pause();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, jitteredExponentialRetry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, tryWith, attempt, opType, result, err_1, error, retryWith, err_2, _b, opName_1, query_1, serverData, namespace, updatedMutation;\n                var _c;\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      _a = this.createQueryVariables(namespaceName, model, operation, data, condition), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      tryWith = {\n                        query: query,\n                        variables: variables\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _d.label = 1;\n                    case 1:\n                      _d.trys.push([1, 3,, 13]);\n                      return [4 /*yield*/, API.graphql(tryWith)];\n                    case 2:\n                      result = _d.sent();\n                      return [2 /*return*/, [result, opName, modelDefinition]];\n                    case 3:\n                      err_1 = _d.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 12];\n                      error = err_1.errors[0];\n                      if (error.message === 'Network Error') {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        }\n                        // TODO: Check errors on different env (react-native or other browsers)\n                        throw new Error('Network Error');\n                      }\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 11];\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 4];\n                      retryWith = DISCARD;\n                      return [3 /*break*/, 7];\n                    case 4:\n                      _d.trys.push([4, 6,, 7]);\n                      return [4 /*yield*/, this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n                    case 5:\n                      retryWith = _d.sent();\n                      return [3 /*break*/, 7];\n                    case 6:\n                      err_2 = _d.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3 /*break*/, 13];\n                    case 7:\n                      if (!(retryWith === DISCARD)) return [3 /*break*/, 9];\n                      _b = buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET')[0], opName_1 = _b[1], query_1 = _b[2];\n                      return [4 /*yield*/, API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        }\n                      })];\n                    case 8:\n                      serverData = _d.sent();\n                      return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                    case 9:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4 /*yield*/, this.storage.save(updatedMutation)];\n                    case 10:\n                      _d.sent();\n                      throw new NonRetryableError('RetryMutation');\n                    case 11:\n                      try {\n                        this.errorHandler({\n                          localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                          message: error.message,\n                          operation: operation,\n                          errorType: error.errorType,\n                          errorInfo: error.errorInfo,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn({\n                          _err: err\n                        });\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2 /*return*/, error.data ? [{\n                          data: (_c = {}, _c[opName] = error.data, _c)\n                        }, opName, modelDefinition] : []];\n                      }\n                      _d.label = 12;\n                    case 12:\n                      return [3 /*break*/, 13];\n                    case 13:\n                      if (tryWith) return [3 /*break*/, 1];\n                      _d.label = 14;\n                    case 14:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent])];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n    var _a = queriesTuples.find(function (_a) {\n        var transformerMutationType = _a[0];\n        return transformerMutationType === operation;\n      }),\n      opName = _a[1],\n      query = _a[2];\n    var _b = JSON.parse(data),\n      _version = _b._version,\n      parsedData = __rest(_b, [\"_version\"]);\n    var filteredData = operation === TransformerMutationType.DELETE ? {\n      id: parsedData.id\n    } // For DELETE mutations, only ID is sent\n    : Object.values(modelDefinition.fields).filter(function (_a) {\n      var type = _a.type,\n        association = _a.association;\n      // connections\n      if (isModelFieldType(type)) {\n        // BELONGS_TO\n        if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n          return true;\n        }\n        // All other connections\n        return false;\n      }\n      // scalars and non-model types\n      return true;\n    }).map(function (_a) {\n      var name = _a.name,\n        type = _a.type,\n        association = _a.association;\n      var fieldName = name;\n      var val = parsedData[name];\n      if (isModelFieldType(type) && isTargetNameAssociation(association)) {\n        fieldName = association.targetName;\n        val = parsedData[fieldName];\n      }\n      return [fieldName, val];\n    }).reduce(function (acc, _a) {\n      var k = _a[0],\n        v = _a[1];\n      acc[k] = v;\n      return acc;\n    }, {});\n    // Build mutation variables input object\n    var input = __assign(__assign({}, filteredData), {\n      _version: _version\n    });\n    var graphQLCondition = JSON.parse(condition);\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n  return MutationProcessor;\n}();\nexport { MutationProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/mutation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, TransformerMutationType, } from '../utils';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */ (function () {\n    function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, conflictHandler, errorHandler) {\n        this.schema = schema;\n        this.storage = storage;\n        this.userClasses = userClasses;\n        this.outbox = outbox;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.MutationEvent = MutationEvent;\n        this.conflictHandler = conflictHandler;\n        this.errorHandler = errorHandler;\n        this.typeQuery = new WeakMap();\n        this.processing = false;\n        this.generateQueries();\n    }\n    MutationProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var createMutation = buildGraphQLOperation(namespace, model, 'CREATE')[0];\n                var updateMutation = buildGraphQLOperation(namespace, model, 'UPDATE')[0];\n                var deleteMutation = buildGraphQLOperation(namespace, model, 'DELETE')[0];\n                _this.typeQuery.set(model, [\n                    createMutation,\n                    updateMutation,\n                    deleteMutation,\n                ]);\n            });\n        });\n    };\n    MutationProcessor.prototype.isReady = function () {\n        return this.observer !== undefined;\n    };\n    MutationProcessor.prototype.start = function () {\n        var _this = this;\n        var observable = new Observable(function (observer) {\n            _this.observer = observer;\n            _this.resume();\n            return function () {\n                _this.pause();\n            };\n        });\n        return observable;\n    };\n    MutationProcessor.prototype.resume = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var head, namespaceName, _a, model, operation, data, condition, modelConstructor, result, opName, modelDefinition, error_1, record;\n            var _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (this.processing || !this.isReady()) {\n                            return [2 /*return*/];\n                        }\n                        this.processing = true;\n                        namespaceName = USER;\n                        _c.label = 1;\n                    case 1:\n                        _a = this.processing;\n                        if (!_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.outbox.peek(this.storage)];\n                    case 2:\n                        _a = (head = _c.sent());\n                        _c.label = 3;\n                    case 3:\n                        if (!_a) return [3 /*break*/, 11];\n                        model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                        modelConstructor = this.userClasses[model];\n                        result = void 0;\n                        opName = void 0;\n                        modelDefinition = void 0;\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head)];\n                    case 5:\n                        _b = _c.sent(), result = _b[0], opName = _b[1], modelDefinition = _b[2];\n                        return [3 /*break*/, 7];\n                    case 6:\n                        error_1 = _c.sent();\n                        if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                            return [3 /*break*/, 1];\n                        }\n                        return [3 /*break*/, 7];\n                    case 7:\n                        if (!(result === undefined)) return [3 /*break*/, 9];\n                        logger.debug('done retrying');\n                        return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n                    case 8:\n                        _c.sent();\n                        return [3 /*break*/, 1];\n                    case 9:\n                        record = result.data[opName];\n                        return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n                    case 10:\n                        _c.sent();\n                        this.observer.next([operation, modelDefinition, record]);\n                        return [3 /*break*/, 1];\n                    case 11:\n                        // pauses itself\n                        this.pause();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, jitteredExponentialRetry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, query, variables, graphQLCondition, opName, modelDefinition, tryWith, attempt, opType, result, err_1, error, retryWith, err_2, _b, opName_1, query_1, serverData, namespace, updatedMutation;\n                            var _c;\n                            return __generator(this, function (_d) {\n                                switch (_d.label) {\n                                    case 0:\n                                        _a = this.createQueryVariables(namespaceName, model, operation, data, condition), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                                        tryWith = { query: query, variables: variables };\n                                        attempt = 0;\n                                        opType = this.opTypeFromTransformerOperation(operation);\n                                        _d.label = 1;\n                                    case 1:\n                                        _d.trys.push([1, 3, , 13]);\n                                        return [4 /*yield*/, API.graphql(tryWith)];\n                                    case 2:\n                                        result = (_d.sent());\n                                        return [2 /*return*/, [result, opName, modelDefinition]];\n                                    case 3:\n                                        err_1 = _d.sent();\n                                        if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 12];\n                                        error = err_1.errors[0];\n                                        if (error.message === 'Network Error') {\n                                            if (!this.processing) {\n                                                throw new NonRetryableError('Offline');\n                                            }\n                                            // TODO: Check errors on different env (react-native or other browsers)\n                                            throw new Error('Network Error');\n                                        }\n                                        if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 11];\n                                        attempt++;\n                                        retryWith = void 0;\n                                        if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 4];\n                                        retryWith = DISCARD;\n                                        return [3 /*break*/, 7];\n                                    case 4:\n                                        _d.trys.push([4, 6, , 7]);\n                                        return [4 /*yield*/, this.conflictHandler({\n                                                modelConstructor: modelConstructor,\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                                                operation: opType,\n                                                attempts: attempt,\n                                            })];\n                                    case 5:\n                                        retryWith = _d.sent();\n                                        return [3 /*break*/, 7];\n                                    case 6:\n                                        err_2 = _d.sent();\n                                        logger.warn('conflict trycatch', err_2);\n                                        return [3 /*break*/, 13];\n                                    case 7:\n                                        if (!(retryWith === DISCARD)) return [3 /*break*/, 9];\n                                        _b = buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET')[0], opName_1 = _b[1], query_1 = _b[2];\n                                        return [4 /*yield*/, API.graphql({\n                                                query: query_1,\n                                                variables: { id: variables.input.id },\n                                            })];\n                                    case 8:\n                                        serverData = _d.sent();\n                                        return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                                    case 9:\n                                        namespace = this.schema.namespaces[namespaceName];\n                                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                                        return [4 /*yield*/, this.storage.save(updatedMutation)];\n                                    case 10:\n                                        _d.sent();\n                                        throw new NonRetryableError('RetryMutation');\n                                    case 11:\n                                        try {\n                                            this.errorHandler({\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                message: error.message,\n                                                operation: operation,\n                                                errorType: error.errorType,\n                                                errorInfo: error.errorInfo,\n                                                remoteModel: error.data\n                                                    ? this.modelInstanceCreator(modelConstructor, error.data)\n                                                    : null,\n                                            });\n                                        }\n                                        catch (err) {\n                                            logger.warn({ _err: err });\n                                        }\n                                        finally {\n                                            // Return empty tuple, dequeues the mutation\n                                            return [2 /*return*/, error.data\n                                                    ? [\n                                                        { data: (_c = {}, _c[opName] = error.data, _c) },\n                                                        opName,\n                                                        modelDefinition,\n                                                    ]\n                                                    : []];\n                                        }\n                                        _d.label = 12;\n                                    case 12: return [3 /*break*/, 13];\n                                    case 13:\n                                        if (tryWith) return [3 /*break*/, 1];\n                                        _d.label = 14;\n                                    case 14: return [2 /*return*/];\n                                }\n                            });\n                        }); }, [\n                            model,\n                            operation,\n                            data,\n                            condition,\n                            modelConstructor,\n                            MutationEvent,\n                            mutationEvent,\n                        ])];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n        var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n        var queriesTuples = this.typeQuery.get(modelDefinition);\n        var _a = queriesTuples.find(function (_a) {\n            var transformerMutationType = _a[0];\n            return transformerMutationType === operation;\n        }), opName = _a[1], query = _a[2];\n        var _b = JSON.parse(data), _version = _b._version, parsedData = __rest(_b, [\"_version\"]);\n        var filteredData = operation === TransformerMutationType.DELETE\n            ? { id: parsedData.id } // For DELETE mutations, only ID is sent\n            : Object.values(modelDefinition.fields)\n                .filter(function (_a) {\n                var type = _a.type, association = _a.association;\n                // connections\n                if (isModelFieldType(type)) {\n                    // BELONGS_TO\n                    if (isTargetNameAssociation(association) &&\n                        association.connectionType === 'BELONGS_TO') {\n                        return true;\n                    }\n                    // All other connections\n                    return false;\n                }\n                // scalars and non-model types\n                return true;\n            })\n                .map(function (_a) {\n                var name = _a.name, type = _a.type, association = _a.association;\n                var fieldName = name;\n                var val = parsedData[name];\n                if (isModelFieldType(type) &&\n                    isTargetNameAssociation(association)) {\n                    fieldName = association.targetName;\n                    val = parsedData[fieldName];\n                }\n                return [fieldName, val];\n            })\n                .reduce(function (acc, _a) {\n                var k = _a[0], v = _a[1];\n                acc[k] = v;\n                return acc;\n            }, {});\n        // Build mutation variables input object\n        var input = __assign(__assign({}, filteredData), { _version: _version });\n        var graphQLCondition = JSON.parse(condition);\n        var variables = __assign({ input: input }, (operation === TransformerMutationType.CREATE\n            ? {}\n            : {\n                condition: Object.keys(graphQLCondition).length > 0\n                    ? graphQLCondition\n                    : null,\n            }));\n        return [query, variables, graphQLCondition, opName, modelDefinition];\n    };\n    MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n        switch (operation) {\n            case TransformerMutationType.CREATE:\n                return OpType.INSERT;\n            case TransformerMutationType.DELETE:\n                return OpType.DELETE;\n            case TransformerMutationType.UPDATE:\n                return OpType.UPDATE;\n            case TransformerMutationType.GET: // Intentionally blank\n                break;\n            default:\n                exhaustiveCheck(operation);\n        }\n    };\n    MutationProcessor.prototype.pause = function () {\n        this.processing = false;\n    };\n    return MutationProcessor;\n}());\nexport { MutationProcessor };\n//# sourceMappingURL=mutation.js.map"]},"metadata":{},"sourceType":"module"}