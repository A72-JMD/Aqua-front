{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nvar Int64_1 = require(\"./Int64\");\n/**\n * @internal\n */\nvar HeaderMarshaller = /** @class */function () {\n  function HeaderMarshaller(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n  HeaderMarshaller.prototype.format = function (headers) {\n    var e_1, _a, e_2, _b;\n    var chunks = [];\n    try {\n      for (var _c = tslib_1.__values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var headerName = _d.value;\n        var bytes = this.fromUtf8(headerName);\n        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var out = new Uint8Array(chunks.reduce(function (carry, bytes) {\n      return carry + bytes.byteLength;\n    }, 0));\n    var position = 0;\n    try {\n      for (var chunks_1 = tslib_1.__values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n        var chunk = chunks_1_1.value;\n        out.set(chunk, position);\n        position += chunk.byteLength;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return out;\n  };\n  HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n    switch (header.type) {\n      case 'boolean':\n        return Uint8Array.from([header.value ? 0 /* boolTrue */ : 1 /* boolFalse */]);\n      case 'byte':\n        return Uint8Array.from([2 /* byte */, header.value]);\n      case 'short':\n        var shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3 /* short */);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case 'integer':\n        var intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4 /* integer */);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case 'long':\n        var longBytes = new Uint8Array(9);\n        longBytes[0] = 5 /* long */;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case 'binary':\n        var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6 /* byteArray */);\n        binView.setUint16(1, header.value.byteLength, false);\n        var binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case 'string':\n        var utf8Bytes = this.fromUtf8(header.value);\n        var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7 /* string */);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        var strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case 'timestamp':\n        var tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8 /* timestamp */;\n        tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case 'uuid':\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(\"Invalid UUID received: \" + header.value);\n        }\n        var uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9 /* uuid */;\n        uuidBytes.set(util_hex_encoding_1.fromHex(header.value.replace(/\\-/g, '')), 1);\n        return uuidBytes;\n    }\n  };\n  HeaderMarshaller.prototype.parse = function (headers) {\n    var out = {};\n    var position = 0;\n    while (position < headers.byteLength) {\n      var nameLength = headers.getUint8(position++);\n      var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n      switch (headers.getUint8(position++)) {\n        case 0 /* boolTrue */:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n        case 1 /* boolFalse */:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n        case 2 /* byte */:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n        case 3 /* short */:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n        case 4 /* integer */:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n        case 5 /* long */:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n        case 6 /* byteArray */:\n          var binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n        case 7 /* string */:\n          var stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n        case 8 /* timestamp */:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n        case 9 /* uuid */:\n          var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: util_hex_encoding_1.toHex(uuidBytes.subarray(0, 4)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(4, 6)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(6, 8)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(8, 10)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(10))\n          };\n          break;\n        default:\n          throw new Error(\"Unrecognized header type tag\");\n      }\n    }\n    return out;\n  };\n  return HeaderMarshaller;\n}();\nexports.HeaderMarshaller = HeaderMarshaller;\n;\nvar BOOLEAN_TAG = 'boolean';\nvar BYTE_TAG = 'byte';\nvar SHORT_TAG = 'short';\nvar INT_TAG = 'integer';\nvar LONG_TAG = 'long';\nvar BINARY_TAG = 'binary';\nvar STRING_TAG = 'string';\nvar TIMESTAMP_TAG = 'timestamp';\nvar UUID_TAG = 'uuid';\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"sources":["../src/HeaderMarshaller.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nvar Int64_1 = require(\"./Int64\");\n/**\n * @internal\n */\nvar HeaderMarshaller = /** @class */ (function () {\n    function HeaderMarshaller(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    HeaderMarshaller.prototype.format = function (headers) {\n        var e_1, _a, e_2, _b;\n        var chunks = [];\n        try {\n            for (var _c = tslib_1.__values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var headerName = _d.value;\n                var bytes = this.fromUtf8(headerName);\n                chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var out = new Uint8Array(chunks.reduce(function (carry, bytes) { return carry + bytes.byteLength; }, 0));\n        var position = 0;\n        try {\n            for (var chunks_1 = tslib_1.__values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n                var chunk = chunks_1_1.value;\n                out.set(chunk, position);\n                position += chunk.byteLength;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return out;\n    };\n    HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n        switch (header.type) {\n            case 'boolean':\n                return Uint8Array.from([\n                    header.value\n                        ? 0 /* boolTrue */\n                        : 1 /* boolFalse */,\n                ]);\n            case 'byte':\n                return Uint8Array.from([\n                    2 /* byte */,\n                    header.value,\n                ]);\n            case 'short':\n                var shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3 /* short */);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case 'integer':\n                var intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4 /* integer */);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case 'long':\n                var longBytes = new Uint8Array(9);\n                longBytes[0] = 5 /* long */;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case 'binary':\n                var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6 /* byteArray */);\n                binView.setUint16(1, header.value.byteLength, false);\n                var binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case 'string':\n                var utf8Bytes = this.fromUtf8(header.value);\n                var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7 /* string */);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                var strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case 'timestamp':\n                var tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8 /* timestamp */;\n                tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case 'uuid':\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(\"Invalid UUID received: \" + header.value);\n                }\n                var uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9 /* uuid */;\n                uuidBytes.set(util_hex_encoding_1.fromHex(header.value.replace(/\\-/g, '')), 1);\n                return uuidBytes;\n        }\n    };\n    HeaderMarshaller.prototype.parse = function (headers) {\n        var out = {};\n        var position = 0;\n        while (position < headers.byteLength) {\n            var nameLength = headers.getUint8(position++);\n            var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0 /* boolTrue */:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1 /* boolFalse */:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2 /* byte */:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3 /* short */:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4 /* integer */:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5 /* long */:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n                    };\n                    position += 8;\n                    break;\n                case 6 /* byteArray */:\n                    var binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7 /* string */:\n                    var stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8 /* timestamp */:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9 /* uuid */:\n                    var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: util_hex_encoding_1.toHex(uuidBytes.subarray(0, 4)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(4, 6)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(6, 8)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(8, 10)) + \"-\" + util_hex_encoding_1.toHex(uuidBytes.subarray(10)),\n                    };\n                    break;\n                default:\n                    throw new Error(\"Unrecognized header type tag\");\n            }\n        }\n        return out;\n    };\n    return HeaderMarshaller;\n}());\nexports.HeaderMarshaller = HeaderMarshaller;\n;\nvar BOOLEAN_TAG = 'boolean';\nvar BYTE_TAG = 'byte';\nvar SHORT_TAG = 'short';\nvar INT_TAG = 'integer';\nvar LONG_TAG = 'long';\nvar BINARY_TAG = 'binary';\nvar STRING_TAG = 'string';\nvar TIMESTAMP_TAG = 'timestamp';\nvar UUID_TAG = 'uuid';\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n//# sourceMappingURL=HeaderMarshaller.js.map"]},"metadata":{},"sourceType":"script"}