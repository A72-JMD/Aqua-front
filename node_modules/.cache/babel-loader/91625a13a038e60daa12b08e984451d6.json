{"ast":null,"code":"const Helpers = {\n  // Main wrapper for Fetch API\n  httpRequest: (url, method, authorization, payload, headers) => {\n    // Configuration to accept json as a default\n    const config = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization\n      }\n    };\n    // method = post and payload, add it to the fetch request\n    if (method.toLowerCase() === \"post\" && payload && payload.length > 0) {\n      config.body = JSON.stringify(payload);\n    }\n    // if custom headers need to be set for the specific request\n    // override them here\n    if (headers && typeof headers === \"object\" && Object.keys(headers).length > 0) {\n      config.headers = headers;\n    }\n    return fetch(url, config).then(response => {\n      // Check if the request is 200\n      if (response.ok) {\n        let data = response;\n        console.log(\"check data\");\n        console.log(data);\n\n        // if the type is json return, interpret it as json\n        //  if (response.headers.get('Content-Type').indexOf('application/json') > -1) {\n\n        //  data = response.json();\n        //  }\n        return data;\n      }\n      // if an errors, anything but 200 then reject with the actuall response\n      return Promise.reject(response);\n    });\n  }\n};\nexport default Helpers;","map":{"version":3,"names":["Helpers","httpRequest","url","method","authorization","payload","headers","config","toLowerCase","length","body","JSON","stringify","Object","keys","fetch","then","response","ok","data","console","log","Promise","reject"],"sources":["/Users/JMD/Developments/Projects/Fiji-Web/src/Common/helpers.js"],"sourcesContent":["const Helpers = {\n  // Main wrapper for Fetch API\n  httpRequest: (url, method, authorization, payload, headers) => {\n    // Configuration to accept json as a default\n    const config = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization,\n      },\n    };\n    // method = post and payload, add it to the fetch request\n    if (method.toLowerCase() === \"post\" && payload && payload.length > 0) {\n      config.body = JSON.stringify(payload);\n    }\n    // if custom headers need to be set for the specific request\n    // override them here\n    if (\n      headers &&\n      typeof headers === \"object\" &&\n      Object.keys(headers).length > 0\n    ) {\n      config.headers = headers;\n    }\n    return fetch(url, config).then((response) => {\n      // Check if the request is 200\n      if (response.ok) {\n        let data = response;\n        console.log(\"check data\");\n        console.log(data);\n\n        // if the type is json return, interpret it as json\n        //  if (response.headers.get('Content-Type').indexOf('application/json') > -1) {\n\n        //  data = response.json();\n        //  }\n        return data;\n      }\n      // if an errors, anything but 200 then reject with the actuall response\n      return Promise.reject(response);\n    });\n  },\n};\nexport default Helpers;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACd;EACAC,WAAW,EAAEA,CAACC,GAAG,EAAEC,MAAM,EAAEC,aAAa,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7D;IACA,MAAMC,MAAM,GAAG;MACbJ,MAAM;MACNG,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCF;MACF;IACF,CAAC;IACD;IACA,IAAID,MAAM,CAACK,WAAW,CAAC,CAAC,KAAK,MAAM,IAAIH,OAAO,IAAIA,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;MACpEF,MAAM,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,OAAO,CAAC;IACvC;IACA;IACA;IACA,IACEC,OAAO,IACP,OAAOA,OAAO,KAAK,QAAQ,IAC3BO,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACG,MAAM,GAAG,CAAC,EAC/B;MACAF,MAAM,CAACD,OAAO,GAAGA,OAAO;IAC1B;IACA,OAAOS,KAAK,CAACb,GAAG,EAAEK,MAAM,CAAC,CAACS,IAAI,CAAEC,QAAQ,IAAK;MAC3C;MACA,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,IAAIC,IAAI,GAAGF,QAAQ;QACnBG,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzBD,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;;QAEjB;QACA;;QAEA;QACA;QACA,OAAOA,IAAI;MACb;MACA;MACA,OAAOG,OAAO,CAACC,MAAM,CAACN,QAAQ,CAAC;IACjC,CAAC,CAAC;EACJ;AACF,CAAC;AACD,eAAejB,OAAO"},"metadata":{},"sourceType":"module"}