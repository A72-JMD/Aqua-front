{"ast":null,"code":"import { Auth } from \"aws-amplify\";\nimport config from \"../../config\";\nfunction NewTemp() {\n  return {\n    userGroups: [],\n    userInfo: {},\n    isAuthed: false\n  };\n}\nexport async function GetUserDetails() {\n  try {\n    // const [userDetails, setUserDetails] = useState({});\n\n    var temp = new NewTemp();\n    var currentSession = await Auth.currentSession();\n    temp.isAuthed = true; // If the above line worked, there is a valid sesison.\n\n    temp.userGroups = currentSession.getAccessToken().payload[\"cognito:groups\"];\n    var currentSessionInfo = currentSession.getIdToken();\n    var currentUser = await Auth.currentAuthenticatedUser();\n\n    // console.log(\"currentSession\");\n    // console.log(currentSession);\n    // console.log(\"currentSessionInfo\");\n    // console.log(currentSessionInfo);\n    // console.log(\"currentUser\");\n    // console.log(currentUser);\n\n    var userdetails = JSON.parse(currentUser.pool.storage[\"CognitoIdentityServiceProvider.\".concat(config.cognito.APP_CLIENT_ID, \".\").concat(currentUser.username, \".userData\")]);\n    var userAttributes = {};\n    userdetails.UserAttributes.map((i, c) => userAttributes[userdetails.UserAttributes[c][\"Name\"]] = userdetails.UserAttributes[c][\"Value\"]);\n    var currentUserDetails = {\n      id: currentSessionInfo.payload[\"cognito:username\"],\n      email: currentSessionInfo.payload.email,\n      emailVerified: currentSessionInfo.payload.email_verified,\n      phone: currentSessionInfo.payload.phone_number,\n      phoneVerified: currentSessionInfo.payload.phone_number_verified,\n      userAttributes: userAttributes\n    };\n    temp.userInfo = currentUserDetails;\n    return temp;\n  } catch (e) {\n    if (e !== \"No current user\") {\n      alert(e);\n    }\n    return new NewTemp();\n  }\n}","map":{"version":3,"names":["Auth","config","NewTemp","userGroups","userInfo","isAuthed","GetUserDetails","temp","currentSession","getAccessToken","payload","currentSessionInfo","getIdToken","currentUser","currentAuthenticatedUser","userdetails","JSON","parse","pool","storage","concat","cognito","APP_CLIENT_ID","username","userAttributes","UserAttributes","map","i","c","currentUserDetails","id","email","emailVerified","email_verified","phone","phone_number","phoneVerified","phone_number_verified","e","alert"],"sources":["/Users/JMD/Developments/Projects/Fiji-Web/src/Common/Auth/UserDetails.js"],"sourcesContent":["import { Auth } from \"aws-amplify\";\r\n\r\nimport config from \"../../config\";\r\n\r\nfunction NewTemp() {\r\n  return {\r\n    userGroups: [],\r\n    userInfo: {},\r\n    isAuthed: false\r\n  };\r\n}\r\nexport async function GetUserDetails() {\r\n  try {\r\n    // const [userDetails, setUserDetails] = useState({});\r\n\r\n    var temp = new NewTemp();\r\n\r\n    var currentSession = await Auth.currentSession();\r\n    temp.isAuthed = true; // If the above line worked, there is a valid sesison.\r\n\r\n    temp.userGroups = currentSession.getAccessToken().payload[\"cognito:groups\"];\r\n\r\n    var currentSessionInfo = currentSession.getIdToken();\r\n\r\n    var currentUser = await Auth.currentAuthenticatedUser();\r\n\r\n    // console.log(\"currentSession\");\r\n    // console.log(currentSession);\r\n    // console.log(\"currentSessionInfo\");\r\n    // console.log(currentSessionInfo);\r\n    // console.log(\"currentUser\");\r\n    // console.log(currentUser);\r\n\r\n    var userdetails = JSON.parse(\r\n      currentUser.pool.storage[\r\n        `CognitoIdentityServiceProvider.${config.cognito.APP_CLIENT_ID}.${currentUser.username}.userData`\r\n      ]\r\n    );\r\n    var userAttributes = {};\r\n\r\n    userdetails.UserAttributes.map(\r\n      (i, c) =>\r\n        (userAttributes[userdetails.UserAttributes[c][\"Name\"]] =\r\n          userdetails.UserAttributes[c][\"Value\"])\r\n    );\r\n\r\n    var currentUserDetails = {\r\n      id: currentSessionInfo.payload[\"cognito:username\"],\r\n      email: currentSessionInfo.payload.email,\r\n      emailVerified: currentSessionInfo.payload.email_verified,\r\n      phone: currentSessionInfo.payload.phone_number,\r\n      phoneVerified: currentSessionInfo.payload.phone_number_verified,\r\n      userAttributes: userAttributes\r\n    };\r\n\r\n    temp.userInfo = currentUserDetails;\r\n\r\n    return temp;\r\n  } catch (e) {\r\n    if (e !== \"No current user\") {\r\n      alert(e);\r\n    }\r\n    return new NewTemp();\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,aAAa;AAElC,OAAOC,MAAM,MAAM,cAAc;AAEjC,SAASC,OAAOA,CAAA,EAAG;EACjB,OAAO;IACLC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,CAAC,CAAC;IACZC,QAAQ,EAAE;EACZ,CAAC;AACH;AACA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,IAAI;IACF;;IAEA,IAAIC,IAAI,GAAG,IAAIL,OAAO,CAAC,CAAC;IAExB,IAAIM,cAAc,GAAG,MAAMR,IAAI,CAACQ,cAAc,CAAC,CAAC;IAChDD,IAAI,CAACF,QAAQ,GAAG,IAAI,CAAC,CAAC;;IAEtBE,IAAI,CAACJ,UAAU,GAAGK,cAAc,CAACC,cAAc,CAAC,CAAC,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAE3E,IAAIC,kBAAkB,GAAGH,cAAc,CAACI,UAAU,CAAC,CAAC;IAEpD,IAAIC,WAAW,GAAG,MAAMb,IAAI,CAACc,wBAAwB,CAAC,CAAC;;IAEvD;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC1BJ,WAAW,CAACK,IAAI,CAACC,OAAO,mCAAAC,MAAA,CACYnB,MAAM,CAACoB,OAAO,CAACC,aAAa,OAAAF,MAAA,CAAIP,WAAW,CAACU,QAAQ,eAE1F,CAAC;IACD,IAAIC,cAAc,GAAG,CAAC,CAAC;IAEvBT,WAAW,CAACU,cAAc,CAACC,GAAG,CAC5B,CAACC,CAAC,EAAEC,CAAC,KACFJ,cAAc,CAACT,WAAW,CAACU,cAAc,CAACG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GACpDb,WAAW,CAACU,cAAc,CAACG,CAAC,CAAC,CAAC,OAAO,CAC3C,CAAC;IAED,IAAIC,kBAAkB,GAAG;MACvBC,EAAE,EAAEnB,kBAAkB,CAACD,OAAO,CAAC,kBAAkB,CAAC;MAClDqB,KAAK,EAAEpB,kBAAkB,CAACD,OAAO,CAACqB,KAAK;MACvCC,aAAa,EAAErB,kBAAkB,CAACD,OAAO,CAACuB,cAAc;MACxDC,KAAK,EAAEvB,kBAAkB,CAACD,OAAO,CAACyB,YAAY;MAC9CC,aAAa,EAAEzB,kBAAkB,CAACD,OAAO,CAAC2B,qBAAqB;MAC/Db,cAAc,EAAEA;IAClB,CAAC;IAEDjB,IAAI,CAACH,QAAQ,GAAGyB,kBAAkB;IAElC,OAAOtB,IAAI;EACb,CAAC,CAAC,OAAO+B,CAAC,EAAE;IACV,IAAIA,CAAC,KAAK,iBAAiB,EAAE;MAC3BC,KAAK,CAACD,CAAC,CAAC;IACV;IACA,OAAO,IAAIpC,OAAO,CAAC,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module"}