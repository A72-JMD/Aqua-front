{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar Credentials = /** @class */function () {\n  function Credentials(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  Credentials.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  Credentials.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    return this._config;\n  };\n  Credentials.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  Credentials.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      if (AWS.config && AWS.config.credentials && AWS.config.credentials instanceof AWS.Credentials) {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n      } else {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n      }\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  Credentials.prototype._keepAlive = function () {\n    logger.debug('checking if credentials exists and not expired');\n    var cred = this._credentials;\n    if (cred && !this._isExpired(cred)) {\n      logger.debug('credentials not changed and not expired, directly return');\n      return Promise.resolve(cred);\n    }\n    logger.debug('need to get a new credential or refresh the existing one');\n    if (Amplify.Auth && typeof Amplify.Auth.currentUserCredentials === 'function') {\n      return Amplify.Auth.currentUserCredentials();\n    } else {\n      return Promise.reject('No Auth module registered in Amplify');\n    }\n  };\n  Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n    var _this = this;\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user;\n    var token = federatedInfo.token,\n      expires_at = federatedInfo.expires_at,\n      identity_id = federatedInfo.identity_id;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return that._refreshHandlers[provider]().then(function (data) {\n          logger.debug('refresh federated token sucessfully', data);\n          token = data.token;\n          identity_id = data.identity_id;\n          expires_at = data.expires_at;\n          return that._setCredentialsFromFederation({\n            provider: provider,\n            token: token,\n            user: user,\n            identity_id: identity_id,\n            expires_at: expires_at\n          });\n        }).catch(function (e) {\n          logger.debug('refresh federated token failed', e);\n          _this.clear();\n          return Promise.reject('refreshing federation token failed: ' + e);\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  Credentials.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('is this credentials expired?', credentials);\n    var ts = new Date().getTime();\n    var delta = 10 * 60 * 1000; // 10 minutes\n    var expired = credentials.expired,\n      expireTime = credentials.expireTime;\n    if (!expired && expireTime > ts + delta && ts < this._nextCredentialsRefresh) {\n      return false;\n    }\n    return true;\n  };\n  Credentials.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            attempted = false;\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Federated Identity pool provided');\n              return [2 /*return*/, Promise.reject('No Cognito Federated Identity pool provided')];\n            }\n            identityId = undefined;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _b.sent();\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            credentials = new AWS.CognitoIdentityCredentials({\n              IdentityPoolId: identityPoolId,\n              IdentityId: identityId ? identityId : undefined\n            }, {\n              region: region\n            });\n            that = this;\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var newCredentials;\n                return __generator(this, function (_a) {\n                  // If identity id is deleted in the console, we make one attempt to recreate it\n                  // and remove existing id from cache.\n                  if (e.code === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\" && !attempted) {\n                    attempted = true;\n                    logger.debug('Failed to load guest credentials');\n                    this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                    credentials.clearCachedId();\n                    newCredentials = new AWS.CognitoIdentityCredentials({\n                      IdentityPoolId: identityPoolId,\n                      IdentityId: undefined\n                    }, {\n                      region: region\n                    });\n                    return [2 /*return*/, this._loadCredentials(newCredentials, 'guest', false, null)];\n                  } else {\n                    return [2 /*return*/, e];\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  Credentials.prototype._setCredentialsFromAWS = function () {\n    var credentials = AWS.config.credentials;\n    logger.debug('setting credentials from aws');\n    var that = this;\n    if (credentials instanceof AWS.Credentials) {\n      return Promise.resolve(credentials);\n    } else {\n      logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n      return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n    }\n  };\n  Credentials.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n      token = params.token,\n      identity_id = params.identity_id,\n      user = params.user,\n      expires_at = params.expires_at;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      IdentityId: identity_id,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  Credentials.prototype._setCredentialsFromSession = function (session) {\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.get(function (err) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (err) {\n                  logger.debug('Failed to load credentials', credentials);\n                  rej(err);\n                  return [2 /*return*/];\n                }\n                logger.debug('Load credentials successfully', credentials);\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (!(source === 'federated')) return [3 /*break*/, 3];\n                user = Object.assign({\n                  id: this._credentials.identityId\n                }, info.user);\n                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                try {\n                  this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                    provider: provider,\n                    token: token,\n                    user: user,\n                    expires_at: expires_at,\n                    identity_id: identity_id\n                  }));\n                } catch (e) {\n                  logger.debug('Failed to put federated info into auth storage', e);\n                }\n                if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                return [4 /*yield*/, Amplify.Cache.setItem('federatedInfo', {\n                  provider: provider,\n                  token: token,\n                  user: user,\n                  expires_at: expires_at,\n                  identity_id: identity_id\n                }, {\n                  priority: 1\n                })];\n              case 1:\n                _a.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                logger.debug('No Cache module registered in Amplify');\n                _a.label = 3;\n              case 3:\n                if (!(source === 'guest')) return [3 /*break*/, 7];\n                _a.label = 4;\n              case 4:\n                _a.trys.push([4, 6,, 7]);\n                return [4 /*yield*/, this._storageSync];\n              case 5:\n                _a.sent();\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n                return [3 /*break*/, 7];\n              case 6:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3 /*break*/, 7];\n              case 7:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      });\n    });\n  };\n  Credentials.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  Credentials.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, credentials;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n            if (identityPoolId) {\n              credentials = new AWS.CognitoIdentityCredentials({\n                IdentityPoolId: identityPoolId\n              }, {\n                region: region\n              });\n              credentials.clearCachedId();\n            }\n            this._credentials = null;\n            this._credentials_source = null;\n            this._storage.removeItem('aws-amplify-federatedInfo');\n            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, Amplify.Cache.removeItem('federatedInfo')];\n          case 1:\n            _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            logger.debug('No Cache module registered in Amplify');\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  Credentials.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return Credentials;\n}();\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;","map":{"version":3,"sources":["../src/Credentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar Credentials = /** @class */ (function () {\n    function Credentials(config) {\n        this._gettingCredPromise = null;\n        this._refreshHandlers = {};\n        this.configure(config);\n        this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n    }\n    Credentials.prototype.getCredSource = function () {\n        return this._credentials_source;\n    };\n    Credentials.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        this._config = Object.assign({}, this._config, config);\n        var refreshHandlers = this._config.refreshHandlers;\n        // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n        }\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper().getStorage();\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        return this._config;\n    };\n    Credentials.prototype.get = function () {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    };\n    Credentials.prototype._pickupCredentials = function () {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            if (AWS.config &&\n                AWS.config.credentials &&\n                AWS.config.credentials instanceof AWS.Credentials) {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n            }\n            else {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n            }\n        }\n        else {\n            logger.debug('getting old cred promise');\n        }\n        return this._gettingCredPromise;\n    };\n    Credentials.prototype._keepAlive = function () {\n        logger.debug('checking if credentials exists and not expired');\n        var cred = this._credentials;\n        if (cred && !this._isExpired(cred)) {\n            logger.debug('credentials not changed and not expired, directly return');\n            return Promise.resolve(cred);\n        }\n        logger.debug('need to get a new credential or refresh the existing one');\n        if (Amplify.Auth &&\n            typeof Amplify.Auth.currentUserCredentials === 'function') {\n            return Amplify.Auth.currentUserCredentials();\n        }\n        else {\n            return Promise.reject('No Auth module registered in Amplify');\n        }\n    };\n    Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n        var _this = this;\n        logger.debug('Getting federated credentials');\n        var provider = federatedInfo.provider, user = federatedInfo.user;\n        var token = federatedInfo.token, expires_at = federatedInfo.expires_at, identity_id = federatedInfo.identity_id;\n        var that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({\n                provider: provider,\n                token: token,\n                user: user,\n                identity_id: identity_id,\n                expires_at: expires_at,\n            });\n        }\n        else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] &&\n                typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return that._refreshHandlers[provider]()\n                    .then(function (data) {\n                    logger.debug('refresh federated token sucessfully', data);\n                    token = data.token;\n                    identity_id = data.identity_id;\n                    expires_at = data.expires_at;\n                    return that._setCredentialsFromFederation({\n                        provider: provider,\n                        token: token,\n                        user: user,\n                        identity_id: identity_id,\n                        expires_at: expires_at,\n                    });\n                })\n                    .catch(function (e) {\n                    logger.debug('refresh federated token failed', e);\n                    _this.clear();\n                    return Promise.reject('refreshing federation token failed: ' + e);\n                });\n            }\n            else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    };\n    Credentials.prototype._isExpired = function (credentials) {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('is this credentials expired?', credentials);\n        var ts = new Date().getTime();\n        var delta = 10 * 60 * 1000; // 10 minutes\n        var expired = credentials.expired, expireTime = credentials.expireTime;\n        if (!expired &&\n            expireTime > ts + delta &&\n            ts < this._nextCredentialsRefresh) {\n            return false;\n        }\n        return true;\n    };\n    Credentials.prototype._setCredentialsForGuest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        attempted = false;\n                        logger.debug('setting credentials for guest');\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n                        if (mandatorySignIn) {\n                            return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n                        }\n                        if (!identityPoolId) {\n                            logger.debug('No Cognito Federated Identity pool provided');\n                            return [2 /*return*/, Promise.reject('No Cognito Federated Identity pool provided')];\n                        }\n                        identityId = undefined;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _b.sent();\n                        identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        logger.debug('Failed to get the cached identityId', e_1);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        credentials = new AWS.CognitoIdentityCredentials({\n                            IdentityPoolId: identityPoolId,\n                            IdentityId: identityId ? identityId : undefined,\n                        }, {\n                            region: region,\n                        });\n                        that = this;\n                        return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)\n                                .then(function (res) {\n                                return res;\n                            })\n                                .catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                var newCredentials;\n                                return __generator(this, function (_a) {\n                                    // If identity id is deleted in the console, we make one attempt to recreate it\n                                    // and remove existing id from cache.\n                                    if (e.code === 'ResourceNotFoundException' &&\n                                        e.message === \"Identity '\" + identityId + \"' not found.\" &&\n                                        !attempted) {\n                                        attempted = true;\n                                        logger.debug('Failed to load guest credentials');\n                                        this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                                        credentials.clearCachedId();\n                                        newCredentials = new AWS.CognitoIdentityCredentials({\n                                            IdentityPoolId: identityPoolId,\n                                            IdentityId: undefined,\n                                        }, {\n                                            region: region,\n                                        });\n                                        return [2 /*return*/, this._loadCredentials(newCredentials, 'guest', false, null)];\n                                    }\n                                    else {\n                                        return [2 /*return*/, e];\n                                    }\n                                    return [2 /*return*/];\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    Credentials.prototype._setCredentialsFromAWS = function () {\n        var credentials = AWS.config.credentials;\n        logger.debug('setting credentials from aws');\n        var that = this;\n        if (credentials instanceof AWS.Credentials) {\n            return Promise.resolve(credentials);\n        }\n        else {\n            logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n            return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n        }\n    };\n    Credentials.prototype._setCredentialsFromFederation = function (params) {\n        var provider = params.provider, token = params.token, identity_id = params.identity_id, user = params.user, expires_at = params.expires_at;\n        var domains = {\n            google: 'accounts.google.com',\n            facebook: 'graph.facebook.com',\n            amazon: 'www.amazon.com',\n            developer: 'cognito-identity.amazonaws.com',\n        };\n        // Use custom provider url instead of the predefined ones\n        var domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n        var logins = {};\n        logins[domain] = token;\n        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var credentials = new AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            IdentityId: identity_id,\n            Logins: logins,\n        }, {\n            region: region,\n        });\n        return this._loadCredentials(credentials, 'federated', true, params);\n    };\n    Credentials.prototype._setCredentialsFromSession = function (session) {\n        logger.debug('set credentials from session');\n        var idToken = session.getIdToken().getJwtToken();\n        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        var logins = {};\n        logins[key] = idToken;\n        var credentials = new AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            Logins: logins,\n        }, {\n            region: region,\n        });\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    };\n    Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n        var _this = this;\n        var that = this;\n        var identityPoolId = this._config.identityPoolId;\n        return new Promise(function (res, rej) {\n            credentials.get(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                var user, provider, token, expires_at, identity_id, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (err) {\n                                logger.debug('Failed to load credentials', credentials);\n                                rej(err);\n                                return [2 /*return*/];\n                            }\n                            logger.debug('Load credentials successfully', credentials);\n                            that._credentials = credentials;\n                            that._credentials.authenticated = authenticated;\n                            that._credentials_source = source;\n                            that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                            if (!(source === 'federated')) return [3 /*break*/, 3];\n                            user = Object.assign({ id: this._credentials.identityId }, info.user);\n                            provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                            try {\n                                this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                                    provider: provider,\n                                    token: token,\n                                    user: user,\n                                    expires_at: expires_at,\n                                    identity_id: identity_id,\n                                }));\n                            }\n                            catch (e) {\n                                logger.debug('Failed to put federated info into auth storage', e);\n                            }\n                            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, Amplify.Cache.setItem('federatedInfo', {\n                                    provider: provider,\n                                    token: token,\n                                    user: user,\n                                    expires_at: expires_at,\n                                    identity_id: identity_id,\n                                }, { priority: 1 })];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            logger.debug('No Cache module registered in Amplify');\n                            _a.label = 3;\n                        case 3:\n                            if (!(source === 'guest')) return [3 /*break*/, 7];\n                            _a.label = 4;\n                        case 4:\n                            _a.trys.push([4, 6, , 7]);\n                            return [4 /*yield*/, this._storageSync];\n                        case 5:\n                            _a.sent();\n                            this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n                            return [3 /*break*/, 7];\n                        case 6:\n                            e_2 = _a.sent();\n                            logger.debug('Failed to cache identityId', e_2);\n                            return [3 /*break*/, 7];\n                        case 7:\n                            res(that._credentials);\n                            return [2 /*return*/];\n                    }\n                });\n            }); });\n        });\n    };\n    Credentials.prototype.set = function (params, source) {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        }\n        else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        }\n        else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        }\n        else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    };\n    Credentials.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, identityPoolId, region, credentials;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n                        if (identityPoolId) {\n                            credentials = new AWS.CognitoIdentityCredentials({\n                                IdentityPoolId: identityPoolId,\n                            }, {\n                                region: region,\n                            });\n                            credentials.clearCachedId();\n                        }\n                        this._credentials = null;\n                        this._credentials_source = null;\n                        this._storage.removeItem('aws-amplify-federatedInfo');\n                        if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Amplify.Cache.removeItem('federatedInfo')];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        logger.debug('No Cache module registered in Amplify');\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    Credentials.prototype.shear = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated,\n        };\n    };\n    return Credentials;\n}());\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;\n//# sourceMappingURL=Credentials.js.map"]},"metadata":{},"sourceType":"module"}