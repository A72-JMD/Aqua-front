{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Hub, Credentials, Parser } from '@aws-amplify/core';\nimport * as S3 from 'aws-sdk/clients/s3';\nvar logger = new Logger('AWSS3Provider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchStorageEvent = function (track, event, attrs, metrics, message) {\n  if (track) {\n    Hub.dispatch('storage', {\n      event: event,\n      data: {\n        attrs: attrs,\n        metrics: metrics\n      },\n      message: message\n    }, 'Storage', AMPLIFY_SYMBOL);\n  }\n};\nvar localTestingStorageEndpoint = 'http://localhost:20005';\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    this._config = config ? config : {};\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  /**\n   * Get a presigned URL of the file or the object data when download:true\n   *\n   * @param {String} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public, download: true|false }\n   * @return - A promise resolves to Amazon S3 presigned URL on success\n   */\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, prefix, final_key, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n            if (download === true) {\n              return [2 /*return*/, new Promise(function (res, rej) {\n                s3.getObject(params, function (err, data) {\n                  if (err) {\n                    dispatchStorageEvent(track, 'download', {\n                      method: 'get',\n                      result: 'failed'\n                    }, null, \"Download failed with \" + err.message);\n                    rej(err);\n                  } else {\n                    dispatchStorageEvent(track, 'download', {\n                      method: 'get',\n                      result: 'success'\n                    }, {\n                      fileSize: Number(data.Body['length'])\n                    }, \"Download success for \" + key);\n                    res(data);\n                  }\n                });\n              })];\n            }\n            if (expires) {\n              params.Expires = expires;\n            }\n            return [2 /*return*/, new Promise(function (res, rej) {\n              try {\n                var url = s3.getSignedUrl('getObject', params);\n                dispatchStorageEvent(track, 'getSignedUrl', {\n                  method: 'get',\n                  result: 'success'\n                }, null, \"Signed URL: \" + url);\n                res(url);\n              } catch (e) {\n                logger.warn('get signed url error', e);\n                dispatchStorageEvent(track, 'getSignedUrl', {\n                  method: 'get',\n                  result: 'failed'\n                }, null, \"Could not get a signed URL for \" + key);\n                rej(e);\n              }\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param {String} key - key of the object\n   * @param {Object} object - File to be put in Amazon S3 bucket\n   * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n   *  progressCallback: function }\n   * @return - promise resolves to object on success\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, s3, params, upload, data, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback;\n            contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging;\n            serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            type = contentType ? contentType : 'binary/octet-stream';\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('put ' + key + ' to ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key,\n              Body: object,\n              ContentType: type\n            };\n            if (cacheControl) {\n              params.CacheControl = cacheControl;\n            }\n            if (contentDisposition) {\n              params.ContentDisposition = contentDisposition;\n            }\n            if (expires) {\n              params.Expires = expires;\n            }\n            if (metadata) {\n              params.Metadata = metadata;\n            }\n            if (tagging) {\n              params.Tagging = tagging;\n            }\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n              if (SSECustomerAlgorithm) {\n                params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n              }\n              if (SSECustomerKey) {\n                params.SSECustomerKey = SSECustomerKey;\n              }\n              if (SSECustomerKeyMD5) {\n                params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n              }\n              if (SSEKMSKeyId) {\n                params.SSEKMSKeyId = SSEKMSKeyId;\n              }\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            upload = s3.upload(params).on('httpUploadProgress', function (progress) {\n              if (progressCallback) {\n                if (typeof progressCallback === 'function') {\n                  progressCallback(progress);\n                } else {\n                  logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n                }\n              }\n            });\n            return [4 /*yield*/, upload.promise()];\n          case 3:\n            data = _a.sent();\n            logger.debug('upload result', data);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'success'\n            }, null, \"Upload success for \" + key);\n            return [2 /*return*/, {\n              key: data.Key.substr(prefix.length)\n            }];\n          case 4:\n            e_1 = _a.sent();\n            logger.warn('error uploading', e_1);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'failed'\n            }, null, \"Error uploading \" + key);\n            throw e_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Remove the object for specified key\n   * @param {String} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            return [2 /*return*/, new Promise(function (res, rej) {\n              s3.deleteObject(params, function (err, data) {\n                if (err) {\n                  dispatchStorageEvent(track, 'delete', {\n                    method: 'remove',\n                    result: 'failed'\n                  }, null, \"Deletion of \" + key + \" failed with \" + err);\n                  rej(err);\n                } else {\n                  dispatchStorageEvent(track, 'delete', {\n                    method: 'remove',\n                    result: 'success'\n                  }, null, \"Deleted \" + key + \" successfully\");\n                  res(data);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {String} path - the path that contains objects\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves to list of keys for all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            s3 = this._createS3(opt);\n            logger.debug('list ' + path + ' from ' + final_path);\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: maxKeys\n            };\n            return [2 /*return*/, new Promise(function (res, rej) {\n              s3.listObjects(params, function (err, data) {\n                if (err) {\n                  logger.warn('list error', err);\n                  dispatchStorageEvent(track, 'list', {\n                    method: 'list',\n                    result: 'failed'\n                  }, null, \"Listing items failed: \" + err.message);\n                  rej(err);\n                } else {\n                  var list = data.Contents.map(function (item) {\n                    return {\n                      key: item.Key.substr(prefix.length),\n                      eTag: item.ETag,\n                      lastModified: item.LastModified,\n                      size: item.Size\n                    };\n                  });\n                  dispatchStorageEvent(track, 'list', {\n                    method: 'list',\n                    result: 'success'\n                  }, null, list.length + \" items returned from list operation\");\n                  logger.debug('list', list);\n                  res(list);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    var _this = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      _this._config.credentials = cred;\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._createS3 = function (config) {\n    var bucket = config.bucket,\n      region = config.region,\n      credentials = config.credentials,\n      dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n    var localTestingConfig = {};\n    if (dangerouslyConnectToHttpEndpointForTesting) {\n      localTestingConfig = {\n        endpoint: localTestingStorageEndpoint,\n        s3BucketEndpoint: true,\n        s3ForcePathStyle: true\n      };\n    }\n    return new S3(__assign({\n      apiVersion: '2006-03-01',\n      params: {\n        Bucket: bucket\n      },\n      signatureVersion: 'v4',\n      region: region,\n      credentials: credentials\n    }, localTestingConfig));\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\nexport default AWSS3Provider;","map":{"version":3,"sources":["../../src/Providers/AWSS3Provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Hub, Credentials, Parser, } from '@aws-amplify/core';\nimport * as S3 from 'aws-sdk/clients/s3';\nvar logger = new Logger('AWSS3Provider');\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\n    typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchStorageEvent = function (track, event, attrs, metrics, message) {\n    if (track) {\n        Hub.dispatch('storage', {\n            event: event,\n            data: { attrs: attrs, metrics: metrics },\n            message: message,\n        }, 'Storage', AMPLIFY_SYMBOL);\n    }\n};\nvar localTestingStorageEndpoint = 'http://localhost:20005';\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */ (function () {\n    /**\n     * Initialize Storage with AWS configurations\n     * @param {Object} config - Configuration object for storage\n     */\n    function AWSS3Provider(config) {\n        this._config = config ? config : {};\n        logger.debug('Storage Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     */\n    AWSS3Provider.prototype.getCategory = function () {\n        return AWSS3Provider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AWSS3Provider.prototype.getProviderName = function () {\n        return AWSS3Provider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Storage part with aws configuration\n     * @param {Object} config - Configuration of the Storage\n     * @return {Object} - Current configuration\n     */\n    AWSS3Provider.prototype.configure = function (config) {\n        logger.debug('configure Storage', config);\n        if (!config)\n            return this._config;\n        var amplifyConfig = Parser.parseMobilehubConfig(config);\n        this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n        if (!this._config.bucket) {\n            logger.debug('Do not have bucket yet');\n        }\n        return this._config;\n    };\n    /**\n     * Get a presigned URL of the file or the object data when download:true\n     *\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public, download: true|false }\n     * @return - A promise resolves to Amazon S3 presigned URL on success\n     */\n    AWSS3Provider.prototype.get = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, prefix, final_key, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track;\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('get ' + key + ' from ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key,\n                        };\n                        // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n                        if (cacheControl)\n                            params.ResponseCacheControl = cacheControl;\n                        if (contentDisposition)\n                            params.ResponseContentDisposition = contentDisposition;\n                        if (contentEncoding)\n                            params.ResponseContentEncoding = contentEncoding;\n                        if (contentLanguage)\n                            params.ResponseContentLanguage = contentLanguage;\n                        if (contentType)\n                            params.ResponseContentType = contentType;\n                        if (download === true) {\n                            return [2 /*return*/, new Promise(function (res, rej) {\n                                    s3.getObject(params, function (err, data) {\n                                        if (err) {\n                                            dispatchStorageEvent(track, 'download', {\n                                                method: 'get',\n                                                result: 'failed',\n                                            }, null, \"Download failed with \" + err.message);\n                                            rej(err);\n                                        }\n                                        else {\n                                            dispatchStorageEvent(track, 'download', { method: 'get', result: 'success' }, { fileSize: Number(data.Body['length']) }, \"Download success for \" + key);\n                                            res(data);\n                                        }\n                                    });\n                                })];\n                        }\n                        if (expires) {\n                            params.Expires = expires;\n                        }\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                try {\n                                    var url = s3.getSignedUrl('getObject', params);\n                                    dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'success' }, null, \"Signed URL: \" + url);\n                                    res(url);\n                                }\n                                catch (e) {\n                                    logger.warn('get signed url error', e);\n                                    dispatchStorageEvent(track, 'getSignedUrl', { method: 'get', result: 'failed' }, null, \"Could not get a signed URL for \" + key);\n                                    rej(e);\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Put a file in S3 bucket specified to configure method\n     * @param {String} key - key of the object\n     * @param {Object} object - File to be put in Amazon S3 bucket\n     * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n     *  progressCallback: function }\n     * @return - promise resolves to object on success\n     */\n    AWSS3Provider.prototype.put = function (key, object, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, s3, params, upload, data, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback;\n                        contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging;\n                        serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n                        type = contentType ? contentType : 'binary/octet-stream';\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('put ' + key + ' to ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key,\n                            Body: object,\n                            ContentType: type,\n                        };\n                        if (cacheControl) {\n                            params.CacheControl = cacheControl;\n                        }\n                        if (contentDisposition) {\n                            params.ContentDisposition = contentDisposition;\n                        }\n                        if (expires) {\n                            params.Expires = expires;\n                        }\n                        if (metadata) {\n                            params.Metadata = metadata;\n                        }\n                        if (tagging) {\n                            params.Tagging = tagging;\n                        }\n                        if (serverSideEncryption) {\n                            params.ServerSideEncryption = serverSideEncryption;\n                            if (SSECustomerAlgorithm) {\n                                params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n                            }\n                            if (SSECustomerKey) {\n                                params.SSECustomerKey = SSECustomerKey;\n                            }\n                            if (SSECustomerKeyMD5) {\n                                params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n                            }\n                            if (SSEKMSKeyId) {\n                                params.SSEKMSKeyId = SSEKMSKeyId;\n                            }\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        upload = s3.upload(params).on('httpUploadProgress', function (progress) {\n                            if (progressCallback) {\n                                if (typeof progressCallback === 'function') {\n                                    progressCallback(progress);\n                                }\n                                else {\n                                    logger.warn('progressCallback should be a function, not a ' +\n                                        typeof progressCallback);\n                                }\n                            }\n                        });\n                        return [4 /*yield*/, upload.promise()];\n                    case 3:\n                        data = _a.sent();\n                        logger.debug('upload result', data);\n                        dispatchStorageEvent(track, 'upload', { method: 'put', result: 'success' }, null, \"Upload success for \" + key);\n                        return [2 /*return*/, {\n                                key: data.Key.substr(prefix.length),\n                            }];\n                    case 4:\n                        e_1 = _a.sent();\n                        logger.warn('error uploading', e_1);\n                        dispatchStorageEvent(track, 'upload', { method: 'put', result: 'failed' }, null, \"Error uploading \" + key);\n                        throw e_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Remove the object for specified key\n     * @param {String} key - key of the object\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves upon successful removal of the object\n     */\n    AWSS3Provider.prototype.remove = function (key, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, track, prefix, final_key, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, track = opt.track;\n                        prefix = this._prefix(opt);\n                        final_key = prefix + key;\n                        s3 = this._createS3(opt);\n                        logger.debug('remove ' + key + ' from ' + final_key);\n                        params = {\n                            Bucket: bucket,\n                            Key: final_key,\n                        };\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                s3.deleteObject(params, function (err, data) {\n                                    if (err) {\n                                        dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'failed' }, null, \"Deletion of \" + key + \" failed with \" + err);\n                                        rej(err);\n                                    }\n                                    else {\n                                        dispatchStorageEvent(track, 'delete', { method: 'remove', result: 'success' }, null, \"Deleted \" + key + \" successfully\");\n                                        res(data);\n                                    }\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * List bucket objects relative to the level and prefix specified\n     * @param {String} path - the path that contains objects\n     * @param {Object} [config] - { level : private|protected|public }\n     * @return - Promise resolves to list of keys for all objects in path\n     */\n    AWSS3Provider.prototype.list = function (path, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        opt = Object.assign({}, this._config, config);\n                        bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n                        prefix = this._prefix(opt);\n                        final_path = prefix + path;\n                        s3 = this._createS3(opt);\n                        logger.debug('list ' + path + ' from ' + final_path);\n                        params = {\n                            Bucket: bucket,\n                            Prefix: final_path,\n                            MaxKeys: maxKeys,\n                        };\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                s3.listObjects(params, function (err, data) {\n                                    if (err) {\n                                        logger.warn('list error', err);\n                                        dispatchStorageEvent(track, 'list', { method: 'list', result: 'failed' }, null, \"Listing items failed: \" + err.message);\n                                        rej(err);\n                                    }\n                                    else {\n                                        var list = data.Contents.map(function (item) {\n                                            return {\n                                                key: item.Key.substr(prefix.length),\n                                                eTag: item.ETag,\n                                                lastModified: item.LastModified,\n                                                size: item.Size,\n                                            };\n                                        });\n                                        dispatchStorageEvent(track, 'list', { method: 'list', result: 'success' }, null, list.length + \" items returned from list operation\");\n                                        logger.debug('list', list);\n                                        res(list);\n                                    }\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._ensureCredentials = function () {\n        var _this = this;\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            _this._config.credentials = cred;\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._prefix = function (config) {\n        var credentials = config.credentials, level = config.level;\n        var customPrefix = config.customPrefix || {};\n        var identityId = config.identityId || credentials.identityId;\n        var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n            identityId +\n            '/';\n        var protectedPath = (customPrefix.protected !== undefined\n            ? customPrefix.protected\n            : 'protected/') +\n            identityId +\n            '/';\n        var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n        switch (level) {\n            case 'private':\n                return privatePath;\n            case 'protected':\n                return protectedPath;\n            default:\n                return publicPath;\n        }\n    };\n    /**\n     * @private\n     */\n    AWSS3Provider.prototype._createS3 = function (config) {\n        var bucket = config.bucket, region = config.region, credentials = config.credentials, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n        var localTestingConfig = {};\n        if (dangerouslyConnectToHttpEndpointForTesting) {\n            localTestingConfig = {\n                endpoint: localTestingStorageEndpoint,\n                s3BucketEndpoint: true,\n                s3ForcePathStyle: true,\n            };\n        }\n        return new S3(__assign({ apiVersion: '2006-03-01', params: { Bucket: bucket }, signatureVersion: 'v4', region: region,\n            credentials: credentials }, localTestingConfig));\n    };\n    AWSS3Provider.CATEGORY = 'Storage';\n    AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n    return AWSS3Provider;\n}());\nexport default AWSS3Provider;\n//# sourceMappingURL=AWSS3Provider.js.map"]},"metadata":{},"sourceType":"module"}