{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Observable from 'zen-observable';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '@aws-amplify/pubsub';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    return _this;\n  }\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        });\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 4];\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 4];\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 4:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, subscriptionState, data, dataString, headerObj, _c, _d, subscriptionMessage, stringToAWSRealTime, err_2, _e, message, subscriptionFailedCallback_1, _f, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _g;\n      var _this = this;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () {\n              return {};\n            } : _b;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query,\n              variables: variables,\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: null\n            });\n            dataString = JSON.stringify(data);\n            _c = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region\n            })];\n          case 1:\n            _d = [__assign.apply(void 0, _c.concat([_h.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), (_g = {}, _g[USER_AGENT_HEADER] = Constants.userAgent, _g)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _h.label = 3;\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region\n            })];\n          case 4:\n            _h.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _h.sent();\n            logger.debug({\n              err: err_2\n            });\n            _e = err_2.message, message = _e === void 0 ? '' : _e;\n            observer.error({\n              errors: [__assign({}, new GraphQLError(\"Connection failed: \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n            return [2 /*return*/];\n          case 6:\n            _f = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _f.subscriptionFailedCallback, subscriptionReadyCallback = _f.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            this.awsRealTimeSocket.send(stringToAWSRealTime);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;\n        // This in case unsubscribe is invoked before sending start subscription message\n        if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n          return [2 /*return*/, new Promise(function (res, rej) {\n            var _a = _this.subscriptionObserverMap.get(subscriptionId),\n              observer = _a.observer,\n              subscriptionState = _a.subscriptionState,\n              variables = _a.variables,\n              query = _a.query;\n            _this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: res,\n              subscriptionFailedCallback: rej\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      clearTimeout(this.keepAliveTimeoutId);\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = undefined;\n      tempSocket.onerror = undefined;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = null;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(message.data),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      clearTimeout(startAckTimeoutId);\n      dispatchApiEvent('connected', {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: null,\n        subscriptionState: subscriptionState,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback\n      });\n      // TODO: emit event on hub but it requires to store the id first\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      clearTimeout(this.keepAliveTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: startAckTimeoutId,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback,\n        subscriptionState: subscriptionState\n      });\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Connection failed: \" + JSON.stringify(payload)))]\n      });\n      clearTimeout(startAckTimeoutId);\n      observer.complete();\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n      if (!observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n    if (this.awsRealTimeSocket) {\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var _a = this.subscriptionObserverMap.get(subscriptionId) || {},\n      observer = _a.observer,\n      query = _a.query,\n      variables = _a.variables;\n    if (!observer) {\n      return;\n    }\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer: observer,\n      query: query,\n      variables: variables,\n      subscriptionState: SUBSCRIPTION_STATUS.FAILED\n    });\n    if (observer && !observer.closed) {\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n          query: query,\n          variables: variables\n        })))]\n      });\n      // Cleanup will be automatically executed\n      observer.complete();\n    }\n    logger.debug('timeoutStartSubscription', JSON.stringify({\n      query: query,\n      variables: variables\n    }));\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              discoverableEndpoint = appSyncGraphqlEndpoint.replace('https://', 'wss://').replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region\n              })];\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake({\n                awsRealTimeUrl: awsRealTimeUrl\n              })];\n            case 3:\n              _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = null;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{\n              awsRealTimeUrl: awsRealTimeUrl\n            }], MAX_DELAY_MS)];\n          case 1:\n            _b.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var ackOk = false;\n                _this.awsRealTimeSocket.onerror = function (error) {\n                  logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                };\n                _this.awsRealTimeSocket.onclose = function (event) {\n                  logger.debug(\"WebSocket closed \" + event.reason);\n                  rej(new Error(JSON.stringify(event)));\n                };\n                _this.awsRealTimeSocket.onmessage = function (message) {\n                  logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                  var data = JSON.parse(message.data);\n                  var type = data.type,\n                    _a = data.payload,\n                    _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                    connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                    ackOk = true;\n                    _this.keepAliveTimeout = connectionTimeoutMs;\n                    _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                    _this.awsRealTimeSocket.onerror = function (err) {\n                      logger.debug(err);\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n                    res('Cool, connected to AWS AppSyncRealTime');\n                    return;\n                  }\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                    var _c = data.payload,\n                      _d = (_c === void 0 ? {} : _c).errors,\n                      _e = (_d === void 0 ? [] : _d)[0],\n                      _f = _e === void 0 ? {} : _e,\n                      _g = _f.errorType,\n                      errorType = _g === void 0 ? '' : _g,\n                      _h = _f.errorCode,\n                      errorCode = _h === void 0 ? 0 : _h;\n                    rej({\n                      errorType: errorType,\n                      errorCode: errorCode\n                    });\n                  }\n                };\n                var gqlInit = {\n                  type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                };\n                _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                function checkAckOk() {\n                  if (!ackOk) {\n                    rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                  }\n                }\n                setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            errorType = err_4.errorType, errorCode = err_4.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this)\n            };\n            handler = headerHandler[authenticationType];\n            if (typeof handler !== 'function') {\n              logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n              return [2 /*return*/, ''];\n            }\n            host = url.parse(appSyncGraphqlEndpoint).host;\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host\n            })];\n          case 1:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo || !federatedInfo.token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: federatedInfo.token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              return {\n                secret_key: credentials.secretAccessKey,\n                access_key: credentials.accessKeyId,\n                session_token: credentials.sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"sources":["../../src/Providers/AWSAppSyncRealTimeProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Observable from 'zen-observable';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '@aws-amplify/pubsub';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\n    typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchApiEvent = function (event, data, message) {\n    Hub.dispatch('api', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n    /**\n     * Client -> Server message.\n     * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n    /**\n     * Server -> Client message\n     * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n    /**\n     * Client -> Server message.\n     * This message type is for register subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n     */\n    MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n    /**\n     * Server -> Client message.\n     * This message type is for subscription message from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n    /**\n     * Server -> Client message.\n     * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n    /**\n     * Client -> Server message.\n     * This message type is for unregister subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n     */\n    MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n    /**\n     * Server -> Client message.\n     * This message type is for sending error messages from AWS AppSync RealTime to the client\n     */\n    MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n    SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n    SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n    SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n    accept: 'application/json, text/javascript',\n    'content-encoding': 'amz-1.0',\n    'content-type': 'application/json; charset=UTF-8',\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\nvar AWSAppSyncRealTimeProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncRealTimeProvider, _super);\n    function AWSAppSyncRealTimeProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.socketStatus = SOCKET_STATUS.CLOSED;\n        _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n        _this.subscriptionObserverMap = new Map();\n        _this.promiseArray = [];\n        return _this;\n    }\n    AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncRealTimeProvider';\n    };\n    AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n        throw new Error('Not used here');\n    };\n    AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n        return new Observable(function (observer) {\n            if (!appSyncGraphqlEndpoint) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\")),\n                    ],\n                });\n                observer.complete();\n            }\n            else {\n                var subscriptionId_1 = uuid();\n                _this._startSubscriptionWithAWSAppSyncRealTime({\n                    options: options,\n                    observer: observer,\n                    subscriptionId: subscriptionId_1,\n                });\n                return function () { return __awaiter(_this, void 0, void 0, function () {\n                    var subscriptionState, err_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, 3, 4]);\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                            case 1:\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                _a.sent();\n                                subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                                if (!subscriptionState) {\n                                    // subscription already unsubscribed\n                                    return [2 /*return*/];\n                                }\n                                if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                                }\n                                else {\n                                    throw new Error('Subscription never connected');\n                                }\n                                return [3 /*break*/, 4];\n                            case 2:\n                                err_1 = _a.sent();\n                                logger.debug(\"Error while unsubscribing \" + err_1);\n                                return [3 /*break*/, 4];\n                            case 3:\n                                this._removeSubscriptionObserver(subscriptionId_1);\n                                return [7 /*endfinally*/];\n                            case 4: return [2 /*return*/];\n                        }\n                    });\n                }); };\n            }\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n        var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;\n        return __awaiter(this, void 0, void 0, function () {\n            var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, subscriptionState, data, dataString, headerObj, _c, _d, subscriptionMessage, stringToAWSRealTime, err_2, _e, message, subscriptionFailedCallback_1, _f, subscriptionFailedCallback, subscriptionReadyCallback;\n            var _g;\n            var _this = this;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () { return ({}); } : _b;\n                        subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n                        data = {\n                            query: query,\n                            variables: variables,\n                        };\n                        // Having a subscription id map will make it simple to forward messages received\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            query: query,\n                            variables: variables,\n                            subscriptionState: subscriptionState,\n                            startAckTimeoutId: null,\n                        });\n                        dataString = JSON.stringify(data);\n                        _c = [{}];\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                payload: dataString,\n                                canonicalUri: '',\n                                region: region,\n                            })];\n                    case 1:\n                        _d = [__assign.apply(void 0, _c.concat([(_h.sent())]))];\n                        return [4 /*yield*/, graphql_headers()];\n                    case 2:\n                        headerObj = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), (_g = {}, _g[USER_AGENT_HEADER] = Constants.userAgent, _g)]);\n                        subscriptionMessage = {\n                            id: subscriptionId,\n                            payload: {\n                                data: dataString,\n                                extensions: {\n                                    authorization: __assign({}, headerObj),\n                                },\n                            },\n                            type: MESSAGE_TYPES.GQL_START,\n                        };\n                        stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n                        _h.label = 3;\n                    case 3:\n                        _h.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this._initializeWebSocketConnection({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                region: region,\n                            })];\n                    case 4:\n                        _h.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_2 = _h.sent();\n                        logger.debug({ err: err_2 });\n                        _e = err_2.message, message = _e === void 0 ? '' : _e;\n                        observer.error({\n                            errors: [\n                                __assign({}, new GraphQLError(\"Connection failed: \" + message)),\n                            ],\n                        });\n                        observer.complete();\n                        subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n                        // Notify concurrent unsubscription\n                        if (typeof subscriptionFailedCallback_1 === 'function') {\n                            subscriptionFailedCallback_1();\n                        }\n                        return [2 /*return*/];\n                    case 6:\n                        _f = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _f.subscriptionFailedCallback, subscriptionReadyCallback = _f.subscriptionReadyCallback;\n                        // This must be done before sending the message in order to be listening immediately\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            subscriptionState: subscriptionState,\n                            variables: variables,\n                            query: query,\n                            subscriptionReadyCallback: subscriptionReadyCallback,\n                            subscriptionFailedCallback: subscriptionFailedCallback,\n                            startAckTimeoutId: setTimeout(function () {\n                                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n                            }, START_ACK_TIMEOUT),\n                        });\n                        this.awsRealTimeSocket.send(stringToAWSRealTime);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Waiting that subscription has been connected before trying to unsubscribe\n    AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscriptionState;\n            var _this = this;\n            return __generator(this, function (_a) {\n                subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;\n                // This in case unsubscribe is invoked before sending start subscription message\n                if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n                    return [2 /*return*/, new Promise(function (res, rej) {\n                            var _a = _this.subscriptionObserverMap.get(subscriptionId), observer = _a.observer, subscriptionState = _a.subscriptionState, variables = _a.variables, query = _a.query;\n                            _this.subscriptionObserverMap.set(subscriptionId, {\n                                observer: observer,\n                                subscriptionState: subscriptionState,\n                                variables: variables,\n                                query: query,\n                                subscriptionReadyCallback: res,\n                                subscriptionFailedCallback: rej,\n                            });\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n        try {\n            if (this.awsRealTimeSocket &&\n                this.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n                this.socketStatus === SOCKET_STATUS.READY) {\n                // Preparing unsubscribe message to stop receiving messages for that subscription\n                var unsubscribeMessage = {\n                    id: subscriptionId,\n                    type: MESSAGE_TYPES.GQL_STOP,\n                };\n                var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n                this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n        }\n        catch (err) {\n            // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n            logger.debug({ err: err });\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n        this.subscriptionObserverMap.delete(subscriptionId);\n        // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n        setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    };\n    AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n        if (this.subscriptionObserverMap.size > 0) {\n            // Active subscriptions on the WebSocket\n            return;\n        }\n        if (!this.awsRealTimeSocket) {\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            return;\n        }\n        if (this.awsRealTimeSocket.bufferedAmount > 0) {\n            // Still data on the WebSocket\n            setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n        }\n        else {\n            logger.debug('closing WebSocket...');\n            clearTimeout(this.keepAliveTimeoutId);\n            var tempSocket = this.awsRealTimeSocket;\n            // Cleaning callbacks to avoid race condition, socket still exists\n            tempSocket.onclose = undefined;\n            tempSocket.onerror = undefined;\n            tempSocket.close(1000);\n            this.awsRealTimeSocket = null;\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n        logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n        var _a = JSON.parse(message.data), _b = _a.id, id = _b === void 0 ? '' : _b, payload = _a.payload, type = _a.type;\n        var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? '' : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;\n        logger.debug({ id: id, observer: observer, query: query, variables: variables });\n        if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                logger.debug(\"observer not found for id: \" + id);\n            }\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_START_ACK) {\n            logger.debug(\"subscription ready for \" + JSON.stringify({ query: query, variables: variables }));\n            if (typeof subscriptionReadyCallback === 'function') {\n                subscriptionReadyCallback();\n            }\n            clearTimeout(startAckTimeoutId);\n            dispatchApiEvent('connected', { query: query, variables: variables }, 'Connection established for subscription');\n            var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n            this.subscriptionObserverMap.set(id, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                startAckTimeoutId: null,\n                subscriptionState: subscriptionState,\n                subscriptionReadyCallback: subscriptionReadyCallback,\n                subscriptionFailedCallback: subscriptionFailedCallback,\n            });\n            // TODO: emit event on hub but it requires to store the id first\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n            clearTimeout(this.keepAliveTimeoutId);\n            this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_ERROR) {\n            var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n            this.subscriptionObserverMap.set(id, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                startAckTimeoutId: startAckTimeoutId,\n                subscriptionReadyCallback: subscriptionReadyCallback,\n                subscriptionFailedCallback: subscriptionFailedCallback,\n                subscriptionState: subscriptionState,\n            });\n            observer.error({\n                errors: [\n                    __assign({}, new GraphQLError(\"Connection failed: \" + JSON.stringify(payload))),\n                ],\n            });\n            clearTimeout(startAckTimeoutId);\n            observer.complete();\n            if (typeof subscriptionFailedCallback === 'function') {\n                subscriptionFailedCallback();\n            }\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n        logger.debug(\"Disconnect error: \" + msg);\n        this.subscriptionObserverMap.forEach(function (_a) {\n            var observer = _a.observer;\n            if (!observer.closed) {\n                observer.error({\n                    errors: [__assign({}, new GraphQLError(msg))],\n                });\n            }\n        });\n        this.subscriptionObserverMap.clear();\n        if (this.awsRealTimeSocket) {\n            this.awsRealTimeSocket.close();\n        }\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n    };\n    AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n        var _a = this.subscriptionObserverMap.get(subscriptionId) || {}, observer = _a.observer, query = _a.query, variables = _a.variables;\n        if (!observer) {\n            return;\n        }\n        this.subscriptionObserverMap.set(subscriptionId, {\n            observer: observer,\n            query: query,\n            variables: variables,\n            subscriptionState: SUBSCRIPTION_STATUS.FAILED,\n        });\n        if (observer && !observer.closed) {\n            observer.error({\n                errors: [\n                    __assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({ query: query, variables: variables }))),\n                ],\n            });\n            // Cleanup will be automatically executed\n            observer.complete();\n        }\n        logger.debug('timeoutStartSubscription', JSON.stringify({ query: query, variables: variables }));\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region;\n        if (this.socketStatus === SOCKET_STATUS.READY) {\n            return;\n        }\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this.promiseArray.push({ res: res, rej: rej });\n                        if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 4, , 5]);\n                        this.socketStatus = SOCKET_STATUS.CONNECTING;\n                        discoverableEndpoint = appSyncGraphqlEndpoint\n                            .replace('https://', 'wss://')\n                            .replace('appsync-api', 'appsync-realtime-api')\n                            .replace('gogi-beta', 'grt-beta');\n                        payloadString = '{}';\n                        _b = (_a = JSON).stringify;\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                authenticationType: authenticationType,\n                                payload: payloadString,\n                                canonicalUri: '/connect',\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                region: region,\n                            })];\n                    case 2:\n                        headerString = _b.apply(_a, [_c.sent()]);\n                        headerQs = Buffer.from(headerString).toString('base64');\n                        payloadQs = Buffer.from(payloadString).toString('base64');\n                        awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n                        return [4 /*yield*/, this._initializeRetryableHandshake({ awsRealTimeUrl: awsRealTimeUrl })];\n                    case 3:\n                        _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var res = _a.res;\n                            logger.debug('Notifying connection successful');\n                            res();\n                        });\n                        this.socketStatus = SOCKET_STATUS.READY;\n                        this.promiseArray = [];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_3 = _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var rej = _a.rej;\n                            return rej(err_3);\n                        });\n                        this.promiseArray = [];\n                        if (this.awsRealTimeSocket &&\n                            this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                            this.awsRealTimeSocket.close(3001);\n                        }\n                        this.awsRealTimeSocket = null;\n                        this.socketStatus = SOCKET_STATUS.CLOSED;\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n        var awsRealTimeUrl = _a.awsRealTimeUrl;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializaling retryable Handshake\");\n                        return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{ awsRealTimeUrl: awsRealTimeUrl }], MAX_DELAY_MS)];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n        var awsRealTimeUrl = _a.awsRealTimeUrl;\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4, errorType, errorCode;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n                                    newSocket.onerror = function () {\n                                        logger.debug(\"WebSocket connection error\");\n                                    };\n                                    newSocket.onclose = function () {\n                                        rej(new Error('Connection handshake error'));\n                                    };\n                                    newSocket.onopen = function () {\n                                        _this.awsRealTimeSocket = newSocket;\n                                        return res();\n                                    };\n                                });\n                            })()];\n                    case 2:\n                        _b.sent();\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var ackOk = false;\n                                    _this.awsRealTimeSocket.onerror = function (error) {\n                                        logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                                    };\n                                    _this.awsRealTimeSocket.onclose = function (event) {\n                                        logger.debug(\"WebSocket closed \" + event.reason);\n                                        rej(new Error(JSON.stringify(event)));\n                                    };\n                                    _this.awsRealTimeSocket.onmessage = function (message) {\n                                        logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                                        var data = JSON.parse(message.data);\n                                        var type = data.type, _a = data.payload, _b = (_a === void 0 ? {} : _a).connectionTimeoutMs, connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                                        if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                                            ackOk = true;\n                                            _this.keepAliveTimeout = connectionTimeoutMs;\n                                            _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                                            _this.awsRealTimeSocket.onerror = function (err) {\n                                                logger.debug(err);\n                                                _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                            };\n                                            res('Cool, connected to AWS AppSyncRealTime');\n                                            return;\n                                        }\n                                        if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                                            var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = (_d === void 0 ? [] : _d)[0], _f = _e === void 0 ? {} : _e, _g = _f.errorType, errorType = _g === void 0 ? '' : _g, _h = _f.errorCode, errorCode = _h === void 0 ? 0 : _h;\n                                            rej({ errorType: errorType, errorCode: errorCode });\n                                        }\n                                    };\n                                    var gqlInit = {\n                                        type: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n                                    };\n                                    _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                                    function checkAckOk() {\n                                        if (!ackOk) {\n                                            rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                                        }\n                                    }\n                                    setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n                                });\n                            })()];\n                    case 3:\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_4 = _b.sent();\n                        errorType = err_4.errorType, errorCode = err_4.errorCode;\n                        if (NON_RETRYABLE_CODES.includes(errorCode)) {\n                            throw new NonRetryableError(errorType);\n                        }\n                        else if (errorType) {\n                            throw new Error(errorType);\n                        }\n                        else {\n                            throw err_4;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n        var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var headerHandler, handler, host, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        headerHandler = {\n                            API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n                            AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n                            OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n                            AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n                        };\n                        handler = headerHandler[authenticationType];\n                        if (typeof handler !== 'function') {\n                            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n                            return [2 /*return*/, ''];\n                        }\n                        host = url.parse(appSyncGraphqlEndpoint).host;\n                        return [4 /*yield*/, handler({\n                                payload: payload,\n                                canonicalUri: canonicalUri,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                apiKey: apiKey,\n                                region: region,\n                                host: host,\n                            })];\n                    case 1:\n                        result = _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var session;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Auth.currentSession()];\n                    case 1:\n                        session = _b.sent();\n                        return [2 /*return*/, {\n                                Authorization: session.getAccessToken().getJwtToken(),\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var federatedInfo;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem('federatedInfo')];\n                    case 1:\n                        federatedInfo = _b.sent();\n                        if (!federatedInfo || !federatedInfo.token) {\n                            throw new Error('No federated jwt');\n                        }\n                        return [2 /*return*/, {\n                                Authorization: federatedInfo.token,\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n        var apiKey = _a.apiKey, host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var dt, dtStr;\n            return __generator(this, function (_b) {\n                dt = new Date();\n                dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n                return [2 /*return*/, {\n                        host: host,\n                        'x-amz-date': dtStr,\n                        'x-api-key': apiKey,\n                    }];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n        var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointInfo, credentialsOK, creds, request, signed_params;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        endpointInfo = {\n                            region: region,\n                            service: 'appsync',\n                        };\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _b.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        return [4 /*yield*/, Credentials.get().then(function (credentials) { return ({\n                                secret_key: credentials.secretAccessKey,\n                                access_key: credentials.accessKeyId,\n                                session_token: credentials.sessionToken,\n                            }); })];\n                    case 2:\n                        creds = _b.sent();\n                        request = {\n                            url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n                            data: payload,\n                            method: 'POST',\n                            headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS),\n                        };\n                        signed_params = Signer.sign(request, creds, endpointInfo);\n                        return [2 /*return*/, signed_params.headers];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider));\nexport { AWSAppSyncRealTimeProvider };\n//# sourceMappingURL=AWSAppSyncRealTimeProvider.js.map"]},"metadata":{},"sourceType":"module"}