{"ast":null,"code":"import { a as wrap, b as addTraps } from './chunk.js';\nexport { e as unwrap, a as wrap } from './chunk.js';\n\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\nfunction openDB(name, version) {\n  let {\n    blocked,\n    upgrade,\n    blocking\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const request = indexedDB.open(name, version);\n  const openPromise = wrap(request);\n  if (upgrade) {\n    request.addEventListener('upgradeneeded', event => {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n    });\n  }\n  if (blocked) request.addEventListener('blocked', () => blocked());\n  if (blocking) openPromise.then(db => db.addEventListener('versionchange', blocking));\n  return openPromise;\n}\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\nfunction deleteDB(name) {\n  let {\n    blocked\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const request = indexedDB.deleteDatabase(name);\n  if (blocked) request.addEventListener('blocked', () => blocked());\n  return wrap(request).then(() => undefined);\n}\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) return;\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  const targetFuncName = prop.replace(/FromIndex$/, '');\n  const useIndex = prop !== targetFuncName;\n  const isWrite = writeMethods.includes(targetFuncName);\n  if (\n  // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) return;\n  const method = async function (storeName) {\n    // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n    const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n    let target = tx.store;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (useIndex) target = target.index(args.shift());\n    const returnVal = target[targetFuncName](...args);\n    if (isWrite) await tx.done;\n    return returnVal;\n  };\n  cachedMethods.set(prop, method);\n  return method;\n}\naddTraps(oldTraps => ({\n  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)\n}));\nexport { openDB, deleteDB };","map":{"version":3,"names":["a","wrap","b","addTraps","e","unwrap","openDB","name","version","blocked","upgrade","blocking","arguments","length","undefined","request","indexedDB","open","openPromise","addEventListener","event","result","oldVersion","newVersion","transaction","then","db","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","Map","getMethod","target","prop","IDBDatabase","get","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","method","storeName","tx","store","_len","args","Array","_key","index","shift","returnVal","done","set","oldTraps","receiver","has"],"sources":["/Users/JMD/Developments/Projects/Fiji-Web/node_modules/idb/build/esm/index.js"],"sourcesContent":["import { a as wrap, b as addTraps } from './chunk.js';\nexport { e as unwrap, a as wrap } from './chunk.js';\n\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\r\nfunction openDB(name, version, { blocked, upgrade, blocking } = {}) {\r\n    const request = indexedDB.open(name, version);\r\n    const openPromise = wrap(request);\r\n    if (upgrade) {\r\n        request.addEventListener('upgradeneeded', (event) => {\r\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\r\n        });\r\n    }\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    if (blocking)\r\n        openPromise.then(db => db.addEventListener('versionchange', blocking));\r\n    return openPromise;\r\n}\r\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\r\nfunction deleteDB(name, { blocked } = {}) {\r\n    const request = indexedDB.deleteDatabase(name);\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    return wrap(request).then(() => undefined);\r\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\r\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\r\nconst cachedMethods = new Map();\r\nfunction getMethod(target, prop) {\r\n    if (!(target instanceof IDBDatabase &&\r\n        !(prop in target) &&\r\n        typeof prop === 'string'))\r\n        return;\r\n    if (cachedMethods.get(prop))\r\n        return cachedMethods.get(prop);\r\n    const targetFuncName = prop.replace(/FromIndex$/, '');\r\n    const useIndex = prop !== targetFuncName;\r\n    const isWrite = writeMethods.includes(targetFuncName);\r\n    if (\r\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\r\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\r\n        !(isWrite || readMethods.includes(targetFuncName)))\r\n        return;\r\n    const method = async function (storeName, ...args) {\r\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\r\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\r\n        let target = tx.store;\r\n        if (useIndex)\r\n            target = target.index(args.shift());\r\n        const returnVal = target[targetFuncName](...args);\r\n        if (isWrite)\r\n            await tx.done;\r\n        return returnVal;\r\n    };\r\n    cachedMethods.set(prop, method);\r\n    return method;\r\n}\r\naddTraps(oldTraps => ({\r\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\r\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\r\n}));\n\nexport { openDB, deleteDB };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}