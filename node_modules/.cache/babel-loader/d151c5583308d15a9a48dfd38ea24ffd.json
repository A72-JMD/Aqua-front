{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition } from './utils';\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nvar SyncEngine = /** @class */function () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.started = false;\n    this.online = false;\n    this.processingMutations = false;\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, this.namespaceResolver, MutationEvent, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, maxRecordsToSync, syncPageSize);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, conflictHandler, errorHandler);\n  }\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      _this.started = true;\n      var subscriptions = [];\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, datastoreConnectivity;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.setupModels(params)];\n              case 1:\n                _a.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _a.sent();\n                logger.error('Sync engine error on start', err_1);\n                return [2 /*return*/];\n              case 3:\n                datastoreConnectivity = new DataStoreConnectivity();\n                datastoreConnectivity.status().subscribe(function (_a) {\n                  var online = _a.online;\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _b, ctlSubsObservable, dataSubsObservable, errorHandler, _c, _d, err_2, currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable, syncQuerySubscription, err_3;\n                    var _this = this;\n                    return __generator(this, function (_e) {\n                      switch (_e.label) {\n                        case 0:\n                          if (!(online && !this.online)) return [3 /*break*/, 10];\n                          _b = this.subscriptionsProcessor.start(), ctlSubsObservable = _b[0], dataSubsObservable = _b[1];\n                          errorHandler = this.disconnectionHandler(datastoreConnectivity);\n                          _e.label = 1;\n                        case 1:\n                          _e.trys.push([1, 3,, 4]);\n                          _d = (_c = subscriptions).push;\n                          return [4 /*yield*/, this.waitForSubscriptionsReady(ctlSubsObservable, errorHandler)];\n                        case 2:\n                          _d.apply(_c, [_e.sent()]);\n                          return [3 /*break*/, 4];\n                        case 3:\n                          err_2 = _e.sent();\n                          observer.error(err_2);\n                          return [2 /*return*/];\n                        case 4:\n                          logger.log('Realtime ready');\n                          currentTimeStamp = new Date().getTime();\n                          return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                        case 5:\n                          modelLastSync = _e.sent();\n                          paginatingModels = new Set(modelLastSync.keys());\n                          syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                          if (this.isFullSync(modelLastSync)) {\n                            clearTimeout(this.fullSyncTimeoutId);\n                            this.fullSyncTimeoutId = undefined;\n                          }\n                          _e.label = 6;\n                        case 6:\n                          _e.trys.push([6, 8,, 9]);\n                          return [4 /*yield*/, this.waitForSyncQueries(syncQueriesObservable, paginatingModels)];\n                        case 7:\n                          syncQuerySubscription = _e.sent();\n                          if (syncQuerySubscription) {\n                            subscriptions.push(syncQuerySubscription);\n                          }\n                          return [3 /*break*/, 9];\n                        case 8:\n                          err_3 = _e.sent();\n                          observer.error(err_3);\n                          return [2 /*return*/];\n                        case 9:\n                          //#endregion\n                          //#region process mutations\n                          subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                            var _transformerMutationType = _a[0],\n                              modelDefinition = _a[1],\n                              item = _a[2];\n                            var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                            var model = _this.modelInstanceCreator(modelConstructor, item);\n                            _this.modelMerger.merge(_this.storage, model);\n                          }));\n                          //#endregion\n                          // TODO: extract to function\n                          subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                            var _transformerMutationType = _a[0],\n                              modelDefinition = _a[1],\n                              item = _a[2];\n                            var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                            var model = _this.modelInstanceCreator(modelConstructor, item);\n                            _this.modelMerger.merge(_this.storage, model);\n                          }));\n                          return [3 /*break*/, 11];\n                        case 10:\n                          if (!online) {\n                            subscriptions.forEach(function (sub) {\n                              return sub.unsubscribe();\n                            });\n                            subscriptions = [];\n                          }\n                          _e.label = 11;\n                        case 11:\n                          this.online = online;\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n                  var modelDefinition = _this.getModelDefinition(model);\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function (_a) {\n                    var opType = _a.opType,\n                      model = _a.model,\n                      element = _a.element,\n                      condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                            MutationEventConstructor = this.modelClasses['MutationEvent'];\n                            graphQLCondition = predicateToGraphQLCondition(condition);\n                            mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                            return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                          case 1:\n                            _b.sent();\n                            if (this.online) {\n                              this.mutationsProcessor.resume();\n                            }\n                            return [2 /*return*/];\n                        }\n                      });\n                    });\n                  }\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n      return function () {\n        subscriptions.forEach(function (sub) {\n          return sub.unsubscribe();\n        });\n      };\n    });\n  };\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4 /*yield*/, this.getModelsMetadata()];\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                model = _a.model,\n                lastSync = _a.lastSync,\n                lastFullSync = _a.lastFullSync,\n                fullSyncInterval = _a.fullSyncInterval;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2 /*return*/, modelLastSync];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.isFullSync = function (modelsMap) {\n    for (var _i = 0, _a = Array.from(modelsMap.values()); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        syncFrom = _b[1];\n      if (syncFrom === 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n  SyncEngine.prototype.waitForSyncQueries = function (observable, paginatingModels) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          if (!_this.online) {\n            resolve();\n          }\n          var currentTimeStamp = new Date().getTime();\n          var subscription = observable.subscribe({\n            error: function (err) {\n              reject(err);\n            },\n            next: function (_a) {\n              var namespace = _a.namespace,\n                modelDefinition = _a.modelDefinition,\n                items = _a.items,\n                done = _a.done,\n                startedAt = _a.startedAt,\n                isFullSync = _a.isFullSync;\n              return __awaiter(_this, void 0, void 0, function () {\n                var promises, modelMetadata_1, fullSyncInterval;\n                var _this = this;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      promises = items.map(function (item) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var modelConstructor, model;\n                          return __generator(this, function (_a) {\n                            modelConstructor = this.userModelClasses[modelDefinition.name];\n                            model = this.modelInstanceCreator(modelConstructor, item);\n                            return [2 /*return*/, this.modelMerger.merge(this.storage, model)];\n                          });\n                        });\n                      });\n                      return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                      _b.sent();\n                      if (!done) return [3 /*break*/, 4];\n                      paginatingModels.delete(modelDefinition);\n                      return [4 /*yield*/, this.getModelMetadata(namespace, modelDefinition.name)];\n                    case 2:\n                      modelMetadata_1 = _b.sent();\n                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                        draft.lastSync = startedAt;\n                        draft.lastFullSync = isFullSync ? currentTimeStamp : modelMetadata_1.lastFullSync;\n                      });\n                      fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                      return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                    case 3:\n                      _b.sent();\n                      // resolve promise if all done\n                      if (paginatingModels.size === 0) {\n                        resolve(subscription);\n                      }\n                      if (isFullSync && !this.fullSyncTimeoutId) {\n                        // register next full sync when no full sync is already scheduled\n                        this.fullSyncTimeoutId = setTimeout(function () {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  currentTimeStamp = new Date().getTime();\n                                  return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                                case 1:\n                                  modelLastSync = _a.sent();\n                                  paginatingModels = new Set(modelLastSync.keys());\n                                  syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                  this.fullSyncTimeoutId = undefined;\n                                  this.waitForSyncQueries(syncQueriesObservable, paginatingModels);\n                                  return [2 /*return*/];\n                              }\n                            });\n                          });\n                        }, fullSyncInterval);\n                      }\n                      _b.label = 4;\n                    case 4:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }\n          });\n        })];\n      });\n    });\n  };\n  SyncEngine.prototype.disconnectionHandler = function (datastoreConnectivity) {\n    return function (msg) {\n      // This implementation is tight to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n  SyncEngine.prototype.waitForSubscriptionsReady = function (ctlSubsObservable, errorHandler) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var subscription = ctlSubsObservable.subscribe({\n            next: function (msg) {\n              if (msg === CONTROL_MSG.CONNECTED) {\n                resolve(subscription);\n              }\n            },\n            error: function (err) {\n              reject(\"subscription failed \" + err);\n              errorHandler(err);\n            }\n          });\n        })];\n      });\n    });\n  };\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadata, models, promises;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model.name]);\n              });\n            });\n            promises = models.map(function (_a) {\n              var namespace = _a[0],\n                model = _a[1];\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, this.getModelMetadata(namespace, model)];\n                    case 1:\n                      modelMetadata = _b.sent();\n                      if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                      return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                        model: model,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null\n                      }), undefined, ownSymbol)];\n                    case 2:\n                      _b.sent();\n                      return [3 /*break*/, 5];\n                    case 3:\n                      return [4 /*yield*/, this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval;\n                      }))];\n                    case 4:\n                      _b.sent();\n                      _b.label = 5;\n                    case 5:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            });\n            return [4 /*yield*/, Promise.all(promises)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4 /*yield*/, this.storage.query(ModelMetadata)];\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2 /*return*/, modelsMetadata];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, modelMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) {\n              return c.namespace('eq', namespace).model('eq', model);\n            });\n            return [4 /*yield*/, this.storage.query(ModelMetadata, predicate)];\n          case 1:\n            modelMetadata = _a.sent()[0];\n            return [2 /*return*/, modelMetadata];\n        }\n      });\n    });\n  };\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n  return SyncEngine;\n}();\nexport { SyncEngine };","map":{"version":3,"sources":["../../src/sync/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition, } from './utils';\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler) {\n        this.schema = schema;\n        this.namespaceResolver = namespaceResolver;\n        this.modelClasses = modelClasses;\n        this.userModelClasses = userModelClasses;\n        this.storage = storage;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.maxRecordsToSync = maxRecordsToSync;\n        this.syncPageSize = syncPageSize;\n        this.started = false;\n        this.online = false;\n        this.processingMutations = false;\n        var MutationEvent = this.modelClasses['MutationEvent'];\n        this.outbox = new MutationEventOutbox(this.schema, this.namespaceResolver, MutationEvent, ownSymbol);\n        this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n        this.syncQueriesProcessor = new SyncProcessor(this.schema, maxRecordsToSync, syncPageSize);\n        this.subscriptionsProcessor = new SubscriptionProcessor(this.schema);\n        this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, conflictHandler, errorHandler);\n    }\n    SyncEngine.prototype.start = function (params) {\n        var _this = this;\n        return new Observable(function (observer) {\n            logger.log('starting sync engine...');\n            _this.started = true;\n            var subscriptions = [];\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var err_1, datastoreConnectivity;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _a.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.setupModels(params)];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _a.sent();\n                            logger.error('Sync engine error on start', err_1);\n                            return [2 /*return*/];\n                        case 3:\n                            datastoreConnectivity = new DataStoreConnectivity();\n                            datastoreConnectivity.status().subscribe(function (_a) {\n                                var online = _a.online;\n                                return __awaiter(_this, void 0, void 0, function () {\n                                    var _b, ctlSubsObservable, dataSubsObservable, errorHandler, _c, _d, err_2, currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable, syncQuerySubscription, err_3;\n                                    var _this = this;\n                                    return __generator(this, function (_e) {\n                                        switch (_e.label) {\n                                            case 0:\n                                                if (!(online && !this.online)) return [3 /*break*/, 10];\n                                                _b = this.subscriptionsProcessor.start(), ctlSubsObservable = _b[0], dataSubsObservable = _b[1];\n                                                errorHandler = this.disconnectionHandler(datastoreConnectivity);\n                                                _e.label = 1;\n                                            case 1:\n                                                _e.trys.push([1, 3, , 4]);\n                                                _d = (_c = subscriptions).push;\n                                                return [4 /*yield*/, this.waitForSubscriptionsReady(ctlSubsObservable, errorHandler)];\n                                            case 2:\n                                                _d.apply(_c, [_e.sent()]);\n                                                return [3 /*break*/, 4];\n                                            case 3:\n                                                err_2 = _e.sent();\n                                                observer.error(err_2);\n                                                return [2 /*return*/];\n                                            case 4:\n                                                logger.log('Realtime ready');\n                                                currentTimeStamp = new Date().getTime();\n                                                return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                                            case 5:\n                                                modelLastSync = _e.sent();\n                                                paginatingModels = new Set(modelLastSync.keys());\n                                                syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                                if (this.isFullSync(modelLastSync)) {\n                                                    clearTimeout(this.fullSyncTimeoutId);\n                                                    this.fullSyncTimeoutId = undefined;\n                                                }\n                                                _e.label = 6;\n                                            case 6:\n                                                _e.trys.push([6, 8, , 9]);\n                                                return [4 /*yield*/, this.waitForSyncQueries(syncQueriesObservable, paginatingModels)];\n                                            case 7:\n                                                syncQuerySubscription = _e.sent();\n                                                if (syncQuerySubscription) {\n                                                    subscriptions.push(syncQuerySubscription);\n                                                }\n                                                return [3 /*break*/, 9];\n                                            case 8:\n                                                err_3 = _e.sent();\n                                                observer.error(err_3);\n                                                return [2 /*return*/];\n                                            case 9:\n                                                //#endregion\n                                                //#region process mutations\n                                                subscriptions.push(this.mutationsProcessor\n                                                    .start()\n                                                    .subscribe(function (_a) {\n                                                    var _transformerMutationType = _a[0], modelDefinition = _a[1], item = _a[2];\n                                                    var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                    var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                    _this.modelMerger.merge(_this.storage, model);\n                                                }));\n                                                //#endregion\n                                                // TODO: extract to function\n                                                subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                                    var _transformerMutationType = _a[0], modelDefinition = _a[1], item = _a[2];\n                                                    var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                    var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                    _this.modelMerger.merge(_this.storage, model);\n                                                }));\n                                                return [3 /*break*/, 11];\n                                            case 10:\n                                                if (!online) {\n                                                    subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n                                                    subscriptions = [];\n                                                }\n                                                _e.label = 11;\n                                            case 11:\n                                                this.online = online;\n                                                return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            });\n                            this.storage\n                                .observe(null, null, ownSymbol)\n                                .filter(function (_a) {\n                                var model = _a.model;\n                                var modelDefinition = _this.getModelDefinition(model);\n                                return modelDefinition.syncable === true;\n                            })\n                                .subscribe({\n                                next: function (_a) {\n                                    var opType = _a.opType, model = _a.model, element = _a.element, condition = _a.condition;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                                        return __generator(this, function (_b) {\n                                            switch (_b.label) {\n                                                case 0:\n                                                    namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                                    MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                                    graphQLCondition = predicateToGraphQLCondition(condition);\n                                                    mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                                    return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                                                case 1:\n                                                    _b.sent();\n                                                    if (this.online) {\n                                                        this.mutationsProcessor.resume();\n                                                    }\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    });\n                                },\n                            });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            };\n        });\n    };\n    SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelLastSync, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = Map.bind;\n                        return [4 /*yield*/, this.getModelsMetadata()];\n                    case 1:\n                        modelLastSync = new (_a.apply(Map, [void 0, (_b.sent()).map(function (_a) {\n                                var namespace = _a.namespace, model = _a.model, lastSync = _a.lastSync, lastFullSync = _a.lastFullSync, fullSyncInterval = _a.fullSyncInterval;\n                                var nextFullSync = lastFullSync + fullSyncInterval;\n                                var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp\n                                    ? 0 // perform full sync if expired\n                                    : lastSync; // perform delta sync\n                                return [\n                                    _this.schema.namespaces[namespace].models[model],\n                                    [namespace, syncFrom],\n                                ];\n                            })]))();\n                        return [2 /*return*/, modelLastSync];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.isFullSync = function (modelsMap) {\n        for (var _i = 0, _a = Array.from(modelsMap.values()); _i < _a.length; _i++) {\n            var _b = _a[_i], syncFrom = _b[1];\n            if (syncFrom === 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n    SyncEngine.prototype.waitForSyncQueries = function (observable, paginatingModels) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        if (!_this.online) {\n                            resolve();\n                        }\n                        var currentTimeStamp = new Date().getTime();\n                        var subscription = observable.subscribe({\n                            error: function (err) {\n                                reject(err);\n                            },\n                            next: function (_a) {\n                                var namespace = _a.namespace, modelDefinition = _a.modelDefinition, items = _a.items, done = _a.done, startedAt = _a.startedAt, isFullSync = _a.isFullSync;\n                                return __awaiter(_this, void 0, void 0, function () {\n                                    var promises, modelMetadata_1, fullSyncInterval;\n                                    var _this = this;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                promises = items.map(function (item) { return __awaiter(_this, void 0, void 0, function () {\n                                                    var modelConstructor, model;\n                                                    return __generator(this, function (_a) {\n                                                        modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                        model = this.modelInstanceCreator(modelConstructor, item);\n                                                        return [2 /*return*/, this.modelMerger.merge(this.storage, model)];\n                                                    });\n                                                }); });\n                                                return [4 /*yield*/, Promise.all(promises)];\n                                            case 1:\n                                                _b.sent();\n                                                if (!done) return [3 /*break*/, 4];\n                                                paginatingModels.delete(modelDefinition);\n                                                return [4 /*yield*/, this.getModelMetadata(namespace, modelDefinition.name)];\n                                            case 2:\n                                                modelMetadata_1 = _b.sent();\n                                                modelMetadata_1 = this.modelClasses\n                                                    .ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                                    draft.lastSync = startedAt;\n                                                    draft.lastFullSync = isFullSync\n                                                        ? currentTimeStamp\n                                                        : modelMetadata_1.lastFullSync;\n                                                });\n                                                fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                                return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                                            case 3:\n                                                _b.sent();\n                                                // resolve promise if all done\n                                                if (paginatingModels.size === 0) {\n                                                    resolve(subscription);\n                                                }\n                                                if (isFullSync && !this.fullSyncTimeoutId) {\n                                                    // register next full sync when no full sync is already scheduled\n                                                    this.fullSyncTimeoutId = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                        var currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable;\n                                                        return __generator(this, function (_a) {\n                                                            switch (_a.label) {\n                                                                case 0:\n                                                                    currentTimeStamp = new Date().getTime();\n                                                                    return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                                                                case 1:\n                                                                    modelLastSync = _a.sent();\n                                                                    paginatingModels = new Set(modelLastSync.keys());\n                                                                    syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                                                    this.fullSyncTimeoutId = undefined;\n                                                                    this.waitForSyncQueries(syncQueriesObservable, paginatingModels);\n                                                                    return [2 /*return*/];\n                                                            }\n                                                        });\n                                                    }); }, fullSyncInterval);\n                                                }\n                                                _b.label = 4;\n                                            case 4: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            },\n                        });\n                    })];\n            });\n        });\n    };\n    SyncEngine.prototype.disconnectionHandler = function (datastoreConnectivity) {\n        return function (msg) {\n            // This implementation is tight to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n            if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n                PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n                datastoreConnectivity.socketDisconnected();\n            }\n        };\n    };\n    SyncEngine.prototype.waitForSubscriptionsReady = function (ctlSubsObservable, errorHandler) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var subscription = ctlSubsObservable.subscribe({\n                            next: function (msg) {\n                                if (msg === CONTROL_MSG.CONNECTED) {\n                                    resolve(subscription);\n                                }\n                            },\n                            error: function (err) {\n                                reject(\"subscription failed \" + err);\n                                errorHandler(err);\n                            },\n                        });\n                    })];\n            });\n        });\n    };\n    SyncEngine.prototype.setupModels = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fullSyncInterval, ModelMetadata, models, promises;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fullSyncInterval = params.fullSyncInterval;\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        models = [];\n                        Object.values(this.schema.namespaces).forEach(function (namespace) {\n                            Object.values(namespace.models)\n                                .filter(function (_a) {\n                                var syncable = _a.syncable;\n                                return syncable;\n                            })\n                                .forEach(function (model) {\n                                models.push([namespace.name, model.name]);\n                            });\n                        });\n                        promises = models.map(function (_a) {\n                            var namespace = _a[0], model = _a[1];\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var modelMetadata;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, this.getModelMetadata(namespace, model)];\n                                        case 1:\n                                            modelMetadata = _b.sent();\n                                            if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                                                    model: model,\n                                                    namespace: namespace,\n                                                    lastSync: null,\n                                                    fullSyncInterval: fullSyncInterval,\n                                                    lastFullSync: null,\n                                                }), undefined, ownSymbol)];\n                                        case 2:\n                                            _b.sent();\n                                            return [3 /*break*/, 5];\n                                        case 3: return [4 /*yield*/, this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                                                draft.fullSyncInterval = fullSyncInterval;\n                                            }))];\n                                        case 4:\n                                            _b.sent();\n                                            _b.label = 5;\n                                        case 5: return [2 /*return*/];\n                                    }\n                                });\n                            });\n                        });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelsMetadata = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, modelsMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        return [4 /*yield*/, this.storage.query(ModelMetadata)];\n                    case 1:\n                        modelsMetadata = _a.sent();\n                        return [2 /*return*/, modelsMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, predicate, modelMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) { return c.namespace('eq', namespace).model('eq', model); });\n                        return [4 /*yield*/, this.storage.query(ModelMetadata, predicate)];\n                    case 1:\n                        modelMetadata = (_a.sent())[0];\n                        return [2 /*return*/, modelMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n        return modelDefinition;\n    };\n    SyncEngine.getNamespace = function () {\n        var namespace = {\n            name: SYNC,\n            relationships: {},\n            enums: {\n                OperationType: {\n                    name: 'OperationType',\n                    values: ['CREATE', 'UPDATE', 'DELETE'],\n                },\n            },\n            nonModels: {},\n            models: {\n                MutationEvent: {\n                    name: 'MutationEvent',\n                    pluralName: 'MutationEvents',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        data: {\n                            name: 'data',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        modelId: {\n                            name: 'modelId',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        operation: {\n                            name: 'operation',\n                            type: {\n                                enum: 'Operationtype',\n                            },\n                            isArray: false,\n                            isRequired: true,\n                        },\n                        condition: {\n                            name: 'condition',\n                            type: 'String',\n                            isArray: false,\n                            isRequired: true,\n                        },\n                    },\n                },\n                ModelMetadata: {\n                    name: 'ModelMetadata',\n                    pluralName: 'ModelsMetadata',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        namespace: {\n                            name: 'namespace',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        lastSync: {\n                            name: 'lastSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        lastFullSync: {\n                            name: 'lastFullSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        fullSyncInterval: {\n                            name: 'fullSyncInterval',\n                            type: 'Int',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                    },\n                },\n            },\n        };\n        return namespace;\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}