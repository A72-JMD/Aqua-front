{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\nvar Int64 = /** @class */function () {\n  function Int64(bytes) {\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error('Int64 buffers must be exactly 8 bytes');\n    }\n  }\n  Int64.fromNumber = function (number) {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n      throw new Error(number + \" is too large (or, if negative, too small) to represent as an Int64\");\n    }\n    var bytes = new Uint8Array(8);\n    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n    if (number < 0) {\n      negate(bytes);\n    }\n    return new Int64(bytes);\n  };\n  /**\n   * Called implicitly by infix arithmetic operators.\n   */\n  Int64.prototype.valueOf = function () {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n    if (negative) {\n      negate(bytes);\n    }\n    return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n  };\n  Int64.prototype.toString = function () {\n    return String(this.valueOf());\n  };\n  return Int64;\n}();\nexports.Int64 = Int64;\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"sources":["../src/Int64.ts"],"names":[],"mappings":";;;;;AAAA,IAAA,mBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;AAEA;;;;;;AAMG;AACH,IAAA,KAAA,GAAA,aAAA,YAAA;EACI,SAAA,KAAA,CAAqB,KAAiB,EAAA;IAAjB,IAAA,CAAA,KAAK,GAAL,KAAK;IACtB,IAAI,KAAK,CAAC,UAAU,KAAK,CAAC,EAAE;MACxB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;IAC3D;EACL;EAEO,KAAA,CAAA,UAAU,GAAjB,UAAkB,MAAc,EAAA;IAC5B,IAAI,MAAM,GAAG,mBAAmB,IAAI,MAAM,GAAG,CAAC,mBAAmB,EAAE;MAC/D,MAAM,IAAI,KAAK,CACR,MAAM,GAAA,qEAAqE,CACjF;IACJ;IAED,IAAM,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC;IAC/B,KACI,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EACnD,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,CAAC,EACvB,CAAC,EAAE,EAAE,SAAS,IAAI,GAAG,EACvB;MACE,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS;IACvB;IAED,IAAI,MAAM,GAAG,CAAC,EAAE;MACZ,MAAM,CAAC,KAAK,CAAC;IAChB;IAED,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED;;AAEG;EACH,KAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACI,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,IAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAU;IACtC,IAAI,QAAQ,EAAE;MACV,MAAM,CAAC,KAAK,CAAC;IAChB;IAED,OAAO,QAAQ,CAAC,mBAAA,CAAA,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3D,CAAC;EAED,KAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACI,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAA,CAAE,CAAC;EACjC,CAAC;EACL,OAAA,KAAC;AAAD,CAAC,CAAA,CAAA;AA9CY,OAAA,CAAA,KAAA,GAAA,KAAA;AAgDb,SAAS,MAAM,CAAC,KAAiB,EAAA;EAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACxB,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;EACnB;EAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;IACzB,KAAK,CAAC,CAAC,CAAC,EAAE;IACV,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;EACvB;AACL","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\nvar Int64 = /** @class */ (function () {\n    function Int64(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error('Int64 buffers must be exactly 8 bytes');\n        }\n    }\n    Int64.fromNumber = function (number) {\n        if (number > 9223372036854775807 || number < -9223372036854775808) {\n            throw new Error(number + \" is too large (or, if negative, too small) to represent as an Int64\");\n        }\n        var bytes = new Uint8Array(8);\n        for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    };\n    /**\n     * Called implicitly by infix arithmetic operators.\n     */\n    Int64.prototype.valueOf = function () {\n        var bytes = this.bytes.slice(0);\n        var negative = bytes[0] & 128;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n    };\n    Int64.prototype.toString = function () {\n        return String(this.valueOf());\n    };\n    return Int64;\n}());\nexports.Int64 = Int64;\nfunction negate(bytes) {\n    for (var i = 0; i < 8; i++) {\n        bytes[i] ^= 0xFF;\n    }\n    for (var i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n//# sourceMappingURL=Int64.js.map"]},"metadata":{},"sourceType":"script"}