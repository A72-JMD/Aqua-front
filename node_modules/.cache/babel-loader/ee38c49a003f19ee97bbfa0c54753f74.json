{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n/**\n * Write logs\n * @class Logger\n */\nvar ConsoleLogger = /** @class */function () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = 'WARN';\n    }\n    this.name = name;\n    this.level = level;\n  }\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype._log = function (type) {\n    var msg = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n    var logger_level_name = this.level;\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n    var log = console.log.bind(console);\n    if (type === 'ERROR' && console.error) {\n      log = console.error.bind(console);\n    }\n    if (type === 'WARN' && console.warn) {\n      log = console.warn.bind(console);\n    }\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      log(prefix + \" - \" + msg[0]);\n    } else if (msg.length === 1) {\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      log(prefix, msg);\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['WARN'], msg));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['ERROR'], msg));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['DEBUG'], msg));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n    this._log.apply(this, __spreadArrays(['VERBOSE'], msg));\n  };\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\nexport { ConsoleLogger };","map":{"version":3,"sources":["../../src/Logger/ConsoleLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nvar LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5,\n};\n/**\n * Write logs\n * @class Logger\n */\nvar ConsoleLogger = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} name - Name of the logger\n     */\n    function ConsoleLogger(name, level) {\n        if (level === void 0) { level = 'WARN'; }\n        this.name = name;\n        this.level = level;\n    }\n    ConsoleLogger.prototype._padding = function (n) {\n        return n < 10 ? '0' + n : '' + n;\n    };\n    ConsoleLogger.prototype._ts = function () {\n        var dt = new Date();\n        return ([this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') +\n            '.' +\n            dt.getMilliseconds());\n    };\n    /**\n     * Write log\n     * @method\n     * @memeberof Logger\n     * @param {string} type - log type, default INFO\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype._log = function (type) {\n        var msg = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            msg[_i - 1] = arguments[_i];\n        }\n        var logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) {\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\n        }\n        if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n            logger_level_name = window.LOG_LEVEL;\n        }\n        var logger_level = LOG_LEVELS[logger_level_name];\n        var type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n        var log = console.log.bind(console);\n        if (type === 'ERROR' && console.error) {\n            log = console.error.bind(console);\n        }\n        if (type === 'WARN' && console.warn) {\n            log = console.warn.bind(console);\n        }\n        var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            log(prefix + \" - \" + msg[0]);\n        }\n        else if (msg.length === 1) {\n            log(prefix, msg[0]);\n        }\n        else if (typeof msg[0] === 'string') {\n            var obj = msg.slice(1);\n            if (obj.length === 1) {\n                obj = obj[0];\n            }\n            log(prefix + \" - \" + msg[0], obj);\n        }\n        else {\n            log(prefix, msg);\n        }\n    };\n    /**\n     * Write General log. Default to INFO\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.log = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['INFO'], msg));\n    };\n    /**\n     * Write INFO log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.info = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['INFO'], msg));\n    };\n    /**\n     * Write WARN log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.warn = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['WARN'], msg));\n    };\n    /**\n     * Write ERROR log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.error = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['ERROR'], msg));\n    };\n    /**\n     * Write DEBUG log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.debug = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['DEBUG'], msg));\n    };\n    /**\n     * Write VERBOSE log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    ConsoleLogger.prototype.verbose = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, __spreadArrays(['VERBOSE'], msg));\n    };\n    ConsoleLogger.LOG_LEVEL = null;\n    return ConsoleLogger;\n}());\nexport { ConsoleLogger };\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"module"}