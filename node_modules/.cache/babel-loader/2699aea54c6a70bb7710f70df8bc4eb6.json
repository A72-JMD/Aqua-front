{"ast":null,"code":"import { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nvar Parser = /** @class */function () {\n  function Parser() {}\n  Parser.parseMobilehubConfig = function (config) {\n    var amplifyConfig = {};\n    // Analytics\n    if (config['aws_mobile_analytics_app_id']) {\n      var Analytics = {\n        AWSPinpoint: {\n          appId: config['aws_mobile_analytics_app_id'],\n          region: config['aws_mobile_analytics_app_region']\n        }\n      };\n      amplifyConfig.Analytics = Analytics;\n    }\n    // Auth\n    if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n      var Auth = {\n        userPoolId: config['aws_user_pools_id'],\n        userPoolWebClientId: config['aws_user_pools_web_client_id'],\n        region: config['aws_cognito_region'],\n        identityPoolId: config['aws_cognito_identity_pool_id'],\n        identityPoolRegion: config['aws_cognito_region'],\n        mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable' ? true : false\n      };\n      amplifyConfig.Auth = Auth;\n    }\n    // Storage\n    var storageConfig;\n    if (config['aws_user_files_s3_bucket']) {\n      storageConfig = {\n        AWSS3: {\n          bucket: config['aws_user_files_s3_bucket'],\n          region: config['aws_user_files_s3_bucket_region'],\n          dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n        }\n      };\n    } else {\n      storageConfig = config ? config.Storage || config : {};\n    }\n    amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n    amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n    amplifyConfig.Storage = Object.assign({}, storageConfig);\n    logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n    return amplifyConfig;\n  };\n  return Parser;\n}();\nexport default Parser;","map":{"version":3,"sources":["../src/Parser.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,IAAI,MAAM,QAAQ,UAAU;AAElD,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC;AAEnC,IAAA,MAAA,GAAA,aAAA,YAAA;EAAA,SAAA,MAAA,CAAA,EAAA,CAsDA;EArDQ,MAAA,CAAA,oBAAoB,GAA3B,UAA4B,MAAM,EAAA;IACjC,IAAM,aAAa,GAAkB,CAAA,CAAE;IACvC;IACA,IAAI,MAAM,CAAC,6BAA6B,CAAC,EAAE;MAC1C,IAAM,SAAS,GAAG;QACjB,WAAW,EAAE;UACZ,KAAK,EAAE,MAAM,CAAC,6BAA6B,CAAC;UAC5C,MAAM,EAAE,MAAM,CAAC,iCAAiC;QAChD;OACD;MACD,aAAa,CAAC,SAAS,GAAG,SAAS;IACnC;IAED;IACA,IAAI,MAAM,CAAC,8BAA8B,CAAC,IAAI,MAAM,CAAC,mBAAmB,CAAC,EAAE;MAC1E,IAAM,IAAI,GAAG;QACZ,UAAU,EAAE,MAAM,CAAC,mBAAmB,CAAC;QACvC,mBAAmB,EAAE,MAAM,CAAC,8BAA8B,CAAC;QAC3D,MAAM,EAAE,MAAM,CAAC,oBAAoB,CAAC;QACpC,cAAc,EAAE,MAAM,CAAC,8BAA8B,CAAC;QAC/C,kBAAkB,EAAE,MAAM,CAAC,oBAAoB,CAAC;QACvD,eAAe,EACd,MAAM,CAAC,uBAAuB,CAAC,KAAK,QAAQ,GAAG,IAAI,GAAG;OACvD;MACD,aAAa,CAAC,IAAI,GAAG,IAAI;IACzB;IAED;IACA,IAAI,aAAa;IACjB,IAAI,MAAM,CAAC,0BAA0B,CAAC,EAAE;MACvC,aAAa,GAAG;QACf,KAAK,EAAE;UACN,MAAM,EAAE,MAAM,CAAC,0BAA0B,CAAC;UAC1C,MAAM,EAAE,MAAM,CAAC,iCAAiC,CAAC;UACjD,0CAA0C,EACzC,MAAM,CACL,oEAAoE;QAEtE;OACD;KACD,MAAM;MACN,aAAa,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,GAAG,CAAA,CAAE;IACtD;IACD,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CACtC,CAAA,CAAE,EACF,aAAa,CAAC,SAAS,EACvB,MAAM,CAAC,SAAS,CAChB;IACD,aAAa,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;IACvE,aAAa,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,aAAa,CAAC;IACxD,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,MAAM,EAAE,kBAAkB,EAAE,aAAa,CAAC;IACvE,OAAO,aAAa;EACrB,CAAC;EACF,OAAA,MAAC;AAAD,CAAC,CAAA,CAAA","sourceRoot":"","sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nvar Parser = /** @class */ (function () {\n    function Parser() {\n    }\n    Parser.parseMobilehubConfig = function (config) {\n        var amplifyConfig = {};\n        // Analytics\n        if (config['aws_mobile_analytics_app_id']) {\n            var Analytics = {\n                AWSPinpoint: {\n                    appId: config['aws_mobile_analytics_app_id'],\n                    region: config['aws_mobile_analytics_app_region'],\n                },\n            };\n            amplifyConfig.Analytics = Analytics;\n        }\n        // Auth\n        if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n            var Auth = {\n                userPoolId: config['aws_user_pools_id'],\n                userPoolWebClientId: config['aws_user_pools_web_client_id'],\n                region: config['aws_cognito_region'],\n                identityPoolId: config['aws_cognito_identity_pool_id'],\n                identityPoolRegion: config['aws_cognito_region'],\n                mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable' ? true : false,\n            };\n            amplifyConfig.Auth = Auth;\n        }\n        // Storage\n        var storageConfig;\n        if (config['aws_user_files_s3_bucket']) {\n            storageConfig = {\n                AWSS3: {\n                    bucket: config['aws_user_files_s3_bucket'],\n                    region: config['aws_user_files_s3_bucket_region'],\n                    dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'],\n                },\n            };\n        }\n        else {\n            storageConfig = config ? config.Storage || config : {};\n        }\n        amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n        amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n        amplifyConfig.Storage = Object.assign({}, storageConfig);\n        logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n        return amplifyConfig;\n    };\n    return Parser;\n}());\nexport default Parser;\n//# sourceMappingURL=Parser.js.map"]},"metadata":{},"sourceType":"module"}