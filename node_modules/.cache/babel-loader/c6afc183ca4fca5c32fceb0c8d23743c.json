{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\nvar Predictions = /** @class */function () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function Predictions(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n  Predictions.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n  Predictions.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n    var pluggableAdded = false;\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n      pluggableAdded = true;\n    }\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n  Predictions.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n  Predictions.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n  Predictions.prototype.configure = function (options) {\n    var _this = this;\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n  Predictions.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n  Predictions.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n  Predictions.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  };\n  // tslint:disable-next-line: max-line-length\n  Predictions.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spreadArrays(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n  Predictions.prototype.getAllProviders = function () {\n    return __spreadArrays(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n  Predictions.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'],\n    // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n  Predictions.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n  Predictions.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n  Predictions.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n  return Predictions;\n}();\nexport default Predictions;","map":{"version":3,"sources":["../src/Predictions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\nvar Predictions = /** @class */ (function () {\n    /**\n     * Initialize Predictions with AWS configurations\n     * @param {PredictionsOptions} options - Configuration object for Predictions\n     */\n    function Predictions(options) {\n        this._options = options;\n        this._convertPluggables = [];\n        this._identifyPluggables = [];\n        this._interpretPluggables = [];\n    }\n    Predictions.prototype.getModuleName = function () {\n        return 'Predictions';\n    };\n    /**\n     * add plugin/pluggable into Predictions category\n     * @param {Object} pluggable - an instance of the plugin/pluggable\n     **/\n    Predictions.prototype.addPluggable = function (pluggable) {\n        if (this.getPluggable(pluggable.getProviderName())) {\n            throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n        }\n        var pluggableAdded = false;\n        if (this.implementsConvertPluggable(pluggable)) {\n            this._convertPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (this.implementsIdentifyPluggable(pluggable)) {\n            this._identifyPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (this.implementsInterpretPluggable(pluggable)) {\n            this._interpretPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (pluggableAdded) {\n            this.configurePluggable(pluggable);\n        }\n    };\n    /**\n     * Get the plugin object\n     * @param providerName - the name of the plugin\n     */\n    Predictions.prototype.getPluggable = function (providerName) {\n        var pluggable = this.getAllProviders().find(function (pluggable) { return pluggable.getProviderName() === providerName; });\n        if (pluggable === undefined) {\n            logger.debug('No plugin found with providerName=>', providerName);\n            return null;\n        }\n        else\n            return pluggable;\n    };\n    /**\n     * Remove the plugin object\n     * @param providerName - the name of the plugin\n     */\n    Predictions.prototype.removePluggable = function (providerName) {\n        this._convertPluggables = this._convertPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        return;\n    };\n    /**\n     * To make both top level providers and category level providers work with same interface and configuration\n     * this method duplicates Predictions config into parent level config (for top level provider) and\n     * category level config (such as convert, identify etc) and pass both to each provider.\n     */\n    Predictions.prototype.configure = function (options) {\n        var _this = this;\n        var predictionsConfig = options ? options.predictions || options : {};\n        predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n        this._options = Object.assign({}, this._options, predictionsConfig);\n        logger.debug('configure Predictions', this._options);\n        this.getAllProviders().forEach(function (pluggable) {\n            return _this.configurePluggable(pluggable);\n        });\n    };\n    Predictions.prototype.interpret = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n        return pluggableToExecute.interpret(input);\n    };\n    Predictions.prototype.convert = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n        return pluggableToExecute.convert(input);\n    };\n    Predictions.prototype.identify = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n        return pluggableToExecute.identify(input);\n    };\n    // tslint:disable-next-line: max-line-length\n    Predictions.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n        // Give preference to provider name first since it is more specific to this call, even if\n        // there is only one provider configured to error out if the name provided is not the one matched.\n        if (providerOptions && providerOptions.providerName) {\n            return __spreadArrays(pluggables).find(function (pluggable) {\n                return pluggable.getProviderName() === providerOptions.providerName;\n            });\n        }\n        else {\n            if (pluggables.length === 1) {\n                return pluggables[0];\n            }\n            else {\n                throw new Error('More than one or no providers are configured, ' +\n                    'Either specify a provider name or configure exactly one provider');\n            }\n        }\n    };\n    Predictions.prototype.getAllProviders = function () {\n        return __spreadArrays(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n    };\n    Predictions.prototype.configurePluggable = function (pluggable) {\n        var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n        this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n        );\n        pluggable.configure(categoryConfig);\n    };\n    Predictions.prototype.implementsConvertPluggable = function (obj) {\n        return obj && typeof obj.convert === 'function';\n    };\n    Predictions.prototype.implementsIdentifyPluggable = function (obj) {\n        return obj && typeof obj.identify === 'function';\n    };\n    Predictions.prototype.implementsInterpretPluggable = function (obj) {\n        return obj && typeof obj.interpret === 'function';\n    };\n    return Predictions;\n}());\nexport default Predictions;\n//# sourceMappingURL=Predictions.js.map"]},"metadata":{},"sourceType":"module"}