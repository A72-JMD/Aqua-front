{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger, Reachability } from '@aws-amplify/core';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */function () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n    return new Observable(function (observer) {\n      _this.observer = observer;\n      // Will be used to forward socket connection changes, enhancing Reachability\n      var subs = new Reachability().networkMonitor().subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        observer.next(observerResult);\n      });\n      return function () {\n        subs.unsubscribe();\n      };\n    });\n  };\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n      setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n  return DataStoreConnectivity;\n}();\nexport default DataStoreConnectivity;","map":{"version":3,"sources":["../../src/sync/datastoreConnectivity.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,UAAU,MAAM,gBAAgB;AAC5C,SAAS,aAAa,IAAI,MAAM,EAAE,YAAY,QAAQ,mBAAmB;AAEzE,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC;AAEtC,IAAM,eAAe,GAAG,IAAI,CAAC,CAAC;AAO9B,IAAA,qBAAA,GAAA,aAAA,YAAA;EAGC,SAAA,qBAAA,CAAA,EAAA;IACC,IAAI,CAAC,gBAAgB,GAAG;MACvB,MAAM,EAAE;KACR;EACF;EAEA,qBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,IAAI,CAAC,QAAQ,EAAE;MAClB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC;IAC5C;IACD,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ,EAAA;MAC7B,KAAI,CAAC,QAAQ,GAAG,QAAQ;MACxB;MAEA,IAAM,IAAI,GAAG,IAAI,YAAY,CAAA,CAAE,CAC7B,cAAc,CAAA,CAAE,CAChB,SAAS,CAAC,UAAC,EAAU,EAAA;YAAR,MAAA,GAAA,EAAA,CAAA,MAAM;QACnB,KAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,MAAM;QAErC,IAAM,cAAc,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,KAAI,CAAC,gBAAgB,CAAE,CAAC,CAAC;QAErD,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;MAC9B,CAAC,CAAC;MAEH,OAAO,YAAA;QACN,IAAI,CAAC,WAAW,CAAA,CAAE;MACnB,CAAC;IACF,CAAC,CAAC;EACH,CAAC;EAED,qBAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACC,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;MAC9D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAAE,MAAM,EAAE;MAAK,CAAE,CAAC,CAAC,CAAC;MAEvC,UAAU,CAAC,YAAA;QACV,IAAM,cAAc,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,KAAI,CAAC,gBAAgB,CAAE,CAAC,CAAC;QACrD,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;MACnC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EACF,OAAA,qBAAC;AAAD,CAAC,CAAA,CAAA","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger, Reachability } from '@aws-amplify/core';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */ (function () {\n    function DataStoreConnectivity() {\n        this.connectionStatus = {\n            online: false,\n        };\n    }\n    DataStoreConnectivity.prototype.status = function () {\n        var _this = this;\n        if (this.observer) {\n            throw new Error('Subscriber already exists');\n        }\n        return new Observable(function (observer) {\n            _this.observer = observer;\n            // Will be used to forward socket connection changes, enhancing Reachability\n            var subs = new Reachability()\n                .networkMonitor()\n                .subscribe(function (_a) {\n                var online = _a.online;\n                _this.connectionStatus.online = online;\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                observer.next(observerResult);\n            });\n            return function () {\n                subs.unsubscribe();\n            };\n        });\n    };\n    DataStoreConnectivity.prototype.socketDisconnected = function () {\n        var _this = this;\n        if (this.observer && typeof this.observer.next === 'function') {\n            this.observer.next({ online: false }); // Notify network issue from the socket\n            setTimeout(function () {\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                _this.observer.next(observerResult);\n            }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n        }\n    };\n    return DataStoreConnectivity;\n}());\nexport default DataStoreConnectivity;\n//# sourceMappingURL=datastoreConnectivity.js.map"]},"metadata":{},"sourceType":"module"}