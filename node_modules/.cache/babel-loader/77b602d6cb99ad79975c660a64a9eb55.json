{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.aws_lex = new LexRuntime({\n      region: _this._config.region\n    });\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n    var _this = this;\n    if (err) {\n      rej(err);\n      return;\n    } else {\n      // Check if state is fulfilled to resolve onFullfilment promise\n      logger.debug('postContent state', data.dialogState);\n      if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname](null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete(null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n      }\n      res(data);\n      if (data.dialogState === 'Failed') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname]('Bot conversation failed');\n          }, 0);\n        }\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete('Bot conversation failed');\n          }, 0);\n        }\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, params;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._config[botname]) {\n                return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\n              }\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              if (!credentials) {\n                return [2 /*return*/, rej('No credentials')];\n              }\n              AWS.config.update({\n                credentials: credentials\n              });\n              this.aws_lex = new LexRuntime({\n                region: this._config[botname].region,\n                credentials: credentials\n              });\n              if (typeof message === 'string') {\n                params = {\n                  botAlias: this._config[botname].alias,\n                  botName: botname,\n                  inputText: message,\n                  userId: credentials.identityId\n                };\n                logger.debug('postText to lex', message);\n                this.aws_lex.postText(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              } else {\n                if (message.options['messageType'] === 'voice') {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'audio/x-l16; sample-rate=16000',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                } else {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'text/plain; charset=utf-8',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                }\n                logger.debug('postContent to lex', message);\n                this.aws_lex.postContent(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              }\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };","map":{"version":3,"sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.aws_lex = new LexRuntime({ region: _this._config.region });\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n        var _this = this;\n        if (err) {\n            rej(err);\n            return;\n        }\n        else {\n            // Check if state is fulfilled to resolve onFullfilment promise\n            logger.debug('postContent state', data.dialogState);\n            if (data.dialogState === 'ReadyForFulfillment' ||\n                data.dialogState === 'Fulfilled') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () {\n                        return _this._botsCompleteCallback[botname](null, { slots: data.slots });\n                    }, 0);\n                }\n                if (this._config &&\n                    typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);\n                }\n            }\n            res(data);\n            if (data.dialogState === 'Failed') {\n                if (typeof this._botsCompleteCallback[botname] === 'function') {\n                    setTimeout(function () {\n                        return _this._botsCompleteCallback[botname]('Bot conversation failed');\n                    }, 0);\n                }\n                if (this._config &&\n                    typeof this._config[botname].onComplete === 'function') {\n                    setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n                }\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, params;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        AWS.config.update({\n                            credentials: credentials,\n                        });\n                        this.aws_lex = new LexRuntime({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                        });\n                        if (typeof message === 'string') {\n                            params = {\n                                botAlias: this._config[botname].alias,\n                                botName: botname,\n                                inputText: message,\n                                userId: credentials.identityId,\n                            };\n                            logger.debug('postText to lex', message);\n                            this.aws_lex.postText(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        else {\n                            if (message.options['messageType'] === 'voice') {\n                                params = {\n                                    botAlias: this._config[botname].alias,\n                                    botName: botname,\n                                    contentType: 'audio/x-l16; sample-rate=16000',\n                                    inputStream: message.content,\n                                    userId: credentials.identityId,\n                                    accept: 'audio/mpeg',\n                                };\n                            }\n                            else {\n                                params = {\n                                    botAlias: this._config[botname].alias,\n                                    botName: botname,\n                                    contentType: 'text/plain; charset=utf-8',\n                                    inputStream: message.content,\n                                    userId: credentials.identityId,\n                                    accept: 'audio/mpeg',\n                                };\n                            }\n                            logger.debug('postContent to lex', message);\n                            this.aws_lex.postContent(params, function (err, data) {\n                                _this.responseCallback(err, data, res, rej, botname);\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        if (!this._config[botname]) {\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n//# sourceMappingURL=AWSLexProvider.js.map"]},"metadata":{},"sourceType":"module"}