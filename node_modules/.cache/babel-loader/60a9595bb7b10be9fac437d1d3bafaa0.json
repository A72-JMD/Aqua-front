{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isTargetNameAssociation, isNonModelFieldType, OpType } from '../types';\nimport { exhaustiveCheck } from '../util';\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nfunction generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(nonModelFields);\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition));\n  }\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\nfunction getConnectionFields(modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n      association = _a.association;\n    var connectionType = association.connectionType;\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          result.push(name + \" { id _deleted }\");\n        }\n        break;\n      default:\n        exhaustiveCheck(connectionType);\n    }\n  });\n  return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n      type = _a.type;\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n          name = field.name;\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\nexport function getAuthorizationRules(modelDefinition, transformerOpType) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n    _b = (_a === void 0 ? {} : _a).rules,\n    rules = _b === void 0 ? [] : _b;\n  var resultRules = [];\n  // Multiple rules can be declared for allow: owner\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n      identityClaim = _a === void 0 ? 'cognito:username' : _a,\n      _b = rule.ownerField,\n      ownerField = _b === void 0 ? 'owner' : _b,\n      _c = rule.operations,\n      operations = _c === void 0 ? ['create', 'update', 'delete'] : _c,\n      _d = rule.provider,\n      provider = _d === void 0 ? 'userPools' : _d,\n      _e = rule.groupClaim,\n      groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n      _f = rule.allow,\n      authStrategy = _f === void 0 ? 'iam' : _f,\n      _g = rule.groups,\n      groups = _g === void 0 ? [] : _g;\n    var isOperationAuthorized = operations.find(function (operation) {\n      return operation.toLowerCase() === transformerOpType.toLowerCase();\n    });\n    if (isOperationAuthorized) {\n      var rule_1 = {\n        identityClaim: identityClaim,\n        ownerField: ownerField,\n        provider: provider,\n        groupClaim: groupClaim,\n        authStrategy: authStrategy,\n        groups: groups\n      };\n      // owner rules has least priority\n      if (authStrategy === 'owner') {\n        resultRules.push(rule_1);\n      } else {\n        resultRules.unshift(rule_1);\n      }\n    }\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs = ' ';\n  var operationArgs = ' ';\n  var transformerMutationType;\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n    default:\n      exhaustiveCheck(graphQLOpType);\n  }\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n    default:\n      exhaustiveCheck(opType);\n  }\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, id ? {\n    id: id\n  } : {}), {\n    data: JSON.stringify(element),\n    modelId: element.id,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate) {\n  var result = {};\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n  predicate.predicates.forEach(function (p) {\n    var _a;\n    if (isPredicateObj(p)) {\n      var field = p.field,\n        operator = p.operator,\n        operand = p.operand;\n      if (field === 'id') {\n        return;\n      }\n      result[field] = (_a = {}, _a[operator] = operand, _a);\n    } else {\n      result[p.type] = predicateToGraphQLCondition(p);\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["../../src/sync/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isTargetNameAssociation, isNonModelFieldType, OpType, } from '../types';\nimport { exhaustiveCheck } from '../util';\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n    GraphQLOperationType[\"LIST\"] = \"query\";\n    GraphQLOperationType[\"CREATE\"] = \"mutation\";\n    GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n    GraphQLOperationType[\"DELETE\"] = \"mutation\";\n    GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n    TransformerMutationType[\"CREATE\"] = \"Create\";\n    TransformerMutationType[\"UPDATE\"] = \"Update\";\n    TransformerMutationType[\"DELETE\"] = \"Delete\";\n    TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n    _version: undefined,\n    _lastChangedAt: undefined,\n    _deleted: undefined,\n};\nvar metadataFields = (Object.keys(dummyMetadata));\nexport function getMetadataFields() {\n    return metadataFields;\n}\nfunction generateSelectionSet(namespace, modelDefinition) {\n    var scalarFields = getScalarFields(modelDefinition);\n    var nonModelFields = getNonModelFields(namespace, modelDefinition);\n    var scalarAndMetadataFields = Object.values(scalarFields)\n        .map(function (_a) {\n        var name = _a.name;\n        return name;\n    })\n        .concat(nonModelFields);\n    if (isSchemaModel(modelDefinition)) {\n        scalarAndMetadataFields = scalarAndMetadataFields\n            .concat(getMetadataFields())\n            .concat(getConnectionFields(modelDefinition));\n    }\n    var result = scalarAndMetadataFields.join('\\n');\n    return result;\n}\nfunction getScalarFields(modelDefinition) {\n    var fields = modelDefinition.fields;\n    var result = Object.values(fields)\n        .filter(function (field) {\n        if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n            return true;\n        }\n        return false;\n    })\n        .reduce(function (acc, field) {\n        acc[field.name] = field;\n        return acc;\n    }, {});\n    return result;\n}\nfunction getConnectionFields(modelDefinition) {\n    var result = [];\n    Object.values(modelDefinition.fields)\n        .filter(function (_a) {\n        var association = _a.association;\n        return association && Object.keys(association).length;\n    })\n        .forEach(function (_a) {\n        var name = _a.name, association = _a.association;\n        var connectionType = association.connectionType;\n        switch (connectionType) {\n            case 'HAS_ONE':\n            case 'HAS_MANY':\n                // Intentionally blank\n                break;\n            case 'BELONGS_TO':\n                if (isTargetNameAssociation(association)) {\n                    result.push(name + \" { id _deleted }\");\n                }\n                break;\n            default:\n                exhaustiveCheck(connectionType);\n        }\n    });\n    return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n    var result = [];\n    Object.values(modelDefinition.fields).forEach(function (_a) {\n        var name = _a.name, type = _a.type;\n        if (isNonModelFieldType(type)) {\n            var typeDefinition = namespace.nonModels[type.nonModel];\n            var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n                var name = _a.name;\n                return name;\n            });\n            var nested_1 = [];\n            Object.values(typeDefinition.fields).forEach(function (field) {\n                var type = field.type, name = field.name;\n                if (isNonModelFieldType(type)) {\n                    var typeDefinition_1 = namespace.nonModels[type.nonModel];\n                    nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n                }\n            });\n            result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n        }\n    });\n    return result;\n}\nexport function getAuthorizationRules(modelDefinition, transformerOpType) {\n    // Searching for owner authorization on attributes\n    var authConfig = []\n        .concat(modelDefinition.attributes)\n        .find(function (attr) { return attr && attr.type === 'auth'; });\n    var _a = (authConfig || {}).properties, _b = (_a === void 0 ? {} : _a).rules, rules = _b === void 0 ? [] : _b;\n    var resultRules = [];\n    // Multiple rules can be declared for allow: owner\n    rules.forEach(function (rule) {\n        // setting defaults for backwards compatibility with old cli\n        var _a = rule.identityClaim, identityClaim = _a === void 0 ? 'cognito:username' : _a, _b = rule.ownerField, ownerField = _b === void 0 ? 'owner' : _b, _c = rule.operations, operations = _c === void 0 ? ['create', 'update', 'delete'] : _c, _d = rule.provider, provider = _d === void 0 ? 'userPools' : _d, _e = rule.groupClaim, groupClaim = _e === void 0 ? 'cognito:groups' : _e, _f = rule.allow, authStrategy = _f === void 0 ? 'iam' : _f, _g = rule.groups, groups = _g === void 0 ? [] : _g;\n        var isOperationAuthorized = operations.find(function (operation) { return operation.toLowerCase() === transformerOpType.toLowerCase(); });\n        if (isOperationAuthorized) {\n            var rule_1 = {\n                identityClaim: identityClaim,\n                ownerField: ownerField,\n                provider: provider,\n                groupClaim: groupClaim,\n                authStrategy: authStrategy,\n                groups: groups,\n            };\n            // owner rules has least priority\n            if (authStrategy === 'owner') {\n                resultRules.push(rule_1);\n            }\n            else {\n                resultRules.unshift(rule_1);\n            }\n        }\n    });\n    return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n    var selectionSet = generateSelectionSet(namespace, modelDefinition);\n    var typeName = modelDefinition.name, pluralTypeName = modelDefinition.pluralName;\n    var opName = \"on\" + transformerMutationType + typeName;\n    var docArgs = '';\n    var opArgs = '';\n    if (isOwnerAuthorization) {\n        docArgs = \"($\" + ownerField + \": String!)\";\n        opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n    }\n    return [\n        transformerMutationType,\n        opName,\n        \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\",\n    ];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n    var selectionSet = generateSelectionSet(namespace, modelDefinition);\n    var typeName = modelDefinition.name, pluralTypeName = modelDefinition.pluralName;\n    var operation;\n    var documentArgs = ' ';\n    var operationArgs = ' ';\n    var transformerMutationType;\n    switch (graphQLOpType) {\n        case 'LIST':\n            operation = \"sync\" + pluralTypeName;\n            documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp)\";\n            operationArgs =\n                '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync)';\n            selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n            break;\n        case 'CREATE':\n            operation = \"create\" + typeName;\n            documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n            operationArgs = '(input: $input)';\n            transformerMutationType = TransformerMutationType.CREATE;\n            break;\n        case 'UPDATE':\n            operation = \"update\" + typeName;\n            documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n            operationArgs = '(input: $input, condition: $condition)';\n            transformerMutationType = TransformerMutationType.UPDATE;\n            break;\n        case 'DELETE':\n            operation = \"delete\" + typeName;\n            documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n            operationArgs = '(input: $input, condition: $condition)';\n            transformerMutationType = TransformerMutationType.DELETE;\n            break;\n        case 'GET':\n            operation = \"get\" + typeName;\n            documentArgs = \"($id: ID!)\";\n            operationArgs = '(id: $id)';\n            transformerMutationType = TransformerMutationType.GET;\n            break;\n        default:\n            exhaustiveCheck(graphQLOpType);\n    }\n    return [\n        [\n            transformerMutationType,\n            operation,\n            GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\",\n        ],\n    ];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n    var operation;\n    switch (opType) {\n        case OpType.INSERT:\n            operation = TransformerMutationType.CREATE;\n            break;\n        case OpType.UPDATE:\n            operation = TransformerMutationType.UPDATE;\n            break;\n        case OpType.DELETE:\n            operation = TransformerMutationType.DELETE;\n            break;\n        default:\n            exhaustiveCheck(opType);\n    }\n    var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, (id ? { id: id } : {})), { data: JSON.stringify(element), modelId: element.id, model: model.name, operation: operation, condition: JSON.stringify(condition) }));\n    return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate) {\n    var result = {};\n    if (!predicate || !Array.isArray(predicate.predicates)) {\n        return result;\n    }\n    predicate.predicates.forEach(function (p) {\n        var _a;\n        if (isPredicateObj(p)) {\n            var field = p.field, operator = p.operator, operand = p.operand;\n            if (field === 'id') {\n                return;\n            }\n            result[field] = (_a = {}, _a[operator] = operand, _a);\n        }\n        else {\n            result[p.type] = predicateToGraphQLCondition(p);\n        }\n    });\n    return result;\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}