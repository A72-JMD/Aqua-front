{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, isModelConstructor, traverseModel, validatePredicate, isPrivateMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {}\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n  IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.initPromise];\n          case 3:\n            _b.sent();\n            _b.label = 4;\n          case 4:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            if (!!this.db) return [3 /*break*/, 7];\n            _a = this;\n            return [4 /*yield*/, idb.openDB(DB_NAME, 1, {\n              upgrade: function (db, _oldVersion, _newVersion, _txn) {\n                var keyPath = 'id';\n                Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                  var namespace = theSchema.namespaces[namespaceName];\n                  Object.keys(namespace.models).forEach(function (modelName) {\n                    var indexes = _this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n                    var storeName = _this.getStorename(namespaceName, modelName);\n                    var store = db.createObjectStore(storeName, {\n                      keyPath: keyPath\n                    });\n                    indexes.forEach(function (index) {\n                      return store.createIndex(index, index);\n                    });\n                  });\n                });\n              }\n            })];\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, opType, e_1_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = _this.getStorename(namespaceName, modelName);\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            tx = this.db.transaction(__spreadArrays([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4 /*yield*/, store.get(model.id)];\n          case 2:\n            fromDB = _b.sent();\n            if (condition) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 12, 13, 18]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 11];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            store_1 = tx.objectStore(storeName_1);\n            id = item.id;\n            return [4 /*yield*/, store_1.get(id)];\n          case 6:\n            opType = _b.sent() === undefined ? OpType.INSERT : OpType.UPDATE;\n            if (!(id === model.id)) return [3 /*break*/, 8];\n            return [4 /*yield*/, store_1.put(item)];\n          case 7:\n            _b.sent();\n            result.push([instance, opType]);\n            return [3 /*break*/, 10];\n          case 8:\n            if (!(opType === OpType.INSERT)) return [3 /*break*/, 10];\n            return [4 /*yield*/, store_1.put(item)];\n          case 9:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 10;\n          case 10:\n            return [3 /*break*/, 4];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _b.trys.push([13,, 16, 17]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 14:\n            _b.sent();\n            _b.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [4 /*yield*/, tx.done];\n          case 19:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_2, _a, e_3, _b, e_4, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, connectionRecord, e_3_1, recordItem, connectionRecord, e_4_1, e_2_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readonly');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n            storeName = this.getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 17];\n              case 'HAS_MANY':\n                return [3 /*break*/, 30];\n            }\n            return [3 /*break*/, 31];\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 9];\n            recordItem = records_1_1.value;\n            if (!recordItem[fieldName]) return [3 /*break*/, 8];\n            return [4 /*yield*/, store.get(recordItem[fieldName])];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n          case 8:\n            return [3 /*break*/, 5];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 12:\n            _e.sent();\n            _e.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [3 /*break*/, 32];\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n          case 18:\n            return [4 /*yield*/, records_2.next()];\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3 /*break*/, 21];\n            return [4 /*yield*/, store.get(recordItem[targetName])];\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n          case 21:\n            return [3 /*break*/, 18];\n          case 22:\n            return [3 /*break*/, 29];\n          case 23:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 29];\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 26];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 25:\n            _e.sent();\n            _e.label = 26;\n          case 26:\n            return [3 /*break*/, 28];\n          case 27:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 28:\n            return [7 /*endfinally*/];\n          case 29:\n            return [3 /*break*/, 32];\n          case 30:\n            // TODO: Lazy loading\n            return [3 /*break*/, 32];\n          case 31:\n            exhaustiveCheck(relation.relationType);\n            return [3 /*break*/, 32];\n          case 32:\n            return [3 /*break*/, 2];\n          case 33:\n            return [3 /*break*/, 40];\n          case 34:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 40];\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 37];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 36:\n            _e.sent();\n            _e.label = 37;\n          case 37:\n            return [3 /*break*/, 39];\n          case 38:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 39:\n            return [7 /*endfinally*/];\n          case 40:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, predicateObjs_1, type_1, idPredicate, id, record, x, all, filtered, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _c.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            if (!predicate) return [3 /*break*/, 8];\n            predicates = ModelPredicateCreator.getPredicates(predicate);\n            if (!predicates) return [3 /*break*/, 8];\n            predicateObjs_1 = predicates.predicates, type_1 = predicates.type;\n            idPredicate = predicateObjs_1.length === 1 && predicateObjs_1.find(function (p) {\n              return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n            });\n            if (!idPredicate) return [3 /*break*/, 5];\n            id = idPredicate.operand;\n            return [4 /*yield*/, this.db.get(storeName, id)];\n          case 2:\n            record = _c.sent();\n            if (!record) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, [record])];\n          case 3:\n            x = _c.sent()[0];\n            return [2 /*return*/, [x]];\n          case 4:\n            return [2 /*return*/, []];\n          case 5:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 6:\n            all = _c.sent();\n            filtered = predicateObjs_1 ? all.filter(function (m) {\n              return validatePredicate(m, type_1, predicateObjs_1);\n            }) : all;\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, this.inMemoryPagination(filtered, pagination))];\n          case 7:\n            return [2 /*return*/, _c.sent()];\n          case 8:\n            _a = this.load;\n            _b = [namespaceName, modelConstructor.name];\n            return [4 /*yield*/, this.enginePagination(storeName, pagination)];\n          case 9:\n            return [4 /*yield*/, _a.apply(this, _b.concat([_c.sent()]))];\n          case 10:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination) {\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit, moreRecords, itemsLeft;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            moreRecords = true;\n            itemsLeft = limit;\n            _c.label = 4;\n          case 4:\n            if (!(moreRecords && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            if (hasLimit) {\n              itemsLeft--;\n              moreRecords = itemsLeft > 0 && cursor !== null;\n            } else {\n              moreRecords = cursor !== null;\n            }\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _a.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4 /*yield*/, store.get(model.id)];\n          case 10:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 12:\n            _a.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n          case 14:\n            _a.sent();\n            _a.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_5, _a, e_6, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, e_6_1, e_5_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 20, 21, 26]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 19];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 12, 13, 18]);\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 11];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 10];\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            return [4 /*yield*/, store.delete(item['id'])];\n          case 7:\n            _c.sent();\n            _c.label = 8;\n          case 8:\n            return [4 /*yield*/, store.delete(item.toString())];\n          case 9:\n            _c.sent();\n            _c.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _c.trys.push([13,, 16, 17]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 14:\n            _c.sent();\n            _c.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 2];\n          case 19:\n            return [3 /*break*/, 26];\n          case 20:\n            e_5_1 = _c.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 26];\n          case 21:\n            _c.trys.push([21,, 24, 25]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 23];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 22:\n            _c.sent();\n            _c.label = 23;\n          case 23:\n            return [3 /*break*/, 25];\n          case 24:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 25:\n            return [7 /*endfinally*/];\n          case 26:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_7, _a, e_8, _b, e_9, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, fieldName, modelName, storeName, _d, model, index_1, recordToDelete, e_8_1, index, model, childrenArray, e_9_1, e_7_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 36, 37, 42]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 35];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName;\n            storeName = this.getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 17];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 32];\n            }\n            return [3 /*break*/, 33];\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 9];\n            model = models_1_1.value;\n            index_1 = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index_1).get(model.id)];\n          case 6:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            _e.label = 8;\n          case 8:\n            return [3 /*break*/, 4];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 12:\n            _e.sent();\n            _e.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [3 /*break*/, 34];\n          case 17:\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n            _e.label = 18;\n          case 18:\n            _e.trys.push([18, 25, 26, 31]);\n            models_2 = __asyncValues(models);\n            _e.label = 19;\n          case 19:\n            return [4 /*yield*/, models_2.next()];\n          case 20:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 24];\n            model = models_2_1.value;\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(model['id'])];\n          case 21:\n            childrenArray = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 22:\n            _e.sent();\n            _e.label = 23;\n          case 23:\n            return [3 /*break*/, 19];\n          case 24:\n            return [3 /*break*/, 31];\n          case 25:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 31];\n          case 26:\n            _e.trys.push([26,, 29, 30]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 28];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 27:\n            _e.sent();\n            _e.label = 28;\n          case 28:\n            return [3 /*break*/, 30];\n          case 29:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 30:\n            return [7 /*endfinally*/];\n          case 31:\n            return [3 /*break*/, 34];\n          case 32:\n            // Intentionally blank\n            return [3 /*break*/, 34];\n          case 33:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 34];\n          case 34:\n            return [3 /*break*/, 1];\n          case 35:\n            return [3 /*break*/, 42];\n          case 36:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 42];\n          case 37:\n            _e.trys.push([37,, 40, 41]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 39];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 38:\n            _e.sent();\n            _e.label = 39;\n          case 39:\n            return [3 /*break*/, 41];\n          case 40:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 41:\n            return [7 /*endfinally*/];\n          case 42:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            this.db.close();\n            return [4 /*yield*/, idb.deleteDB(DB_NAME)];\n          case 2:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":{"version":3,"sources":["../../../src/storage/adapter/indexeddb.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne, } from '../../types';\nimport { exhaustiveCheck, getIndex, isModelConstructor, traverseModel, validatePredicate, isPrivateMode, } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */ (function () {\n    function IndexedDBAdapter() {\n    }\n    IndexedDBAdapter.prototype.checkPrivate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var isPrivate;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n                            return isPrivate;\n                        })];\n                    case 1:\n                        isPrivate = _a.sent();\n                        if (isPrivate) {\n                            logger.error(\"IndexedDB not supported in this browser's private mode\");\n                            return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n                        }\n                        else {\n                            return [2 /*return*/, Promise.resolve()];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n        var namespace = this.namespaceResolver(modelConstructor);\n        var modelName = modelConstructor.name;\n        return this.getStorename(namespace, modelName);\n    };\n    IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n        var storeName = namespace + \"_\" + modelName;\n        return storeName;\n    };\n    IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, error_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        if (!!this.initPromise) return [3 /*break*/, 2];\n                        this.initPromise = new Promise(function (res, rej) {\n                            _this.resolve = res;\n                            _this.reject = rej;\n                        });\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.initPromise];\n                    case 3:\n                        _b.sent();\n                        _b.label = 4;\n                    case 4:\n                        this.schema = theSchema;\n                        this.namespaceResolver = namespaceResolver;\n                        this.modelInstanceCreator = modelInstanceCreator;\n                        this.getModelConstructorByModelName = getModelConstructorByModelName;\n                        _b.label = 5;\n                    case 5:\n                        _b.trys.push([5, 8, , 9]);\n                        if (!!this.db) return [3 /*break*/, 7];\n                        _a = this;\n                        return [4 /*yield*/, idb.openDB(DB_NAME, 1, {\n                                upgrade: function (db, _oldVersion, _newVersion, _txn) {\n                                    var keyPath = 'id';\n                                    Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                                        var namespace = theSchema.namespaces[namespaceName];\n                                        Object.keys(namespace.models).forEach(function (modelName) {\n                                            var indexes = _this.schema.namespaces[namespaceName]\n                                                .relationships[modelName].indexes;\n                                            var storeName = _this.getStorename(namespaceName, modelName);\n                                            var store = db.createObjectStore(storeName, { keyPath: keyPath });\n                                            indexes.forEach(function (index) { return store.createIndex(index, index); });\n                                        });\n                                    });\n                                },\n                            })];\n                    case 6:\n                        _a.db = _b.sent();\n                        this.resolve();\n                        _b.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        error_1 = _b.sent();\n                        this.reject(error_1);\n                        return [3 /*break*/, 9];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.save = function (model, condition) {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, opType, e_1_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        set = new Set();\n                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;\n                            var storeName = _this.getStorename(namespaceName, modelName);\n                            set.add(storeName);\n                            return { storeName: storeName, item: item, instance: instance };\n                        });\n                        tx = this.db.transaction(__spreadArrays([storeName], Array.from(set.values())), 'readwrite');\n                        store = tx.objectStore(storeName);\n                        return [4 /*yield*/, store.get(model.id)];\n                    case 2:\n                        fromDB = _b.sent();\n                        if (condition) {\n                            predicates = ModelPredicateCreator.getPredicates(condition);\n                            predicateObjs = predicates.predicates, type = predicates.type;\n                            isValid = validatePredicate(fromDB, type, predicateObjs);\n                            if (!isValid) {\n                                msg = 'Conditional update failed';\n                                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                                throw new Error(msg);\n                            }\n                        }\n                        result = [];\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 12, 13, 18]);\n                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n                        _b.label = 4;\n                    case 4: return [4 /*yield*/, connectionStoreNames_1.next()];\n                    case 5:\n                        if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 11];\n                        resItem = connectionStoreNames_1_1.value;\n                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n                        store_1 = tx.objectStore(storeName_1);\n                        id = item.id;\n                        return [4 /*yield*/, store_1.get(id)];\n                    case 6:\n                        opType = (_b.sent()) === undefined ? OpType.INSERT : OpType.UPDATE;\n                        if (!(id === model.id)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, store_1.put(item)];\n                    case 7:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        if (!(opType === OpType.INSERT)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, store_1.put(item)];\n                    case 9:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        _b.label = 10;\n                    case 10: return [3 /*break*/, 4];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _b.trys.push([13, , 16, 17]);\n                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n                    case 14:\n                        _b.sent();\n                        _b.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [4 /*yield*/, tx.done];\n                    case 19:\n                        _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n        var records_1, records_1_1, records_2, records_2_1;\n        var e_2, _a, e_3, _b, e_4, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, connectionRecord, e_3_1, recordItem, connectionRecord, e_4_1, e_2_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        namespace = this.schema.namespaces[namespaceName];\n                        relations = namespace.relationships[srcModelName].relationTypes;\n                        connectionStoreNames = relations.map(function (_a) {\n                            var modelName = _a.modelName;\n                            return _this.getStorename(namespaceName, modelName);\n                        });\n                        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n                        if (connectionStoreNames.length === 0) {\n                            return [2 /*return*/, records.map(function (record) {\n                                    return _this.modelInstanceCreator(modelConstructor, record);\n                                })];\n                        }\n                        tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readonly');\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 34, 35, 40]);\n                        relations_1 = __asyncValues(relations);\n                        _e.label = 2;\n                    case 2: return [4 /*yield*/, relations_1.next()];\n                    case 3:\n                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 33];\n                        relation = relations_1_1.value;\n                        fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n                        storeName = this.getStorename(namespaceName, modelName);\n                        store = tx.objectStore(storeName);\n                        modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n                        _d = relation.relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 4];\n                            case 'BELONGS_TO': return [3 /*break*/, 17];\n                            case 'HAS_MANY': return [3 /*break*/, 30];\n                        }\n                        return [3 /*break*/, 31];\n                    case 4:\n                        _e.trys.push([4, 10, 11, 16]);\n                        records_1 = __asyncValues(records);\n                        _e.label = 5;\n                    case 5: return [4 /*yield*/, records_1.next()];\n                    case 6:\n                        if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 9];\n                        recordItem = records_1_1.value;\n                        if (!recordItem[fieldName]) return [3 /*break*/, 8];\n                        return [4 /*yield*/, store.get(recordItem[fieldName])];\n                    case 7:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        _e.label = 8;\n                    case 8: return [3 /*break*/, 5];\n                    case 9: return [3 /*break*/, 16];\n                    case 10:\n                        e_3_1 = _e.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 16];\n                    case 11:\n                        _e.trys.push([11, , 14, 15]);\n                        if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 13];\n                        return [4 /*yield*/, _b.call(records_1)];\n                    case 12:\n                        _e.sent();\n                        _e.label = 13;\n                    case 13: return [3 /*break*/, 15];\n                    case 14:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 15: return [7 /*endfinally*/];\n                    case 16: return [3 /*break*/, 32];\n                    case 17:\n                        _e.trys.push([17, 23, 24, 29]);\n                        records_2 = __asyncValues(records);\n                        _e.label = 18;\n                    case 18: return [4 /*yield*/, records_2.next()];\n                    case 19:\n                        if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 22];\n                        recordItem = records_2_1.value;\n                        if (!recordItem[targetName]) return [3 /*break*/, 21];\n                        return [4 /*yield*/, store.get(recordItem[targetName])];\n                    case 20:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        delete recordItem[targetName];\n                        _e.label = 21;\n                    case 21: return [3 /*break*/, 18];\n                    case 22: return [3 /*break*/, 29];\n                    case 23:\n                        e_4_1 = _e.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 29];\n                    case 24:\n                        _e.trys.push([24, , 27, 28]);\n                        if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 26];\n                        return [4 /*yield*/, _c.call(records_2)];\n                    case 25:\n                        _e.sent();\n                        _e.label = 26;\n                    case 26: return [3 /*break*/, 28];\n                    case 27:\n                        if (e_4) throw e_4.error;\n                        return [7 /*endfinally*/];\n                    case 28: return [7 /*endfinally*/];\n                    case 29: return [3 /*break*/, 32];\n                    case 30: \n                    // TODO: Lazy loading\n                    return [3 /*break*/, 32];\n                    case 31:\n                        exhaustiveCheck(relation.relationType);\n                        return [3 /*break*/, 32];\n                    case 32: return [3 /*break*/, 2];\n                    case 33: return [3 /*break*/, 40];\n                    case 34:\n                        e_2_1 = _e.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 40];\n                    case 35:\n                        _e.trys.push([35, , 38, 39]);\n                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 37];\n                        return [4 /*yield*/, _a.call(relations_1)];\n                    case 36:\n                        _e.sent();\n                        _e.label = 37;\n                    case 37: return [3 /*break*/, 39];\n                    case 38:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 39: return [7 /*endfinally*/];\n                    case 40: return [2 /*return*/, records.map(function (record) {\n                            return _this.modelInstanceCreator(modelConstructor, record);\n                        })];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, namespaceName, predicates, predicateObjs_1, type_1, idPredicate, id, record, x, all, filtered, _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _c.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        if (!predicate) return [3 /*break*/, 8];\n                        predicates = ModelPredicateCreator.getPredicates(predicate);\n                        if (!predicates) return [3 /*break*/, 8];\n                        predicateObjs_1 = predicates.predicates, type_1 = predicates.type;\n                        idPredicate = predicateObjs_1.length === 1 &&\n                            predicateObjs_1.find(function (p) { return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq'; });\n                        if (!idPredicate) return [3 /*break*/, 5];\n                        id = idPredicate.operand;\n                        return [4 /*yield*/, this.db.get(storeName, id)];\n                    case 2:\n                        record = _c.sent();\n                        if (!record) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, [\n                                record,\n                            ])];\n                    case 3:\n                        x = (_c.sent())[0];\n                        return [2 /*return*/, [x]];\n                    case 4: return [2 /*return*/, []];\n                    case 5: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 6:\n                        all = _c.sent();\n                        filtered = predicateObjs_1\n                            ? all.filter(function (m) { return validatePredicate(m, type_1, predicateObjs_1); })\n                            : all;\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, this.inMemoryPagination(filtered, pagination))];\n                    case 7: return [2 /*return*/, _c.sent()];\n                    case 8:\n                        _a = this.load;\n                        _b = [namespaceName,\n                            modelConstructor.name];\n                        return [4 /*yield*/, this.enginePagination(storeName, pagination)];\n                    case 9: return [4 /*yield*/, _a.apply(this, _b.concat([_c.sent()]))];\n                    case 10: return [2 /*return*/, _c.sent()];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n        if (pagination) {\n            var _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            var start = Math.max(0, page * limit) || 0;\n            var end = limit > 0 ? start + limit : records.length;\n            return records.slice(start, end);\n        }\n        return records;\n    };\n    IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit, moreRecords, itemsLeft;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!pagination) return [3 /*break*/, 7];\n                        _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n                        initialRecord = Math.max(0, page * limit) || 0;\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName)\n                                .objectStore(storeName)\n                                .openCursor()];\n                    case 1:\n                        cursor = _c.sent();\n                        if (!(initialRecord > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, cursor.advance(initialRecord)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        pageResults = [];\n                        hasLimit = typeof limit === 'number' && limit > 0;\n                        moreRecords = true;\n                        itemsLeft = limit;\n                        _c.label = 4;\n                    case 4:\n                        if (!(moreRecords && cursor.value)) return [3 /*break*/, 6];\n                        pageResults.push(cursor.value);\n                        return [4 /*yield*/, cursor.continue()];\n                    case 5:\n                        cursor = _c.sent();\n                        if (hasLimit) {\n                            itemsLeft--;\n                            moreRecords = itemsLeft > 0 && cursor !== null;\n                        }\n                        else {\n                            moreRecords = cursor !== null;\n                        }\n                        return [3 /*break*/, 4];\n                    case 6:\n                        result = pageResults;\n                        return [3 /*break*/, 9];\n                    case 7: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 8:\n                        result = (_c.sent());\n                        _c.label = 9;\n                    case 9: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, cursor, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readonly')\n                                .objectStore(storeName)\n                                .openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n                    case 2:\n                        cursor = _a.sent();\n                        result = cursor ? cursor.value : undefined;\n                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        deleteQueue = [];\n                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n                        modelConstructor = modelOrModelConstructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.query(modelConstructor, condition)];\n                    case 2:\n                        models = _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n                        if (!(condition !== undefined)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 4:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 5: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 6:\n                        _a.sent();\n                        // Delete all\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readwrite')\n                                .objectStore(storeName)\n                                .clear()];\n                    case 7:\n                        // Delete all\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        model = modelOrModelConstructor;\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        if (!condition) return [3 /*break*/, 13];\n                        tx = this.db.transaction([storeName], 'readwrite');\n                        store = tx.objectStore(storeName);\n                        return [4 /*yield*/, store.get(model.id)];\n                    case 10:\n                        fromDB = _a.sent();\n                        if (fromDB === undefined) {\n                            msg = 'Model instance not found in storage';\n                            logger.warn(msg, { model: model });\n                            return [2 /*return*/, [[model], []]];\n                        }\n                        predicates = ModelPredicateCreator.getPredicates(condition);\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        isValid = validatePredicate(fromDB, type, predicateObjs);\n                        if (!isValid) {\n                            msg = 'Conditional update failed';\n                            logger.error(msg, { model: fromDB, condition: predicateObjs });\n                            throw new Error(msg);\n                        }\n                        return [4 /*yield*/, tx.done];\n                    case 11:\n                        _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n                    case 12:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 13:\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 16:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [[model], deletedModels]];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n        var deleteQueue_1, deleteQueue_1_1;\n        var e_5, _a, e_6, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, e_6_1, e_5_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        connectionStoreNames = deleteQueue.map(function (_a) {\n                            var storeName = _a.storeName;\n                            return storeName;\n                        });\n                        tx = this.db.transaction(__spreadArrays(connectionStoreNames), 'readwrite');\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 20, 21, 26]);\n                        deleteQueue_1 = __asyncValues(deleteQueue);\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, deleteQueue_1.next()];\n                    case 3:\n                        if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 19];\n                        deleteItem = deleteQueue_1_1.value;\n                        storeName = deleteItem.storeName, items = deleteItem.items;\n                        store = tx.objectStore(storeName);\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 12, 13, 18]);\n                        items_1 = __asyncValues(items);\n                        _c.label = 5;\n                    case 5: return [4 /*yield*/, items_1.next()];\n                    case 6:\n                        if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 11];\n                        item = items_1_1.value;\n                        if (!item) return [3 /*break*/, 10];\n                        if (!(typeof item === 'object')) return [3 /*break*/, 8];\n                        return [4 /*yield*/, store.delete(item['id'])];\n                    case 7:\n                        _c.sent();\n                        _c.label = 8;\n                    case 8: return [4 /*yield*/, store.delete(item.toString())];\n                    case 9:\n                        _c.sent();\n                        _c.label = 10;\n                    case 10: return [3 /*break*/, 5];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_6_1 = _c.sent();\n                        e_6 = { error: e_6_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _c.trys.push([13, , 16, 17]);\n                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _b.call(items_1)];\n                    case 14:\n                        _c.sent();\n                        _c.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_6) throw e_6.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [3 /*break*/, 2];\n                    case 19: return [3 /*break*/, 26];\n                    case 20:\n                        e_5_1 = _c.sent();\n                        e_5 = { error: e_5_1 };\n                        return [3 /*break*/, 26];\n                    case 21:\n                        _c.trys.push([21, , 24, 25]);\n                        if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 23];\n                        return [4 /*yield*/, _a.call(deleteQueue_1)];\n                    case 22:\n                        _c.sent();\n                        _c.label = 23;\n                    case 23: return [3 /*break*/, 25];\n                    case 24:\n                        if (e_5) throw e_5.error;\n                        return [7 /*endfinally*/];\n                    case 25: return [7 /*endfinally*/];\n                    case 26: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n        var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n        var e_7, _a, e_8, _b, e_9, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var rel, relationType, fieldName, modelName, storeName, _d, model, index_1, recordToDelete, e_8_1, index, model, childrenArray, e_9_1, e_7_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _e.trys.push([0, 36, 37, 42]);\n                        relations_2 = __asyncValues(relations);\n                        _e.label = 1;\n                    case 1: return [4 /*yield*/, relations_2.next()];\n                    case 2:\n                        if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 35];\n                        rel = relations_2_1.value;\n                        relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName;\n                        storeName = this.getStorename(nameSpace, modelName);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 3];\n                            case 'HAS_MANY': return [3 /*break*/, 17];\n                            case 'BELONGS_TO': return [3 /*break*/, 32];\n                        }\n                        return [3 /*break*/, 33];\n                    case 3:\n                        _e.trys.push([3, 10, 11, 16]);\n                        models_1 = __asyncValues(models);\n                        _e.label = 4;\n                    case 4: return [4 /*yield*/, models_1.next()];\n                    case 5:\n                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 9];\n                        model = models_1_1.value;\n                        index_1 = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel);\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index_1)\n                                .get(model.id)];\n                    case 6:\n                        recordToDelete = _e.sent();\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n                    case 7:\n                        _e.sent();\n                        _e.label = 8;\n                    case 8: return [3 /*break*/, 4];\n                    case 9: return [3 /*break*/, 16];\n                    case 10:\n                        e_8_1 = _e.sent();\n                        e_8 = { error: e_8_1 };\n                        return [3 /*break*/, 16];\n                    case 11:\n                        _e.trys.push([11, , 14, 15]);\n                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 13];\n                        return [4 /*yield*/, _b.call(models_1)];\n                    case 12:\n                        _e.sent();\n                        _e.label = 13;\n                    case 13: return [3 /*break*/, 15];\n                    case 14:\n                        if (e_8) throw e_8.error;\n                        return [7 /*endfinally*/];\n                    case 15: return [7 /*endfinally*/];\n                    case 16: return [3 /*break*/, 34];\n                    case 17:\n                        index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel);\n                        _e.label = 18;\n                    case 18:\n                        _e.trys.push([18, 25, 26, 31]);\n                        models_2 = __asyncValues(models);\n                        _e.label = 19;\n                    case 19: return [4 /*yield*/, models_2.next()];\n                    case 20:\n                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 24];\n                        model = models_2_1.value;\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index)\n                                .getAll(model['id'])];\n                    case 21:\n                        childrenArray = _e.sent();\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n                    case 22:\n                        _e.sent();\n                        _e.label = 23;\n                    case 23: return [3 /*break*/, 19];\n                    case 24: return [3 /*break*/, 31];\n                    case 25:\n                        e_9_1 = _e.sent();\n                        e_9 = { error: e_9_1 };\n                        return [3 /*break*/, 31];\n                    case 26:\n                        _e.trys.push([26, , 29, 30]);\n                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 28];\n                        return [4 /*yield*/, _c.call(models_2)];\n                    case 27:\n                        _e.sent();\n                        _e.label = 28;\n                    case 28: return [3 /*break*/, 30];\n                    case 29:\n                        if (e_9) throw e_9.error;\n                        return [7 /*endfinally*/];\n                    case 30: return [7 /*endfinally*/];\n                    case 31: return [3 /*break*/, 34];\n                    case 32: \n                    // Intentionally blank\n                    return [3 /*break*/, 34];\n                    case 33:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 34];\n                    case 34: return [3 /*break*/, 1];\n                    case 35: return [3 /*break*/, 42];\n                    case 36:\n                        e_7_1 = _e.sent();\n                        e_7 = { error: e_7_1 };\n                        return [3 /*break*/, 42];\n                    case 37:\n                        _e.trys.push([37, , 40, 41]);\n                        if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 39];\n                        return [4 /*yield*/, _a.call(relations_2)];\n                    case 38:\n                        _e.sent();\n                        _e.label = 39;\n                    case 39: return [3 /*break*/, 41];\n                    case 40:\n                        if (e_7) throw e_7.error;\n                        return [7 /*endfinally*/];\n                    case 41: return [7 /*endfinally*/];\n                    case 42:\n                        deleteQueue.push({\n                            storeName: this.getStorename(nameSpace, srcModel),\n                            items: models.map(function (record) {\n                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n                            }),\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        this.db.close();\n                        return [4 /*yield*/, idb.deleteDB(DB_NAME)];\n                    case 2:\n                        _a.sent();\n                        this.db = undefined;\n                        this.initPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return IndexedDBAdapter;\n}());\nexport default new IndexedDBAdapter();\n//# sourceMappingURL=indexeddb.js.map"]},"metadata":{},"sourceType":"module"}